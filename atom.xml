<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>超元气Zeroの札记</title>
  <icon>https://www.gravatar.com/avatar/6f2cdb2237458c9d449c99b722c0099d</icon>
  <subtitle>一个集美貌与才华于一身的程序媛</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liuchao0704.github.io/"/>
  <updated>2020-02-19T06:49:09.833Z</updated>
  <id>https://liuchao0704.github.io/</id>
  
  <author>
    <name>超元气Zero</name>
    <email>2820501417@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>二进制浮点数</title>
    <link href="https://liuchao0704.github.io/2020/02/10/float/"/>
    <id>https://liuchao0704.github.io/2020/02/10/float/</id>
    <published>2020-02-10T07:32:20.000Z</published>
    <updated>2020-02-19T06:49:09.833Z</updated>
    
    <content type="html"><![CDATA[<p>简单总结二进制浮点数原理</p><a id="more"></a><p>根据国际标准IEEE 754，任意一个二进制浮点数V可以表示成下面的形式：  </p><p>$$<br>V = (-1)^{s}\times M \times2^{E}<br>$$</p><ul><li>(-1)^s表示符号位，当s=0，V为正数；当s=1，V为负数。</li><li>M表示有效数字，大于等于1，小于2。</li><li>2^E表示指数位数。</li></ul><p>IEEE 754规定，对于32位的浮点数，最高的1位是符号位s，接着的8位是指数E，剩下的23位为有效数字M。对于64位的浮点数，最高的1位是符号位S，接着的11位是指数E，剩下的52位为有效数字M。  </p><table><thead><tr><th>位数</th><th>0</th><th>1-8</th><th>9-31</th></tr></thead><tbody><tr><td>32</td><td>S （符号位）</td><td>E （实际加上127）</td><td>M（参考下面规则）</td></tr></tbody></table><table><thead><tr><th>位数</th><th>0</th><th>1-11</th><th>12-63</th></tr></thead><tbody><tr><td>64</td><td>S（符号位）</td><td>E （实际加上1023）</td><td>M （参考下面规则）</td></tr></tbody></table><p>IEEE 754对有效数字M和指数E，还有一些特别规定。<br>前面说过，1≤M&lt;2，也就是说，M可以写成1.xxxxxx的形式，其中xxxxxx表示小数部分。IEEE 754规定，在计算机内部保存M时，默认这个数的第一位总是1，因此可以被舍去，只保存后面的xxxxxx部分。比如保存1.01的时候，只保存01，等到读取的时候，再把第一位的1加上去。这样做的目的，是节省1位有效数字。以32位浮点数为例，留给M只有23位，将第一位的1舍去以后，等于可以保存24位有效数字。<br>首先，E为一个无符号整数（unsigned int）。这意味着，如果E为8位，它的取值范围为0~255；如果E为11位，它的取值范围为0~2047。但是，我们知道，科学计数法中的E是可以出现负数的，所以IEEE 754规定，E的真实值必须再减去一个中间数，对于8位的E，这个中间数是127；对于11位的E，这个中间数是1023。<br>比如，2^10的E是10，所以保存成32位浮点数时，必须保存成10+127=137，即10001001。<br>然后，指数E还可以再分成三种情况：  </p><ol><li>E不全为0或不全为1。这时，浮点数就采用上面的规则表示，即指数E的计算值减去127（或1023），得到真实值，再将有效数字M前加上第一位的1。</li><li>E全为0。这时，浮点数的指数E等于1-127（或者1-1023），有效数字M不再加上第一位的1，而是还原为0.xxxxxx的小数。这样做是为了表示±0，以及接近于0的很小的数字。</li><li>E全为1。这时，如果有效数字M全为0，表示±无穷大（正负取决于符号位s）；如果有效数字M不全为0，表示这个数不是一个数（NaN）。</li></ol><h5 id="浮点数-263-3-表示"><a href="#浮点数-263-3-表示" class="headerlink" title="浮点数 263.3 表示"></a>浮点数 263.3 表示</h5><ol><li><p>正数S = 0；</p></li><li><p>263(10)  = 100000111(2);</p></li><li><p>0.3(10) = 010011001100110011001100…(2);</p></li><li><p>100000111.010011001100110011001100 = 1.00000111010011001100110011001100  * 2 ^  8;</p></li><li><p>E = 8 + 127 = 135(10)= 10000111(2);</p></li><li><p>M = 1.00000111010011001100110011001100;</p></li><li><p>E 不全为0或者1，M = 00000111010011001100110011001100</p></li><li><p>0100 -0011-1000-0011-1010-0110-0110-0110</p></li><li><p><a href="https://www.h-schmidt.net/FloatConverter/IEEE754.html" target="_blank" rel="noopener">与官网比较</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单总结二进制浮点数原理&lt;/p&gt;
    
    </summary>
    
      <category term="js" scheme="https://liuchao0704.github.io/categories/js/"/>
    
    
      <category term="二进制浮点数" scheme="https://liuchao0704.github.io/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%B5%AE%E7%82%B9%E6%95%B0/"/>
    
      <category term="number" scheme="https://liuchao0704.github.io/tags/number/"/>
    
  </entry>
  
  <entry>
    <title>原生函数</title>
    <link href="https://liuchao0704.github.io/2020/01/30/nativeFunc/"/>
    <id>https://liuchao0704.github.io/2020/01/30/nativeFunc/</id>
    <published>2020-01-30T03:30:20.000Z</published>
    <updated>2020-02-19T04:08:46.294Z</updated>
    
    <content type="html"><![CDATA[<p>原生函数总结归纳</p><a id="more"></a><h2 id="常用原生函数"><a href="#常用原生函数" class="headerlink" title="常用原生函数"></a>常用原生函数</h2><ul><li><p>Sting()</p></li><li><p>Number()</p></li><li><p>Boolean()</p></li><li><p>Array()</p></li><li><p>Object()</p></li><li><p>Function()</p></li><li><p>RegExp()</p></li><li><p>Date()</p></li><li><p>Error()</p></li><li><p>Symbol() —— ES6中新加入的</p></li></ul><p>原生函数可以被当作构造函数来使用，但是其构造出来的是封装了基本类型值的<strong>封装对象</strong> </p><h2 id="内部属性-Class"><a href="#内部属性-Class" class="headerlink" title="内部属性[[Class]]"></a>内部属性[[Class]]</h2><p>所有typeof返回值为“object”的对象（如数组）都包含一个内部属性[[Class]]。这个属性无法直接访问，一般通过Object.prototype.toString(…)来查看</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString.call([<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line"><span class="string">"[object Array]"</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="regexp">/d/g</span>)</span><br><span class="line"><span class="string">"[object RegExp]"</span></span><br></pre></td></tr></table></figure><h2 id="封装对象的包装"><a href="#封装对象的包装" class="headerlink" title="封装对象的包装"></a>封装对象的包装</h2><p>基本类型没有.length 和 .toString()这样的属性和方法。需要通过封装对象才能访问，JavaScirpt会自动为基本类型的值包装一个封装对象。</p><h2 id="拆封"><a href="#拆封" class="headerlink" title="拆封"></a>拆封</h2><p>如果想要得到封装对象中的基本类型值，可以使用valueOf()函数</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原生函数总结归纳&lt;/p&gt;
    
    </summary>
    
      <category term="笔记【你不知道的js】" scheme="https://liuchao0704.github.io/categories/%E7%AC%94%E8%AE%B0%E3%80%90%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84js%E3%80%91/"/>
    
    
      <category term="原生函数" scheme="https://liuchao0704.github.io/tags/%E5%8E%9F%E7%94%9F%E5%87%BD%E6%95%B0/"/>
    
      <category term="js" scheme="https://liuchao0704.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>强制类型转换</title>
    <link href="https://liuchao0704.github.io/2020/01/12/casts/"/>
    <id>https://liuchao0704.github.io/2020/01/12/casts/</id>
    <published>2020-01-12T07:17:20.000Z</published>
    <updated>2020-02-19T04:08:25.414Z</updated>
    
    <content type="html"><![CDATA[<p>梳理强制类型的转换<br><a id="more"></a></p><h2 id="值类型转换"><a href="#值类型转换" class="headerlink" title="值类型转换"></a>值类型转换</h2><p> 将值从一种类型转换为另一种类型通常称为类型转换</p><ul><li>显示（强制类型）转换 —— 发生在静态语言编译</li><li>隐式（强制类型）转换 —— 发生在动态语言运行</li></ul><h2 id="抽象值操作"><a href="#抽象值操作" class="headerlink" title="抽象值操作"></a>抽象值操作</h2><ul><li><p>ToString</p></li><li><p>ToNumber </p></li><li><p>ToBoolean </p></li></ul><h3 id="ToString"><a href="#ToString" class="headerlink" title="ToString"></a>ToString</h3><ul><li><p>对于普通对象来说，除非自行定义，否则toString（）（Object.prototype.toString（））返回内部属性[[Class]]的值</p></li><li><p>数组的默认toString（）方法经过了重新定义，将所有单元字符串化以后再用’,’连接起来</p></li></ul><h3 id="JSON字符串化（并非强制类型转换只是规则与ToString类似）"><a href="#JSON字符串化（并非强制类型转换只是规则与ToString类似）" class="headerlink" title="JSON字符串化（并非强制类型转换只是规则与ToString类似）"></a>JSON字符串化（并非强制类型转换只是规则与ToString类似）</h3><p>工具函数 <code>JSON.stringify（...）</code>在将JSON对象序列化为字符串时也用到了<code>ToString</code></p><ul><li>字符串、数字、布尔值和<code>null</code>的 <code>JSON.stringify（...）</code>规则和<code>toString（）</code>基本相同，只不过序列化的结果总是字符串</li><li><p><code>JSON.stringify（...）</code>在对象中遇到<code>undefined</code> ，<code>function</code> 和 <code>symbol</code>时会自动将其忽略，<strong>在数组中</strong>则会返回null （以保证单元位置不变）</p></li><li><p><code>undefined</code>、任意的函数以及 <code>symbol</code> 被 <code>JSON.stringify（）</code> 作为单独的值进行序列化时，都会返回 <code>undefined</code></p></li></ul><ul><li>如果传递给<code>JSON,stringify（...）</code>的对象中定义了<code>toJSON（）</code>方法，那么该方法会在字符串化前调用，以便将对象转化为安全的JSON值</li></ul><h3 id="ToNumber"><a href="#ToNumber" class="headerlink" title="ToNumber"></a>ToNumber</h3><ul><li><p>对象（包括数组）会首先转化为相应的基本类型值</p></li><li><p>处理失败返回NaN</p></li><li><p>检查该值是否有valueOf（）方法</p><ul><li>如果有 使用该值进行强制类型转换</li><li>如果没有 使用toString（）返回值（如果存在）来进行强制类型转换</li></ul></li></ul><table><thead><tr><th>原始值</th><th>Number</th></tr></thead><tbody><tr><td>false</td><td>0</td></tr><tr><td>true</td><td>1</td></tr><tr><td>undefined</td><td>NaN</td></tr><tr><td>null</td><td>0</td></tr></tbody></table><h3 id="ToBoolean"><a href="#ToBoolean" class="headerlink" title="ToBoolean"></a>ToBoolean</h3><p>JavaScript </p><ul><li>假值（falsy value）<ul><li>undefined</li><li>null</li><li>false</li><li>-0,+0和NaN</li><li>“ “（空字符串）</li></ul></li><li><p>真值</p><ul><li>除假值以外的值，所有的对象都是真值</li></ul></li><li><p>假值对象</p><ul><li>浏览器在JavaScript语法创建了一些外来值，这些就是”假值对象”，将他们强制类型转换为布尔值时为false</li><li><code>documen.all</code></li></ul></li></ul><h2 id="显示强制类型转化"><a href="#显示强制类型转化" class="headerlink" title="显示强制类型转化"></a>显示强制类型转化</h2><h4 id="字符串和数字之间的显示转换"><a href="#字符串和数字之间的显示转换" class="headerlink" title="字符串和数字之间的显示转换"></a>字符串和数字之间的显示转换</h4><ul><li>一元运算符<ul><li>获取时间戳  <code>var timestamp = +new Date（）</code></li><li>es6获取当前时间戳 <code>var  timestamp = Date.now（）</code></li><li>获取指定时间的时间戳   <code>var  timestamp = new Date（）.getTime（）</code></li></ul></li><li>~ 运算符（字位操作符 “非”）<ul><li>~x 大致等于 -（x+1）</li><li>indexOf（…） === -1 , 利用 ~ 可以转化为 0</li></ul></li><li>~~ 字位截除</li></ul><h4 id="显示解析数字字符串"><a href="#显示解析数字字符串" class="headerlink" title="显示解析数字字符串"></a>显示解析数字字符串</h4><ul><li>解析非字符串<ul><li>parseInt（0.00008） = parseInt(“0.00008”）  = 0</li><li>parseInt（0.000008） =  parseInt（”8e-7”） = 8</li><li>parseInt（”0x10”） = 16 （16进制）</li><li>parseInt（”103”,2） = 2 （3为无效数字）</li></ul></li></ul><h4 id="显示转化为布尔值"><a href="#显示转化为布尔值" class="headerlink" title="显示转化为布尔值"></a>显示转化为布尔值</h4><ul><li><p>!! 强制转化</p><ul><li><p>一元运算符！显示的将值强制类型转换为布尔值。但是它同时还将值进行反转。所以!! 可以强制转换为布尔值，并且将结果反转回原值</p></li><li><p>if  判断</p></li><li><p>三目运算</p></li></ul></li></ul><h2 id="隐式强制类型转换"><a href="#隐式强制类型转换" class="headerlink" title="隐式强制类型转换"></a>隐式强制类型转换</h2><h4 id="字符串和数字之间的隐式强制类型转换"><a href="#字符串和数字之间的隐式强制类型转换" class="headerlink" title="字符串和数字之间的隐式强制类型转换"></a>字符串和数字之间的隐式强制类型转换</h4><ul><li>“+” 作为字符串拼接</li><li>“-“ 作为数字减法运算符 （”3.14” - 0 会将”3.14”强制转换为3.14）</li></ul><h4 id="布尔值到数字的隐式强制类型转换"><a href="#布尔值到数字的隐式强制类型转换" class="headerlink" title="布尔值到数字的隐式强制类型转换"></a>布尔值到数字的隐式强制类型转换</h4><ul><li>复杂的布尔逻辑转换为数字加法</li></ul><h4 id="隐式强制类型转换为布尔值"><a href="#隐式强制类型转换为布尔值" class="headerlink" title="隐式强制类型转换为布尔值"></a>隐式强制类型转换为布尔值</h4><ul><li>if （…）语句中的条件判断表达式</li><li>for （…;…;…）语句中条件判断表达式</li><li>while（）和 do while（）循环中的条件表达式</li><li>？：中的条件判断表达式</li><li>逻辑运算符||（逻辑或）和 &amp;&amp; （逻辑与）左边的操作数（作为条件判断表达式）</li></ul><h2 id="宽松相等和严格相等"><a href="#宽松相等和严格相等" class="headerlink" title="宽松相等和严格相等"></a>宽松相等和严格相等</h2><ul><li><p>“==允许在相等比较中进行强制类型转换，而===不允许” </p></li><li><p>NaN 不等于 NaN</p></li><li><p>+0 等于 -0</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;梳理强制类型的转换&lt;br&gt;
    
    </summary>
    
      <category term="笔记【你不知道的js】" scheme="https://liuchao0704.github.io/categories/%E7%AC%94%E8%AE%B0%E3%80%90%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84js%E3%80%91/"/>
    
    
      <category term="类型转换" scheme="https://liuchao0704.github.io/tags/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>String字符串 &amp; 数字</title>
    <link href="https://liuchao0704.github.io/2019/12/21/string&amp;number/"/>
    <id>https://liuchao0704.github.io/2019/12/21/string&amp;number/</id>
    <published>2019-12-21T07:32:20.000Z</published>
    <updated>2020-02-19T04:08:37.455Z</updated>
    
    <content type="html"><![CDATA[<p> 字符串，数字，null，undefined，特殊数字，特殊等式</p><a id="more"></a><h2 id="String-concat"><a href="#String-concat" class="headerlink" title="String.concat()"></a>String.concat()</h2><p><code>concat()</code> 方法将一个或多个字符串与原字符串连接合并，形成一个新的字符串并返回。</p><ul><li><p>语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.concat(string2, string3[, ..., stringN])</span><br></pre></td></tr></table></figure></li><li><p>示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hello = <span class="string">"Hello, "</span>;</span><br><span class="line"><span class="built_in">console</span>.log(hello.concat(<span class="string">"Kevin"</span>, <span class="string">" have a nice day."</span>)); <span class="comment">/* Hello, Kevin have a nice day. */</span></span><br></pre></td></tr></table></figure></li><li><p>性能<br>强烈建议使用 赋值操作符（+, +=）代替 concat 方法。</p></li></ul><h2 id="String-slice-String-substring"><a href="#String-slice-String-substring" class="headerlink" title="String.slice() /  String.substring()"></a>String.slice() /  String.substring()</h2><table><thead><tr><th>方法</th><th>参数1 indexStart</th><th>参数2 indexEnd</th><th>返回值</th></tr></thead><tbody><tr><td>slice</td><td>1. 如果小于0 则 加上字符串的长度 2. 如果start 大于等于 end 返回空字符串</td><td>1. 如果小于0 则 加上字符串的长度   2. 如果省略该参数，<code>slice()</code> 会一直提取到字符串末尾</td><td>包含给定字符串的指定部分的新字符串</td></tr><tr><td>substring</td><td>1. 参数小于0 或者为NaN 则被当作0 2. 如果start大于end 则互换 3如果start等于end 返回空字符串</td><td>1. 参数小于0 或者为NaN 则被当作0 2. 如果省略该参数，<code>substring()</code>会一直提取到字符串末尾</td><td>包含给定字符串的指定部分的新字符串</td></tr></tbody></table><p>JavaScript中的数字类型是基于IEEE 754标准来实现的，该标准通常也被称为“浮点数”。JavaScipt使用的是“双精度”格式（64位 二进制）。  </p><p>JavaScript中的”整数“就是没有小数的十进制。所以42.0即等同于”整数“42。</p><h2 id="较小的数值"><a href="#较小的数值" class="headerlink" title="较小的数值"></a>较小的数值</h2><p>如何判断0.1 + 0.2 = 0.3 ？  </p><p>最常见的是设置一个误差范围值，通常称为”机器精度“（machine epsilon），对于JavaScript的数字来说，这个值通常是2^-52。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">Number</span>.EPSILON) &#123;</span><br><span class="line">    <span class="built_in">Number</span>.EPSILON = <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">-52</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">numbersCloseEnoughToEqual</span>(<span class="params">n1, n2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.abs(n1 - n2) &lt; <span class="built_in">Number</span>.EPSILON;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = <span class="number">0.1</span> + <span class="number">0.2</span>;</span><br><span class="line"><span class="keyword">var</span> result1 = <span class="number">0.3</span>;</span><br><span class="line">numbersCloseEnoughToEqual(result, result1) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="整数的检测"><a href="#整数的检测" class="headerlink" title="整数的检测"></a>整数的检测</h2><ul><li>ES6中的<code>Number.isInteger()</code>；</li><li><code>typeof</code>为<code>number</code>,并且除以1余数为0；</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// polyfill</span></span><br><span class="line"> <span class="keyword">if</span> (!<span class="built_in">Number</span>.isInteger) &#123;</span><br><span class="line">    <span class="built_in">Number</span>.isInteger = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">typeof</span> num === <span class="string">'number'</span> &amp;&amp; num % <span class="number">1</span> === <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Number</span>.isInteger = <span class="built_in">Number</span>.isInteger || <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> value === <span class="string">'number'</span> &amp;&amp; </span><br><span class="line">    <span class="built_in">isFinite</span>(value) &amp;&amp; </span><br><span class="line">    <span class="built_in">Math</span>.floor(value) === value;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="特殊数值"><a href="#特殊数值" class="headerlink" title="特殊数值"></a>特殊数值</h2><ul><li>undefined  从未赋过值 ，没有值</li><li>null 空值， 曾赋过值，目前没有值</li></ul><h2 id="特殊的数字"><a href="#特殊的数字" class="headerlink" title="特殊的数字"></a>特殊的数字</h2><ul><li>NaN</li><li>无穷数</li><li>0 和 -0</li></ul><h4 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h4><ul><li>NaN是一个“不是数字的数字” ，typeof 是 number类型</li><li>NaN是一个特殊值，它和自身不相等，是唯一一个非自反的值；</li><li>Number.isNaN 可以检测是否是NaN；</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// polyfill</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">Number</span>.isNaN) &#123;</span><br><span class="line">    <span class="built_in">Number</span>.isNaN = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="keyword">typeof</span> n === <span class="string">'number'</span> &amp;&amp; <span class="built_in">window</span>.isNaN(n)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">Number</span>.isNaN) &#123;</span><br><span class="line">    <span class="built_in">Number</span>.isNaN = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n !== n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="特殊等式"><a href="#特殊等式" class="headerlink" title="特殊等式"></a>特殊等式</h2><ul><li>NaN !== NaN</li><li>-0 === 0</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 字符串，数字，null，undefined，特殊数字，特殊等式&lt;/p&gt;
    
    </summary>
    
      <category term="笔记【你不知道的js】" scheme="https://liuchao0704.github.io/categories/%E7%AC%94%E8%AE%B0%E3%80%90%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84js%E3%80%91/"/>
    
    
      <category term="number" scheme="https://liuchao0704.github.io/tags/number/"/>
    
      <category term="js" scheme="https://liuchao0704.github.io/tags/js/"/>
    
      <category term="string" scheme="https://liuchao0704.github.io/tags/string/"/>
    
  </entry>
  
  <entry>
    <title>Array数组</title>
    <link href="https://liuchao0704.github.io/2019/12/17/array/"/>
    <id>https://liuchao0704.github.io/2019/12/17/array/</id>
    <published>2019-12-17T01:32:20.000Z</published>
    <updated>2020-02-19T03:27:03.094Z</updated>
    
    <content type="html"><![CDATA[<p> 数组方法总结&amp;es6新增API</p><a id="more"></a><h2 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of()"></a>Array.of()</h2><p>Array.of() 方法创建一个具有可变数量参数的新数组示例，而不考虑参数的数量或类型。</p><ul><li><p>语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.of(element0[, element1[, ...[, elementN]]])</span><br></pre></td></tr></table></figure><ul><li>参数<br>element<em>N</em>任意个参数，将按顺序成为返回数组中的元素。</li><li>返回值<br>新的 <code>Array</code> 示例。</li></ul></li><li><p>示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">//字面量创造函数</span></span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="built_in">Array</span>(<span class="number">3</span>); <span class="comment">//产生空槽数组 [empty × 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.of(<span class="number">3</span>)) <span class="comment">// [3]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.of()) <span class="comment">// []</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h2><p>Array.from() 方法从一个类似数组或可迭代对象创建一个新的，浅拷贝的数组示例。  </p><ul><li><p>语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(arrayLike[, mapFn[, thisArg]])</span><br></pre></td></tr></table></figure><ul><li><p>参数<br>  <code>arrayLike</code> 想要转换成数组的伪数组对象或可迭代对象<br>  <code>mapFn</code> (可选参数) 如果指定了该参数，新数组中的每个元素会执行该回调函数。<br>  <code>thisArg</code>(可选参数)执行回调函数<code>mapFn</code> 时 <code>this</code> 对象</p></li><li><p>返回值<br>一个新的数组示例</p></li></ul></li><li><p>示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(<span class="string">'foo'</span>); <span class="comment">// [ "f", "o", "o" ]</span></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> f(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// [ 1, 2, 3 ]    </span></span><br><span class="line"> </span><br><span class="line"> <span class="built_in">Array</span>.from([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], x =&gt; x + x);<span class="comment">// [2, 4, 6]</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Array-isArray"><a href="#Array-isArray" class="headerlink" title="Array.isArray()"></a>Array.isArray()</h2><p>Array.isArray() 用于确定传递的值是否是一个 Array。</p><ul><li><p>语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.isArray(obj)</span><br></pre></td></tr></table></figure><ul><li><p>参数<br>  <code>obj</code> 需要检测的值</p></li><li><p>返回值<br>  如果值是 <code>Array</code>，则为true; 否则为false。</p></li></ul></li><li><p>示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面的函数调用都返回 true</span></span><br><span class="line"><span class="built_in">Array</span>.isArray([]);</span><br><span class="line"><span class="built_in">Array</span>.isArray([<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="keyword">new</span> <span class="built_in">Array</span>());</span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>))</span><br><span class="line"><span class="comment">// 鲜为人知的事实：其实 Array.prototype 也是一个数组。</span></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="built_in">Array</span>.prototype);</span><br></pre></td></tr></table></figure></li><li><p>Polyfill<br>假如不存在 Array.isArray()，则在其他代码之前运行下面的代码将创建该方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray) &#123;</span><br><span class="line">  <span class="built_in">Array</span>.isArray = <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(arg) === <span class="string">'[object Array]'</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Array-copyWithin"><a href="#Array-copyWithin" class="headerlink" title="Array.copyWithin()"></a>Array.copyWithin()</h2><p><code>copyWithin()</code> 方法浅复制数组的一部分到同一数组中的另一个位置，并返回它，不会改变原数组的长度。</p><ul><li><p>语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.copyWithin(target[, start[, end]])</span><br></pre></td></tr></table></figure></li><li><p>参数<br>  <strong>target</strong><br>  0 为基底的索引，复制序列到该位置。如果是负数，target 将从末尾开始计算。<br>  如果 target 大于等于 arr.length，将会不发生拷贝。如果 target 在 start 之后，复制的序列将被修改以符合 arr.length。<br>  <strong>start</strong><br>  0 为基底的索引，开始复制元素的起始位置。如果是负数，start 将从末尾开始计算。<br>  如果 start 被忽略，copyWithin 将会从0开始复制。<br>  <strong>end</strong><br>  0 为基底的索引，开始复制元素的结束位置。copyWithin 将会拷贝到该位置，但不包括 end 这个位置的元素。如果是负数， end 将从末尾开始计算。<br>  如果 end 被忽略，copyWithin 方法将会一直复制至数组结尾（默认为 arr.length）。</p></li><li><p>返回值<br>改变后的数组。</p></li><li><p>示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">numbers.copyWithin(<span class="number">-2</span>);</span><br><span class="line"><span class="comment">// [1, 2, 3, 1, 2]</span></span><br><span class="line"></span><br><span class="line">numbers.copyWithin(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// [4, 5, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line">numbers.copyWithin(<span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="comment">// [4, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line">numbers.copyWithin(<span class="number">-2</span>, <span class="number">-3</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="comment">// [1, 2, 3, 3, 4]</span></span><br><span class="line"></span><br><span class="line">[].copyWithin.call(&#123;<span class="attr">length</span>: <span class="number">5</span>, <span class="number">3</span>: <span class="number">1</span>&#125;, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// &#123;0: 1, 3: 1, length: 5&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Array-fill"><a href="#Array-fill" class="headerlink" title="Array.fill()"></a>Array.fill()</h2><p><code>fill()</code> 方法用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。不包括终止索引。</p><ul><li><p>语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.fill(value[, start[, end]])</span><br></pre></td></tr></table></figure></li><li><p>参数<br>   <strong>value</strong>  用来填充数组元素的值。<br>   <strong>start</strong> 可选， 起始索引，默认值为0。<br>   <strong>end</strong> 可选，终止索引，默认值为 this.length。</p></li><li><p>返回值<br>修改后的数组</p></li><li>示例</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>);               <span class="comment">// [4, 4, 4]</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>, <span class="number">1</span>);            <span class="comment">// [1, 4, 4]</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>);         <span class="comment">// [1, 4, 3]</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>);         <span class="comment">// [1, 2, 3]</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>, <span class="number">3</span>, <span class="number">3</span>);         <span class="comment">// [1, 2, 3]</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>, <span class="number">-3</span>, <span class="number">-2</span>);       <span class="comment">// [4, 2, 3]</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>, <span class="literal">NaN</span>, <span class="literal">NaN</span>);     <span class="comment">// [1, 2, 3]</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>);         <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">3</span>).fill(<span class="number">4</span>);                <span class="comment">// [4, 4, 4]</span></span><br><span class="line">[].fill.call(&#123; <span class="attr">length</span>: <span class="number">3</span> &#125;, <span class="number">4</span>);  <span class="comment">// &#123;0: 4, 1: 4, 2: 4, length: 3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Objects by reference.</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="built_in">Array</span>(<span class="number">3</span>).fill(&#123;&#125;) <span class="comment">// [&#123;&#125;, &#123;&#125;, &#123;&#125;];</span></span><br><span class="line"><span class="comment">// 需要注意如果fill的参数为引用类型，会导致都执行同一个引用类型</span></span><br><span class="line"><span class="comment">// 如 arr[0] === arr[1] 为true</span></span><br><span class="line">arr[<span class="number">0</span>].hi = <span class="string">"hi"</span>; <span class="comment">// [&#123; hi: "hi" &#125;, &#123; hi: "hi" &#125;, &#123; hi: "hi" &#125;]</span></span><br></pre></td></tr></table></figure><h2 id="Array-reduce"><a href="#Array-reduce" class="headerlink" title="Array.reduce()"></a>Array.reduce()</h2><p><code>reduce()</code>方法对数组中的每个元素执行一个由您提供的reducer函数(升序执行)，将其结果汇总为单个返回值。可以简单的理解为累加</p><ul><li>语法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.reduce(callback(accumulator, currentValue[, index[, array]])[,       initialValue])</span><br></pre></td></tr></table></figure><ul><li><p>参数</p><ul><li><strong>callback</strong> 执行数组中每个值 (如果没有提供 initialValue则第一个值除外)的函数，包含四个参数：<pre><code>**accumulator** 累计器累计回调的返回值; 它是上一次调用回调时返回的累积值，或initialValue（见于下方）。**currentValue** 数组中正在处理的元素。**index** 可选，数组中正在处理的当前元素的索引。 如果提供了initialValue，则起始索引号为0，否则从索引1起始。**array** 可选 调用reduce()的数组</code></pre><ul><li><strong>initialValue</strong>  可选，作为第一次调用 callback函数时的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的<strong>空数组</strong>上调用 reduce 将报错。 </li></ul></li></ul></li><li><p>返回值<br>函数累计处理的结果</p></li><li><p>描述<br>回调函数第一次执行时，accumulator 和currentValue的取值有两种情况：如果调用reduce()时提供了initialValue，accumulator取值为initialValue，currentValue取数组中的第一个值；如果没有提供 initialValue，那么accumulator取数组中的第一个值，currentValue取数组中的第二个值。</p><blockquote><p><strong>注意</strong>：如果没有提供<code>initialValue</code>，reduce 会从索引1的地方开始执行 callback 方法，跳过第一个索引。如果提供<code>initialValue</code>，从索引0开始。</p></blockquote></li><li><p>示例</p><ul><li>累加</li><li>二维数组转化一维数组</li><li>计算数组中每个元素出现的次数</li><li>数组去重<blockquote><p>注意： 如果你正在使用一个可以兼容<code>Set</code> 和 <code>Array.from()</code>的环境， 你可以使用<code>let orderedArray = Array.from(new Set(myArray));</code>来获得一个相同元素被移除的数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].reduce(<span class="function"><span class="keyword">function</span> (<span class="params">accumulator, currentValue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> accumulator + currentValue;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 和为 6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> flattened = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduce(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.concat(b);</span><br><span class="line">  &#125;,</span><br><span class="line">  []</span><br><span class="line">);</span><br><span class="line"><span class="comment">// flattened is [0, 1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> names = [<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'Tiff'</span>, <span class="string">'Bruce'</span>, <span class="string">'Alice'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> countedNames = names.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">allNames, name</span>) </span>&#123; </span><br><span class="line">  <span class="keyword">if</span> (name <span class="keyword">in</span> allNames) &#123;</span><br><span class="line">    allNames[name]++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    allNames[name] = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> allNames;</span><br><span class="line">&#125;, &#123;&#125;);</span><br><span class="line"><span class="comment">// countedNames is:</span></span><br><span class="line"><span class="comment">// &#123; 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myArray = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'e'</span>, <span class="string">'e'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'d'</span>, <span class="string">'d'</span>, <span class="string">'d'</span>];</span><br><span class="line"><span class="keyword">var</span> myOrderedArray = myArray.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">accumulator, currentValue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (accumulator.indexOf(currentValue) === <span class="number">-1</span>) &#123;</span><br><span class="line">    accumulator.push(currentValue);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> accumulator</span><br><span class="line">&#125;, [])</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myOrderedArray);</span><br></pre></td></tr></table></figure></blockquote></li></ul></li></ul><h2 id="Array-push-pop-shift-unshift"><a href="#Array-push-pop-shift-unshift" class="headerlink" title="Array.push()/ .pop()/ .shift()/ .unshift()"></a>Array.push()/ .pop()/ .shift()/ .unshift()</h2><table><thead><tr><th>方法</th><th>说明</th><th>返回值</th></tr></thead><tbody><tr><td>push</td><td>向数组的末尾添加一个或多个元素</td><td>新的 length 属性值</td></tr><tr><td>pop</td><td>数组中删除最后一个元素</td><td>该元素的值(当数组为空时返回undefined)</td></tr><tr><td>shift</td><td>从数组中删除第一个元素</td><td>该元素的值(当数组为空时返回undefined)</td></tr><tr><td>unshift</td><td>将一个或多个元素添加到数组的开头</td><td>新的 length 属性值</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 数组方法总结&amp;amp;es6新增API&lt;/p&gt;
    
    </summary>
    
      <category term="js" scheme="https://liuchao0704.github.io/categories/js/"/>
    
    
      <category term="array" scheme="https://liuchao0704.github.io/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>个人简历 | 持续更新</title>
    <link href="https://liuchao0704.github.io/2019/10/01/resume/"/>
    <id>https://liuchao0704.github.io/2019/10/01/resume/</id>
    <published>2019-10-01T13:45:43.000Z</published>
    <updated>2020-02-19T03:50:45.584Z</updated>
    
    <content type="html"><![CDATA[<p>个人简历</p><a id="more"></a> <h2 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h2><table><thead><tr><th>姓名</th><th>刘超</th><th>联系方式</th><th>18552057721</th></tr></thead><tbody><tr><td>邮箱</td><td><a href="mailto:liuc0704@outlook.com" target="_blank" rel="noopener">liuc0704@outlook.com</a></td><td>应聘职位</td><td>前端工程师/JS工程师</td></tr><tr><td>性别</td><td>女</td><td>出生年月</td><td>1991-07</td></tr><tr><td>户籍</td><td>无锡</td><td>婚姻状况</td><td>未婚</td></tr><tr><td>学历</td><td>本科</td><td>毕业院校</td><td>南京信息工程大学</td></tr><tr><td>专业</td><td>电子信息技术</td><td>到岗时间</td><td>1个月</td></tr></tbody></table><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><ul><li>精通HTML/CSS</li><li>精通JavaScript</li><li>精通 AngularJS </li><li>熟悉WEB应用开发技术，熟悉JavaScript技术平台，丰富的B/S框架项目开发经验</li><li>良好的英语技能</li><li>对研发及团队管理十分感兴趣。工作态度认真仔细，做事严谨，自信心强并且自我要求严格，为人开朗热情，具有团队意识，具有很好的沟通能力</li></ul><h4 id="参与过的Web项目"><a href="#参与过的Web项目" class="headerlink" title="参与过的Web项目"></a>参与过的Web项目</h4><table><thead><tr><th>项目</th><th>角色</th></tr></thead><tbody><tr><td>乐伏光伏大数据智慧管理平台</td><td>前端工程师</td></tr><tr><td>中国航天可再生能源管理平台</td><td>前端工程师，项目负责人</td></tr><tr><td>江西省光伏扶贫大数据平台</td><td>前端工程师</td></tr><tr><td>光伏运维管理平台</td><td>前端工程师</td></tr></tbody></table><ul><li>后端 JAVA+Tomcat+mybatis+spring+mysql</li><li>前端 AngularJS</li><li>乐伏光伏大数据智慧管理平台</li><li>负责：前端页面CSS/DIV编写，JS编写，整体负责前端框架。<br>采用前后端完全分离的架构。前端采用AngularJS框架，通过AJAX请求与后端交互；同时引入百度地图插件和highcharts图表插件来丰富网站内容。</li></ul><h4 id="参与过的App项目"><a href="#参与过的App项目" class="headerlink" title="参与过的App项目"></a>参与过的App项目</h4><table><thead><tr><th>项目</th><th>角色</th></tr></thead><tbody><tr><td>乐伏管家APP</td><td>前端工程师</td></tr><tr><td>乐伏监控APP</td><td>前端工程师</td></tr><tr><td>乐伏运维APP</td><td>前端工程师</td></tr></tbody></table><ul><li>前端 AngularJS</li><li>乐伏管家App</li><li>负责：前端页面CSS/DIV编写，JS编写，整体负责前端框架。<br>采用前后端完全分离的架构。前端采用AngularJS框架，通过AJAX请求与后端交互；同时引入betterscroll插件, 它可以优化WebApp的滚动体验，使webApp中超长页更接近原生App的滚动效果。  </li></ul><h2 id="工作经验"><a href="#工作经验" class="headerlink" title="工作经验"></a>工作经验</h2><ul><li>公司：江苏乐伏能源科技有限公司</li><li>时间：2016/11 – 至今</li><li>职位：前端工程师</li><li>汇报对象：部门经理</li></ul><p>2016至今我在无锡乐伏能源有限公司从事前端开发。乐伏能源是一家光伏监控与运维解决方案的提供商。我有幸在公司创业之初就加入。经历了从无到有，初代产品研发以及后期功能的升级和迭代。主要为公司开发PC端网页系统以及移动端webApp。</p><h2 id="项目经验"><a href="#项目经验" class="headerlink" title="项目经验"></a>项目经验</h2><h4 id="乐伏智能光伏管理云中心3-0"><a href="#乐伏智能光伏管理云中心3-0" class="headerlink" title="乐伏智能光伏管理云中心3.0"></a>乐伏智能光伏管理云中心3.0</h4><ul><li>无锡乐伏智慧光伏监控平台是一款为安装商/厂家用户量身制定的大屏软件。该产品方便用户查看电站运行情况、电站收益、设备运行状况、电站运维记录等信息。</li><li>本人在该项目中担任前端开发。HTML + CSS 制作高保真静态页面。使用AngualrJS + ajax 调用后台API接口获取数据并绑定到页面。</li></ul><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/resume/smartenergy1.jpg" alt=""></p><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/resume/smartenergy2.jpg" alt=""></p><h4 id="中国航天智慧能源管理平台-（Aerospace-smart-energy-management-system-）"><a href="#中国航天智慧能源管理平台-（Aerospace-smart-energy-management-system-）" class="headerlink" title="中国航天智慧能源管理平台 （Aerospace smart energy  management system ）"></a>中国航天智慧能源管理平台 （Aerospace smart energy  management system ）</h4><ul><li>中国航天智慧能源管理平台是为上海航天定制开发的大屏监控系统（适合2560x1440以上分辨率）于2018年8月上线。  </li><li>本人负责该项目的前期沟通/需求整理/界面风格确认工作 分析客户基本需求：资产管理 、能量管理。结合公司现有系统功能提炼并改造 为中国航天开发了去菜单化一键查看数据流程。满足了非专业人士也能便捷操作能源站系统的需求。</li><li>本人在该项目中担任前端开发，HTML + CSS 制作高保真静态页面。使用AngualrJS + ajax 调用后台API接口获取数据并绑定到页面。</li></ul><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/resume/aerospace1.jpg" alt=""></p><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/resume/aerospace2.jpg" alt=""></p><h4 id="乐伏管家App"><a href="#乐伏管家App" class="headerlink" title="乐伏管家App"></a>乐伏管家App</h4><ul><li>乐伏管家App可以同时满足个人业主和大型安装商对电站运营情况的查询和运维需求。2018年3月上线。</li><li>本人负责该项目产品需求整理和前端开发工作。采用AngularJs + betterscroll。betterscroll是一款优秀的滚动插件，它可以优化WebApp的滚动体验，使webApp中超长页更接近原生App的滚动效果。   </li><li>视觉层面：根据电站的天气情况个性化设置页面，新增晴天/阴天/多云/雨/雪/夜间模式并动态更新页面，带来不一样的视觉体验  </li><li>数据存储：利用AngularJs  的<code>$rootscope</code>作为简易版本的根数据管理，在<code>$rootscope</code>创建根对象用于存储多次复用并且实时更新的数据。</li></ul><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/resume/app3.jpg" alt=""></p><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/resume/app2.jpg" alt=""></p><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/resume/app4.jpg" alt=""></p><h4 id="乐伏运维App"><a href="#乐伏运维App" class="headerlink" title="乐伏运维App"></a>乐伏运维App</h4><ul><li>乐伏运维App可以满足终端业主及运维人员对于电站运维的需求。2017年9月上线。</li><li>本人负责该项目的前端开发工作。 AngularJs + ajax与后台交互数据</li><li>版本合一 android 和 ios  共用一个前端版本，减少维护成本。</li><li>路由切换更加自然 更接近原生app</li></ul><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/resume/operationapp.jpg" alt=""></p><h4 id="乐伏运维系统网页版"><a href="#乐伏运维系统网页版" class="headerlink" title="乐伏运维系统网页版"></a>乐伏运维系统网页版</h4><ul><li>乐伏电站运维系统网页版是一款为终端业主/运维人员/电站集成商打造的电站运维系统 。于2017年8月上线。  </li><li>本人负责该项目的前端开发工作。乐伏运维系统采用AngualrJs框架将三种不同的电站管理角色紧密联系到一起，便于及时排除和解决电站的故障问题。</li><li>不同用户角色不同权限的页面展示</li><li>集成简易的物料管理系统，运单不同状态下的可操作流程、功能</li></ul><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/resume/P%25LH@1EVQR_NTPA$@14DO$H.jpg" alt=""></p><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/resume/3W14R%7D081LVN_41G8~KVI5Y.jpg" alt=""></p><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/resume/534@%60V8556CBTWM%7DQHN%601NT.jpg" alt=""></p><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/resume/H$%60WG%5BOD4WTN$7G%7B78%29P~1I.jpg" alt=""></p><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/resume/W%29CZLRG%5B%5B%7BW%7B$26JVN15833.jpg" alt=""></p><h4 id="乐伏电站设计系统网页版"><a href="#乐伏电站设计系统网页版" class="headerlink" title="乐伏电站设计系统网页版"></a>乐伏电站设计系统网页版</h4><ul><li>乐伏电站设计系统是一款实用的电站设计系统。于2017年3月份上线。</li><li>本人负责该项目的前端开发工作。乐伏电站设计系统采用AngualrJs框架。该软件方便用户进行电站预估计算及设备选型。用户无需要专业的电站知识即可进行一键式计算收益和组件、设备匹配，使电站获得最佳收益。</li><li>高德地图支持用户快速自定义电站位置 ,获取该地理位置的辐照量和最佳倾斜角</li></ul><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/resume/%5B5C5%29H%7BD$%5BP@XXQ%29%28SFJ%5D%7B6.jpg" alt=""></p><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/resume/NB8%60O5%5BF4K1_S%5DL%7DXHKR20A.jpg" alt=""></p><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/resume/I7%25D~7@KS3U89~C54UDYXH4.jpg" alt=""></p><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/resume/BH~%25J%5B7DH%5B%7DDXE%28@K$G4%7D8S.jpg" alt=""></p><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/resume/Y%25B9@QO_$7V$9N%28P%7DBLF6ZB.jpg" alt=""></p><h4 id="乐伏电站监控系统网页版"><a href="#乐伏电站监控系统网页版" class="headerlink" title="乐伏电站监控系统网页版"></a>乐伏电站监控系统网页版</h4><ul><li>乐伏监控系统网页版是一款功能丰富的电站监控系统，于2017年1月上线 。</li><li>本人负责该项目的前端开发工作。项目中使用AngularJs + bootstrap 框架。</li><li>AngularJs 负责数据双向绑定，ng-router路由开发SPA，使页面之间的切换效果更为流畅。使用图表类插件highcharts进行数据可视化，更加清晰的展示电站及设备的各个时间段发电量/功率/告警记录。</li><li>bootstrap 栅格系统快速搭建后台管理系统页面</li></ul><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/resume/D%28~U1%5B%7BHJJJZX~%7B%607EIDIK8.jpg" alt=""></p><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/resume/3K3%29%60%60M%7D%7BUF3VE%29N%7BEG%60_C2.jpg" alt=""></p><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/resume/%5B@K%29FUG52%25PND0VL%28%5B@6Z11.jpg" alt=""></p><h2 id="教育经历"><a href="#教育经历" class="headerlink" title="教育经历"></a>教育经历</h2><ul><li>2009/09-2013/07            南京信息工程大学   电子信息技术   本科 </li></ul><h2 id="薪资"><a href="#薪资" class="headerlink" title="薪资"></a>薪资</h2><ul><li>目前薪资  12000 * 12 （税前）</li></ul><h2 id="语言能力"><a href="#语言能力" class="headerlink" title="语言能力"></a>语言能力</h2><table><thead><tr><th></th><th>口语</th><th>书面</th></tr></thead><tbody><tr><td>英语</td><td>一般</td><td>一般</td></tr><tr><td>中文</td><td>熟练</td><td>熟练</td></tr></tbody></table><h2 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h2><table><thead><tr><th>类别</th><th>时间</th><th>名称</th></tr></thead><tbody><tr><td>英语</td><td>2010-06</td><td>CET-6</td></tr><tr><td>计算机</td><td>2011-03</td><td>计算机二级</td></tr><tr><td>计算机</td><td>2012-09</td><td>计算机四级</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;个人简历&lt;/p&gt;
    
    </summary>
    
      <category term="个人" scheme="https://liuchao0704.github.io/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    
      <category term="简历" scheme="https://liuchao0704.github.io/tags/%E7%AE%80%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>前端面试总结</title>
    <link href="https://liuchao0704.github.io/2019/08/02/test/"/>
    <id>https://liuchao0704.github.io/2019/08/02/test/</id>
    <published>2019-08-02T13:45:43.000Z</published>
    <updated>2020-02-19T03:18:58.725Z</updated>
    
    <content type="html"><![CDATA[<p>持续更新自我学习<br><a id="more"></a></p><h2 id="Html5-CSS3-新特性"><a href="#Html5-CSS3-新特性" class="headerlink" title="Html5,CSS3 新特性"></a>Html5,CSS3 新特性</h2><p>html5 增加了一些新元素更符合语意化<code>&lt;header&gt;&lt;/header&gt;</code>,<code>&lt;nav&gt;&lt;/nav&gt;</code>,<code>&lt;footer&gt;&lt;/footer&gt;</code>,<code>&lt;video &gt;&lt;/video&gt;</code><br>html5 canvas ，拖拽，应用缓存<br>css3 选择器，动画，渐变，过渡，border，盒模型，flex布局。</p><h2 id="父级中的子元素上下左右局中"><a href="#父级中的子元素上下左右局中" class="headerlink" title="父级中的子元素上下左右局中"></a>父级中的子元素上下左右局中</h2><ul><li>flex 布局</li><li>position:absoulte</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*flex 布局*/</span></span><br><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex; </span><br><span class="line">    align-items: center; // 垂直 交叉轴</span><br><span class="line">    justify-content: center; // 水平 主轴方向</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="MVC-和-MVVM"><a href="#MVC-和-MVVM" class="headerlink" title="MVC 和 MVVM"></a>MVC 和 MVVM</h2><ul><li>MVC<ul><li>M — Model 数据模型、数据源</li><li>V  — View  视图层、界面</li><li>C  — Controller 控制层、逻辑处理</li><li>用户操作view，view将改变传入controller，controller修改model，model将修改同步到view</li></ul></li></ul><ul><li>MMVM<ul><li>M — Model 数据模型、数据源</li><li>V  — View  视图层、界面</li><li>VM —  View-Model 是View和Model的桥接</li><li>举例Vue中，view通过事件绑定(DOM Listeners)操作model，model通过数据绑定(Data Bingdings)操作view</li></ul></li></ul><h2 id="Jquery和VUE"><a href="#Jquery和VUE" class="headerlink" title="Jquery和VUE"></a>Jquery和VUE</h2><ul><li>数据和视图的分离，解耦(开放封闭原则)</li><li>数据驱动视图，只需关心数据变化，DOM操作被封</li></ul><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><ul><li>为什么使用模块化，不使用模块化会怎么样<ul><li>代码中的函数必须是全局变量才能使用给使用方带来全局变量的污染</li><li>js文件中的互相引用关系混乱</li><li>使用模块化不会暴露全局变量，自动引用依赖</li></ul></li><li>AMD （Asynchronous Module Definition，即异步模块加载机制）<ul><li>AMD 典型代表 require.js</li><li>全局define 函数</li><li>全局require 函数</li><li>依赖JS会自动、异步加载</li></ul></li><li>CommonJS<ul><li>nodejs模块化规范，前端大量使用</li><li>前端开发依赖的插件和库，都可以从npm中获取</li><li>构建工具的高度自动化</li><li>CommonJS 不会异步加载JS，而是同步一次性加载出来。</li></ul></li><li>ES6 模块化</li></ul><h2 id="JS中的强制转化和隐式转化"><a href="#JS中的强制转化和隐式转化" class="headerlink" title="JS中的强制转化和隐式转化"></a>JS中的强制转化和隐式转化</h2><ul><li><strong>强制转化</strong> String（），Number（），Boolean（）</li><li><strong>隐式转化</strong>   ，== 加减运算 关系操作符 逻辑操作符</li></ul><h2 id="Vue-取消事件冒泡"><a href="#Vue-取消事件冒泡" class="headerlink" title="Vue 取消事件冒泡"></a>Vue 取消事件冒泡</h2><ul><li>vue取消事件冒泡<br><code></code><div @click.stop="doSomething($event)">vue取消事件冒泡</div></li><li>vue阻止默认事件<br><code>&lt;div @click.prevent=&quot;doSomething($event)&quot;&gt;vue阻止默认事件&lt;/div&gt;</code></li><li>js 防止冒泡和捕获<br>w3c的方法是e.stopPropagation()，IE则是使用e.cancelBubble = true</li><li>取消默认事件<br>w3c的方法是e.preventDefault()，IE则是使用e.returnValue = false;</li></ul><h2 id="angularJS-双向数据绑定的实现"><a href="#angularJS-双向数据绑定的实现" class="headerlink" title="angularJS 双向数据绑定的实现"></a>angularJS 双向数据绑定的实现</h2><p>AngularJs 为 scope 模型上设置了一个 监听队列，用来监听数据变化并更新 view 。每次绑定一个东西到 view(html) 上时 AngularJs 就会往 $watch 队列里插入一条 $watch，用来检测它监视的 model 里是否有变化的东西。当浏览器接收到可以被 angular context 处理的事件时，$digest 循环就会触发。$digest 会遍历所有的 $watch。从而更新DOM。</p><h2 id="HTML5中的datalist是什么"><a href="#HTML5中的datalist是什么" class="headerlink" title="HTML5中的datalist是什么"></a>HTML5中的datalist是什么</h2><p>datalist 是HTML5 的新的表单元素 datalist要结合input元素才行，给input提供可用数据源不需要手动输入，加快输入，而且datalist还可以达到模糊匹配的效果。  </p><h2 id="本地存储和cookie之间的区别是什么"><a href="#本地存储和cookie之间的区别是什么" class="headerlink" title="本地存储和cookie之间的区别是什么"></a>本地存储和cookie之间的区别是什么</h2><p><a href="https://segmentfault.com/a/1190000015929184" target="_blank" rel="noopener">https://segmentfault.com/a/1190000015929184</a></p><h4 id="数据有效期不同："><a href="#数据有效期不同：" class="headerlink" title="数据有效期不同："></a>数据有效期不同：</h4><ul><li><p>默认情况下cookie只在浏览器会话期存在.退出浏览器就丢失;可以用expires设置时间;退出浏览器后就不会丢失并存为客户端浏览器的cookie文件;过了时间后cookie失效,还会自动删除cookie文件.</p></li><li><p>sessionStorage生命周期为当前窗口或标签页，一旦窗口或标签页被永久关闭了，那么所有通过sessionStorage存储的数据也就被清空了</p></li><li><p>localStorage 始终有效，长期保存。</p></li></ul><h4 id="存储大小"><a href="#存储大小" class="headerlink" title="存储大小"></a>存储大小</h4><ul><li>cookie历史悠久,浏览器支持率高。数据不能超过4k。</li><li>sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。</li></ul><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><ul><li><p>相同浏览器的不同页面间可以共享相同的 localStorage(页面属于相同域名和端口，同源策略)，但是不同页面或标签页间无法共享sessionStorage的信息</p></li><li><p>cookie也是在所有同源窗口中都是共享的</p></li><li><p>cookie的path属性:默认情况下,在同一个目录下文件可以调用; 例如:<a href="http://demo.com/c1/1.html" target="_blank" rel="noopener">http://demo.com/c1/1.html</a> 设置的cookie可以被<a href="http://demo.com/c1/2.html调用.但不能被http://demo.com/c2/" target="_blank" rel="noopener">http://demo.com/c1/2.html调用.但不能被http://demo.com/c2/</a> 目录下的文件调用; 但如把path属性设成”/“;则在<a href="http://demo.com/" target="_blank" rel="noopener">http://demo.com/</a> 下的所有文件都可调用此cookie.</p></li><li><p>cookie的domain属性:例如设成”.demo.com”则在.demo.com(“<a href="http://a.demo.com&quot;" target="_blank" rel="noopener">http://a.demo.com&quot;</a> 和 “<a href="http://b.demo.com&quot;)下的所有服务器下的文件都可以调用cookie" target="_blank" rel="noopener">http://b.demo.com&quot;)下的所有服务器下的文件都可以调用cookie</a>.</p></li></ul><p>WebStorage 支持事件通知机制，可以将数据更新的通知发送给监听者。Web Storage 的 api 接口使用更方便。</p><h2 id="link-和-import的区别是"><a href="#link-和-import的区别是" class="headerlink" title="link 和 @import的区别是"></a>link 和 @import的区别是</h2><p>1.从属关系区别<br>@import是 css 提供的语法规则，只有导入样式表的作用；link是HTML提供的标签，不仅可以加载 css 文件，还可以定义 RSS、rel 连接属性等。</p><p>2.加载顺序区别<br>加载页面时，link标签引入的 css 被同时加载；@import引入的 css 将在页面加载完毕后被加载。</p><p>3.兼容性区别<br>@import是 CSS2.1 才有的语法，故只可在 IE5+ 才能识别；link标签作为 HTML 元素，不存在兼容性问题。</p><h2 id="CSS选择器有哪些，哪些属性可以继承，优先级如何"><a href="#CSS选择器有哪些，哪些属性可以继承，优先级如何" class="headerlink" title="CSS选择器有哪些，哪些属性可以继承，优先级如何"></a>CSS选择器有哪些，哪些属性可以继承，优先级如何</h2><h3 id="优先级-0-1-0-0"><a href="#优先级-0-1-0-0" class="headerlink" title="优先级 0,1,0,0"></a>优先级 0,1,0,0</h3><ul><li>id选择器 </li></ul><h3 id="优先级-0-0-1-0"><a href="#优先级-0-0-1-0" class="headerlink" title="优先级 0,0,1,0"></a>优先级 0,0,1,0</h3><ul><li>类选择器</li><li>属性选择器</li><li>伪类选择器 <code>:link</code></li></ul><h3 id="优先级-0-0-0-1"><a href="#优先级-0-0-0-1" class="headerlink" title="优先级 0,0,0,1"></a>优先级 0,0,0,1</h3><ul><li>元素选择器</li><li>伪元素选择器</li><li>后代选择器</li><li>子元素选择器</li><li>相邻兄弟选择器</li></ul><h3 id="优先级-0-0-0-0"><a href="#优先级-0-0-0-0" class="headerlink" title="优先级 0,0,0,0"></a>优先级 0,0,0,0</h3><ul><li>通配选择器*对特殊性没有贡献，即0,0,0,0。</li></ul><h3 id="可以继承的属性"><a href="#可以继承的属性" class="headerlink" title="可以继承的属性"></a>可以继承的属性</h3><ul><li>color,line-height,font-size</li></ul><h3 id="补充-优先级-1-0-0-0"><a href="#补充-优先级-1-0-0-0" class="headerlink" title="补充 优先级 1,0,0,0"></a>补充 优先级 1,0,0,0</h3><p> 行间样式的特殊性是1,0,0,0<br> 最后比较特殊的一个标志!important(权重)，它没有特殊性值，但它的优先级是最高的，为了方  便记忆，可以认为它的特殊性值为1,0,0,0,0。</p><h2 id="html5中的应用缓存是什么"><a href="#html5中的应用缓存是什么" class="headerlink" title="html5中的应用缓存是什么"></a>html5中的应用缓存是什么</h2><p>应用程序缓存是专门从浏览器的缓存中分出一块缓存区用于缓存数据，从而在离线状态下也能读取和使用该数据，这就是应用缓存，或者说叫appcache</p><h2 id="用Javascript创建一个对象"><a href="#用Javascript创建一个对象" class="headerlink" title="用Javascript创建一个对象"></a>用Javascript创建一个对象</h2><h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><p>类似于普通函数调用 内部显式的创建对象 并且return 。<br>工厂模式解决了创建多个相似对象的问题，但是没有解决对象识别的问题。</p><h4 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h4><ul><li>没有显示的创建对象 </li><li>直接属性和方法赋给了this对象</li><li>函数名大写</li><li>调用函数的时候用new</li></ul><h4 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 工厂模式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObj</span></span>(name,age) &#123;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="type">Object</span>();</span><br><span class="line">    o.name = name;</span><br><span class="line">    o.age = age;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1 = createObj(<span class="string">'l'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> obj2 = createObj(<span class="string">'c'</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreateObj</span></span>(name,age) &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">   <span class="comment">// return this; // 默认return this</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj3 = <span class="keyword">new</span> <span class="type">CreateObj</span>(<span class="string">'L'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> obj4 = <span class="keyword">new</span> <span class="type">CreateObj</span>(<span class="string">'C'</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型模式</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PrototypeCreateObj</span></span>() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PrototypeCreateObj.prototype.name = <span class="string">'demo'</span>;</span><br><span class="line">PrototypeCreateObj.prototype.age =  <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj5 = <span class="keyword">new</span> <span class="type">PrototypeCreateObj</span>();</span><br><span class="line"><span class="keyword">var</span> obj6 = <span class="keyword">new</span> <span class="type">PrototypeCreateObj</span>();</span><br></pre></td></tr></table></figure><h2 id="事件循环机制"><a href="#事件循环机制" class="headerlink" title="事件循环机制"></a>事件循环机制</h2><p><a href="https://blog.csdn.net/woleigequshawanyier/article/details/86371850" target="_blank" rel="noopener">https://blog.csdn.net/woleigequshawanyier/article/details/86371850</a></p><h2 id="find-fileter-map-forEach-和-for-循环的区别"><a href="#find-fileter-map-forEach-和-for-循环的区别" class="headerlink" title="find(),fileter(),map(),forEach 和 for 循环的区别"></a>find(),fileter(),map(),forEach 和 for 循环的区别</h2><p><a href="https://blog.csdn.net/csdn_yudong/article/details/80456224" target="_blank" rel="noopener">JavaScript 中 forEach、map、filter 终极篇</a></p><p>find()方法主要用来返回数组中符合条件的第一个元素(如果没有则返回<strong>undefined</strong>)  </p><p>filter()方法主要用来筛选数组中符合条件的所有元素，并且放在一个新数组中，如果没有，返回一个空数组  </p><p>forEach()方法也是用于对数组中的每一个元素执行一次回调函数，但它<strong>没有返回值</strong>(或者说它的返回值为undefined，即便我们在回调函数中写了return语句，返回值依然为undefined。forEach不可以使用break，continue和return语句<br>forEach 遍历的范围在第一次调用 callback 前就会确定。调用 forEach 后添加到数组中的项不会被 callback 访问到。如果已经存在的值被改变，则传递给 callback 的值是 forEach 遍历到他们那一刻的值。已删除的项不会被遍历到。如果已访问的元素在迭代时被删除了(例如使用 shift()) ，之后的元素将被跳过。<br>for循环可以使用break、continue和return语句</p><p>map()方法主要用来对数组中的每一个元素执行一次回调函数，并且把处理结果<strong>映射</strong>到一个新数组中返回(如果没有返回值，新数组中的每一个元素都为undefined)<br>使用 map 方法处理数组时，数组元素的范围是在 callback 方法第一次调用之前就已经确定了。在 map 方法执行的过程中：原数组中新增加的元素将不会被 callback 访问到；若已经存在的元素被改变或删除了，则它们的传递到 callback 的值是 map 方法遍历到它们的那一时刻的值；而被删除的元素将不会被访问到。<strong>和 forEach 一样</strong></p><h2 id="从输入url到页面渲染发生了几步？"><a href="#从输入url到页面渲染发生了几步？" class="headerlink" title="从输入url到页面渲染发生了几步？"></a>从输入url到页面渲染发生了几步？</h2><ul><li>加载资源的形式<ol><li>输入url(跳转一个路由) 加载html</li><li>加载html中依赖的静态资源</li></ol></li><li>加载一个资源的过程<ol><li>浏览器根据DNS服务器得到域名的IP地址</li><li>向这个IP的服务器发送http/https请求</li><li>服务器收到、处理并返回http请求</li><li>浏览器得到返回内容</li></ol></li><li>浏览器渲染页面的过程<ol><li>根据HTML结构生成DOM Tree</li><li>根据CSS 生成 CSSOM</li><li>将DOM和CSSOM 整合形成RenderTree</li><li>根据RenderTree 开始渲染和展示</li><li>遇到<code>&lt;script&gt;</code>时，会执行并阻塞渲染</li></ol></li></ul><h2 id="window-onload-和-DomContentLoaded"><a href="#window-onload-和-DomContentLoaded" class="headerlink" title="window.onload 和 DomContentLoaded"></a>window.onload 和 DomContentLoaded</h2><ul><li>onLoad是的在页面所有文件加载完成后执行</li><li>DomContentLoad是Dom加载完成后执行，不必等待样式脚本和图片加载</li></ul><h2 id="浏览器的回流和重绘"><a href="#浏览器的回流和重绘" class="headerlink" title="浏览器的回流和重绘"></a>浏览器的回流和重绘</h2><p><a href="http://www.imooc.com/article/45936" target="_blank" rel="noopener"></a></p><ul><li>重排也叫回流<br>重排一定会引起重绘</li><li>重绘<br>重绘不一定引起重排</li></ul><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><ul><li>加载页面和静态资源<ol><li>静态资源的压缩合并(webpack构建工具合并)</li><li>静态资源缓存</li><li>使用CDN让资源加载更快(CDN简单来说不同区域的优化)</li><li>使用SSR后端渲染(服务端渲染)，数据直接输出到HTML中</li></ol></li><li>页面渲染<ol><li>CSS放前面，JS放底部</li><li>懒加载(分批加载内容)</li><li>减少DOM查询，对DOM查询做缓存</li><li>减少DOM操作，多个操作进来合并在一起</li><li><a href="https://segmentfault.com/a/1190000018428170?utm_source=tag-newest" target="_blank" rel="noopener">事件节流/防抖</a></li></ol></li></ul><h2 id="什么是跨域问题，如何解决？"><a href="#什么是跨域问题，如何解决？" class="headerlink" title="什么是跨域问题，如何解决？"></a>什么是跨域问题，如何解决？</h2><ul><li>浏览器同源策略 (协议、端口、域名)同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的<strong>重要安全机制</strong>。</li><li>如何解决？<ul><li><strong>script标签</strong> ，<strong>link标签</strong> ，<strong>img标签</strong>都可以跨域</li><li><code>&lt;img&gt;</code>用于打点统计，统计网站可能是其他网站</li><li><code>&lt;img&gt;</code>,<code>&lt;link&gt;</code>可以使用CDN，CDN是其他域</li><li>JSONP原理 利用script标签可以跨域。</li><li>服务器端设置 http header</li><li>反向代理。</li></ul></li></ul><h2 id="安全性能"><a href="#安全性能" class="headerlink" title="安全性能"></a>安全性能</h2><ul><li>XSS 跨站脚本攻击 用户输入内容里面包含代码<code>&lt;script&gt;</code> 执行，前端/后端替换转译字符</li><li>CSRF/XSRF  跨站请求伪造 增加验证流程</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;持续更新自我学习&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://liuchao0704.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="面试" scheme="https://liuchao0704.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>黄帝内经-素问-上古天真论-01</title>
    <link href="https://liuchao0704.github.io/2019/04/05/hdnj-sw01/"/>
    <id>https://liuchao0704.github.io/2019/04/05/hdnj-sw01/</id>
    <published>2019-04-05T05:35:59.000Z</published>
    <updated>2020-02-19T06:48:59.578Z</updated>
    
    <content type="html"><![CDATA[<p> 关于黄帝内经的F&amp;Q 中医基本理论</p><a id="more"></a><p><strong>昔在黄帝，生而神灵，弱而能言，幼而徇齐，长而敦敏，成而登天。</strong><br>何为上古天真论？道家讲求道法自然，中医是另外一种认识世界的方式。不怕中医是伪科学，就怕科学是伪真理。上古与人为（伪）相对，是接近自然的一种状态。学习中医需要我们回归自然，接近传统。<br><strong>神</strong> 亦非幡动，亦非风动，仁者心动。心亦是神 （god 造物主，who created everything）<br><strong>靈</strong> 包含巫 ，巫上下代表天地，左右代表活人与死人。巫是沟通天地活人死人的媒介，最开始的巫为女性，因为巫需要是很感性的人。当巫开始念咒语，雨下起来了，那么就灵验了。<br><strong>智慧</strong> 急中生智，静极生慧。智是小智，不动心，肉眼凡胎能研究的学问是智。慧含有心，心通神。双丰代表极大的智慧。<br><strong>言</strong>  立功立德立言，言并非随口说的话，而是能够出口成章，口传心授经典的话。黄帝自有天赋，年轻的时候酉得到高人和名师的提携。<br><strong>敦敏</strong> 中医讲究虚心实腑，修行到一定程度（道家的四重境界 真-至-圣-贤）。真人游行于天地之间，视听于四通八达。</p><p><strong>乃问于天师曰：余闻上古之人，春秋皆度百岁，而动作不衰</strong><br><strong>上古</strong> 女娲伏羲年代，距离黄帝还要久远的年纪。<br><strong>動</strong> 动的繁体字，人老先老脚。重字代表脚后跟。动作不衰，腿脚灵便，气血充足。  </p><p><strong>今时之人，年半百而动作皆衰者，时世异耶？人将失之耶</strong><br><strong>岐伯对曰：上古之人，其知道者，法于阴阳，和于术数，食饮有节，起居有常，不妄作劳，故能形与神俱，而尽终其天年，度百岁乃去。</strong><br><strong>道法</strong> 道是天道，法式人定的。<br><strong>術</strong> 人用于谋生的手段，古代对于工作/谋生的手段有着严格的要求，要对身心有益。<br><strong>数</strong> 数字也有阴阳，1，3，5，7，9是阳，2，4，6，8是阳。<br><strong>节</strong> 有节制，人吃到好吃的东西/好喝的东西都会不停的享受。这种欲望不加控制也就是纵欲。节欲不是禁欲也不是纵欲。饥饿，饥是胃肠恐龙，饿是内心感受，主观想进食。饮食要顺应天时，也要顺应内心的感受。吃饭快的人欲望比较强，心火旺，心神躁动。水是伤寒之物。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 关于黄帝内经的F&amp;amp;Q 中医基本理论&lt;/p&gt;
    
    </summary>
    
      <category term="个人" scheme="https://liuchao0704.github.io/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    
      <category term="中医" scheme="https://liuchao0704.github.io/tags/%E4%B8%AD%E5%8C%BB/"/>
    
  </entry>
  
  <entry>
    <title>Vue使用总结</title>
    <link href="https://liuchao0704.github.io/2019/01/19/vue/"/>
    <id>https://liuchao0704.github.io/2019/01/19/vue/</id>
    <published>2019-01-19T12:42:16.000Z</published>
    <updated>2020-02-19T06:47:12.758Z</updated>
    
    <content type="html"><![CDATA[<p>根据最近所写vue项目总结之</p><a id="more"></a><h2 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h2><ul><li><p>父组件向子组件传值通信 props</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> //父组件：parent.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">:vals</span> = <span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">"./child"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data()&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      msg:<span class="string">"我是父组件的数据，将传给子组件"</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  components:&#123;</span></span><br><span class="line"><span class="undefined">    child</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">//子组件：child.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;&#123;vals&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">   props:&#123; <span class="comment">//父组件传值 可以是一个数组，对象</span></span></span><br><span class="line"><span class="undefined">    vals:&#123;</span></span><br><span class="line"><span class="javascript">      type:<span class="built_in">String</span>,<span class="comment">//类型为字符窜</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">default</span>:<span class="string">"123"</span> <span class="comment">//可以设置默认值</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>子组件向父组件传值通信 $emit</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">//父组件：parent.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">v-on:childevent</span>=<span class="string">'wathChildEvent'</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>子组件的数据为：&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">"./child"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data()&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="actionscript">      msg:<span class="string">""</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  components:&#123;</span></span><br><span class="line"><span class="undefined">    child</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods:&#123;</span></span><br><span class="line"><span class="actionscript">    wathChildEvent:<span class="function"><span class="keyword">function</span><span class="params">(vals)</span></span>&#123;<span class="comment">//直接监听 又子组件触发的事件，参数为子组件的传来的数据</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(vals);<span class="comment">//结果：这是子组件的数据，将有子组件操作触发传给父组件</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.msg = vlas;</span></span><br><span class="line"><span class="undefined">    &#125; </span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">//子组件：child.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"子组件触发"</span> @<span class="attr">click</span>=<span class="string">"target"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data()&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      texts:<span class="string">'这是子组件的数据，将有子组件操作触发传给父组件'</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods:&#123;</span></span><br><span class="line"><span class="actionscript">    target:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123; <span class="comment">//有子组件的事件触发 自定义事件childevent</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.$emit(<span class="string">'childevent'</span>,<span class="keyword">this</span>.texts);<span class="comment">//触发一个在子组件中声明的事件 childEvnet</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>父组件调用子组件方法 $refs.methodName();</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">//父组件：parent.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">v-on:childevent</span>=<span class="string">'wathChildEvent'</span> <span class="attr">ref</span>=<span class="string">"childcomp"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"parentEnvet"</span> <span class="attr">value</span>=<span class="string">"父组件触发"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>子组件的数据为：&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">"./child"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data()&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="actionscript">      msg:<span class="string">""</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  components:&#123;</span></span><br><span class="line"><span class="undefined">    child</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods:&#123;</span></span><br><span class="line"><span class="actionscript">    wathChildEvent:<span class="function"><span class="keyword">function</span><span class="params">(vals)</span></span>&#123;<span class="comment">//直接监听 又子组件触发的事件，参数为子组件的传来的数据</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(vals);<span class="comment">//这是子组件的数据，将有子组件操作触发传给父组件</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.msg = vlas;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="actionscript">    parentEnvet:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.$refs[<span class="string">'childcomp'</span>].target(); <span class="comment">//通过refs属性获取子组件实例，又父组件操作子组件的方法触发事件$meit</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">//子组件：child.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- dothing..... --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data()&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      texts:<span class="string">'这是子组件的数据，将有子组件操作触发传给父组件'</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods:&#123;</span></span><br><span class="line"><span class="actionscript">    target:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123; <span class="comment">//又子组件的事件触发 自定义事件childevent</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.$emit(<span class="string">'childevent'</span>,<span class="keyword">this</span>.texts);<span class="comment">//触发一个在子组件中声明的事件 childEvnet</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="兄弟组件通信"><a href="#兄弟组件通信" class="headerlink" title="兄弟组件通信"></a>兄弟组件通信</h2><ul><li>利用bus方法</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">//建立一个空的Vue实例,将通信事件挂载在该实例上</span><br><span class="line">//emptyVue.js</span><br><span class="line">import Vue from 'vue'</span><br><span class="line">export default new Vue()</span><br><span class="line">//兄弟组件a:childa.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>A组件-&gt;&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"把a组件数据传给b"</span> @<span class="attr">click</span> =<span class="string">"send"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> vmson <span class="keyword">from</span> <span class="string">"./emptyVue"</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data()&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      msg:<span class="string">"我是a组件的数据"</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  methods:&#123;</span></span><br><span class="line"><span class="actionscript">    send:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">      vmson.$emit(<span class="string">"aevent"</span>,<span class="keyword">this</span>.msg)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">//兄弟组件b:childb.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>b组件,a传的的数据为-&gt;&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> vmson <span class="keyword">from</span> <span class="string">"./emptyVue"</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined"> data()&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      msg:<span class="string">""</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  mounted()&#123;</span></span><br><span class="line"><span class="actionscript">    vmson.$on(<span class="string">"aevent"</span>,(val)=&gt;&#123;<span class="comment">//监听事件aevent，回调函数要使用箭头函数;</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(val);<span class="comment">//打印结果：我是a组件的数据</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.msg = val;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">//父组件：parent.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">childa</span>&gt;</span><span class="tag">&lt;<span class="name">childa</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">childb</span>&gt;</span><span class="tag">&lt;/<span class="name">childb</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> childa <span class="keyword">from</span> <span class="string">"./childa"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> childb <span class="keyword">from</span> <span class="string">"./childb"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  data()&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="actionscript">      msg:<span class="string">""</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  components:&#123;</span></span><br><span class="line"><span class="undefined">    childa,</span></span><br><span class="line"><span class="undefined">    childb</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="vue生命周期函数"><a href="#vue生命周期函数" class="headerlink" title="vue生命周期函数"></a>vue生命周期函数</h2><ol><li>beforeCreate；</li><li>created；</li><li>beforeMount；</li><li>mounted；</li><li>beforeUpdate；</li><li>updated；</li><li>beforeDestroy；</li><li>destroyed</li></ol><ul><li><strong>beforeCreate</strong>（创建前） 在数据观测和初始化事件还未开始</li><li><strong>created</strong>（创建后） 完成数据观测，属性和方法的运算，初始化事件，$el属性还没有显示出来</li><li><strong>beforeMount</strong>（载入前） 在挂载开始之前被调用，相关的render函数首次被调用。实例已完成以下的配置：编译模板，把data里面的数据和模板生成html。注意此时还没有挂载html到页面上。</li><li><strong>mounted</strong>（载入后） 在el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用。实例已完成以下的配置：用上面编译好的html内容替换el属性指向的DOM对象。完成模板中的html渲染到html页面中。此过程中进行ajax交互。</li><li><strong>beforeUpdate</strong>（更新前） 在数据更新之前调用，发生在虚拟DOM重新渲染和打补丁之前。可以在该钩子中进一步地更改状态，不会触发附加的重渲染过程。</li><li><strong>updated</strong>（更新后） 在由于数据更改导致的虚拟DOM重新渲染和打补丁之后调用。调用时，组件DOM已经更新，所以可以执行依赖于DOM的操作。然而在大多数情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环。该钩子在服务器端渲染期间不被调用。</li><li><strong>beforeDestroy</strong>（销毁前） 在实例销毁之前调用。实例仍然完全可用。</li><li><p><strong>destroyed</strong>（销毁后） 在实例销毁之后调用。调用后，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用。</p><ul><li>created钩子每次加载完成后都可以重复执行；而mounted钩子只在页面第一次加载后才调用出来，只要el被加载过，之后的重复加载该页面就不会调用该钩子了；<br>注意：mounted在整个实例生命内只执行一次</li></ul></li></ul><h2 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h2><p>body 中添加 data-theme 属性 (当有插件的时候,部分元素为js动态添加 )body.className[data-theme]可以覆盖插件css<br>data-theme 配合 window.localStorage防止刷新网页失效</p><h2 id="打包后css顺序错乱"><a href="#打包后css顺序错乱" class="headerlink" title="打包后css顺序错乱"></a>打包后css顺序错乱</h2><p>解决方案：其实只需把在main.js中的bootsrpa的css 或者 element-UI引入放到app的引入之前</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;根据最近所写vue项目总结之&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://liuchao0704.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="vue" scheme="https://liuchao0704.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>NodeJs搭建本地服务器之使用手机访问</title>
    <link href="https://liuchao0704.github.io/2019/01/01/nodejs/"/>
    <id>https://liuchao0704.github.io/2019/01/01/nodejs/</id>
    <published>2019-01-01T12:24:16.000Z</published>
    <updated>2020-02-19T06:48:45.359Z</updated>
    
    <content type="html"><![CDATA[<p> 方便快捷的本地环境搭建亲测可用</p><a id="more"></a> <h2 id="node-js-本地服务"><a href="#node-js-本地服务" class="headerlink" title="node.js 本地服务"></a>node.js 本地服务</h2><p> 文件名 service.js<br> 命令行 node service<br> 手机端和pc端在同一个网络里面就可以互相访问了<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url  = <span class="built_in">require</span>(<span class="string">"url"</span>),</span><br><span class="line">    fs=<span class="built_in">require</span>(<span class="string">"fs"</span>),</span><br><span class="line">    http=<span class="built_in">require</span>(<span class="string">"http"</span>),</span><br><span class="line">    path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pathname=__dirname+url.parse(req.url).pathname;</span><br><span class="line">    <span class="keyword">if</span> (path.extname(pathname)==<span class="string">""</span>) &#123;</span><br><span class="line">        pathname+=<span class="string">"/"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pathname.charAt(pathname.length<span class="number">-1</span>)==<span class="string">"/"</span>)&#123;</span><br><span class="line">        pathname+=<span class="string">"index.html"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fs.exists(pathname,<span class="function"><span class="keyword">function</span>(<span class="params">exists</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(exists)&#123;</span><br><span class="line">            <span class="keyword">switch</span>(path.extname(pathname))&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">".html"</span>:</span><br><span class="line">                    res.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/html"</span>&#125;);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">".js"</span>:</span><br><span class="line">                    res.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/javascript"</span>&#125;);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">".css"</span>:</span><br><span class="line">                    res.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/css"</span>&#125;);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">".gif"</span>:</span><br><span class="line">                    res.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"image/gif"</span>&#125;);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">".jpg"</span>:</span><br><span class="line">                    res.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"image/jpeg"</span>&#125;);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">".png"</span>:</span><br><span class="line">                    res.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"image/png"</span>&#125;);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    res.writeHead(<span class="number">200</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"application/octet-stream"</span>&#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fs.readFile(pathname,<span class="function"><span class="keyword">function</span> (<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">                res.end(data);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.writeHead(<span class="number">404</span>, &#123;<span class="string">"Content-Type"</span>: <span class="string">"text/html"</span>&#125;);</span><br><span class="line">            res.end(<span class="string">"&lt;h1&gt;404 Not Found&lt;/h1&gt;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;).listen(<span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Server running at localhost"</span>);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 方便快捷的本地环境搭建亲测可用&lt;/p&gt;
    
    </summary>
    
      <category term="构建工具" scheme="https://liuchao0704.github.io/categories/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="nodejs" scheme="https://liuchao0704.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>6、流的破坏与保护</title>
    <link href="https://liuchao0704.github.io/2018/11/15/cssworld-float/"/>
    <id>https://liuchao0704.github.io/2018/11/15/cssworld-float/</id>
    <published>2018-11-15T08:05:55.000Z</published>
    <updated>2020-02-19T04:10:37.583Z</updated>
    
    <content type="html"><![CDATA[<p>float相关属性。<br><a id="more"></a></p><h2 id="5-1-魔鬼属性float"><a href="#5-1-魔鬼属性float" class="headerlink" title="5.1 魔鬼属性float"></a>5.1 魔鬼属性float</h2><h3 id="6-1-1-float的本质与特性"><a href="#6-1-1-float的本质与特性" class="headerlink" title="6.1.1 float的本质与特性"></a>6.1.1 float的本质与特性</h3><ul><li>包裹性</li><li>块状化并格式化上下文</li><li>破坏文档流</li><li>没有任何margin合并</li></ul><h3 id="6-1-2-float的作用机制"><a href="#6-1-2-float的作用机制" class="headerlink" title="6.1.2 float的作用机制"></a>6.1.2 float的作用机制</h3><ul><li>父级元素“高度塌陷”</li><li>行框盒子和浮动元素不可重叠性</li></ul><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/css/cssworld/float.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;float相关属性。&lt;br&gt;
    
    </summary>
    
      <category term="笔记【css世界】" scheme="https://liuchao0704.github.io/categories/%E7%AC%94%E8%AE%B0%E3%80%90css%E4%B8%96%E7%95%8C%E3%80%91/"/>
    
    
      <category term="浮动" scheme="https://liuchao0704.github.io/tags/%E6%B5%AE%E5%8A%A8/"/>
    
      <category term="css" scheme="https://liuchao0704.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>你不知道的JS(上)作用域</title>
    <link href="https://liuchao0704.github.io/2018/10/07/you-dont-know-js-scope/"/>
    <id>https://liuchao0704.github.io/2018/10/07/you-dont-know-js-scope/</id>
    <published>2018-10-07T01:32:20.000Z</published>
    <updated>2020-02-19T04:08:11.609Z</updated>
    
    <content type="html"><![CDATA[<p> 读【你不知道的js上】之后对作用域的理解和总结</p><a id="more"></a><h2 id="1、作用域是什么"><a href="#1、作用域是什么" class="headerlink" title="1、作用域是什么"></a>1、作用域是什么</h2><p>在程序中需要一套设计良好的规则来存储变量，并且之后可以方便的找到这些变量。这套规则被称为作用域。</p><h3 id="1-1-编译原理"><a href="#1-1-编译原理" class="headerlink" title="1.1 编译原理"></a>1.1 编译原理</h3><p>对于Javascript来说，大部分情况下的编译发生在代码执行前的几微秒(甚至更短)的时间内。任何Javascript代码片段在执行前都要进行编译。</p><h3 id="1-2-理解作用域"><a href="#1-2-理解作用域" class="headerlink" title="1.2 理解作用域"></a>1.2 理解作用域</h3><h3 id="1-2-1-演员表"><a href="#1-2-1-演员表" class="headerlink" title="1.2.1 演员表"></a>1.2.1 演员表</h3><ul><li>引擎<br>从头到尾负责整个Javascript程序的编译及执行过程。</li><li>编译器<br>引擎最好的朋友之一，负责语法分析及代码生成等脏活累活。</li><li>作用域<br>引擎的另一个好朋友，负责收集并维护由所有声明的标志符(变量)组成的一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标志符的访问权限。</li></ul><h3 id="1-2-4-引擎和作用域的对话"><a href="#1-2-4-引擎和作用域的对话" class="headerlink" title="1.2.4 引擎和作用域的对话"></a>1.2.4 引擎和作用域的对话</h3><ul><li>RHS查询 谁是赋值操作的源头， 取到它的原值 ，注重拿到值</li><li>LHS查询 赋值操作的目标是谁， 为它赋值， 注重赋值</li></ul><h3 id="1-3-作用域嵌套"><a href="#1-3-作用域嵌套" class="headerlink" title="1.3 作用域嵌套"></a>1.3 作用域嵌套</h3><p>当一个块或者函数嵌套在另一个块或者函数中时，就发生了作用域的嵌套。因此，在当前作用域中无法找到某个变量时，引擎就会在外层嵌套的作用域中继续查找，直到找到该变量，或抵达最外层的作用域(也就是全局作用域)为止。</p><h2 id="2、词法作用域"><a href="#2、词法作用域" class="headerlink" title="2、词法作用域"></a>2、词法作用域</h2><p>简单的来说，词法作用域就是定义在词法阶段的作用域。词法作用域是你在写代码时将变量和块作用域写在哪里决定的。编译的词法分析阶段基本能够知道全部的标志符在哪里以及是如何声明的，从而能够预测在执行过程中如何对它们进行查找。</p><h2 id="3、函数作用域和块作用域"><a href="#3、函数作用域和块作用域" class="headerlink" title="3、函数作用域和块作用域"></a>3、函数作用域和块作用域</h2><h3 id="3-1-函数中的作用域"><a href="#3-1-函数中的作用域" class="headerlink" title="3.1 函数中的作用域"></a>3.1 函数中的作用域</h3><p>函数用作域的含义是指，属于这个函数的全部变量都可以在整个函数的范围内使用及复用(事实上在嵌套的作用域中也可以使用)。</p><h3 id="3-2-隐藏内部实现"><a href="#3-2-隐藏内部实现" class="headerlink" title="3.2 隐藏内部实现"></a>3.2 隐藏内部实现</h3><p>可以将变量和函数包裹在一个函数的作用域中，然后用这个作用域来“隐藏”它们。</p><h3 id="规避冲突"><a href="#规避冲突" class="headerlink" title="规避冲突"></a>规避冲突</h3><ul><li>全局命名空间</li><li>模块管理</li></ul><h3 id="3-3-函数作用域"><a href="#3-3-函数作用域" class="headerlink" title="3.3 函数作用域"></a>3.3 函数作用域</h3><p>区分函数声明和表达式最简单的方法是看function关键字出现在声明的位置，如果function是声明的第一个词，那么就是一个函数声明，否则就是一个函数表达式。<br>函数声明和函数表达式之间最重要的区别是它们的名称标识符将会绑定在何处。</p><p>(function foo(){…})作为一个函数表达式意味着foo只能在…所代表的位置中被访问，外部作用域则不行。foo变量名被隐藏在自身中意味着不会非必要地污染外部作用域。</p><h3 id="3-3-1-匿名和具名"><a href="#3-3-1-匿名和具名" class="headerlink" title="3.3.1 匿名和具名"></a>3.3.1 匿名和具名</h3><p>匿名函数表达式最熟悉的场景就是回调参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>匿名函数表达式虽然书写起来简单快捷，但是也存在几个缺点</p><ol><li>匿名函数在栈追踪中不会显示出有意义的函数名，使得调试很困难。</li><li>如果没有函数名，当函数需要引用自身时只能使用已经<em>过期</em>的arguments.callee引用，比如在递归中。另一个函数需要引用自身的例子，是在事件触发后事件监听器需要解绑自身。</li><li>匿名函数省略了对于代码可读性/可理解性很重要的函数名</li></ol><h3 id="3-3-2-立即执行函数表达式"><a href="#3-3-2-立即执行函数表达式" class="headerlink" title="3.3.2 立即执行函数表达式"></a>3.3.2 立即执行函数表达式</h3><p>由于函数被包含在一对()括号内部，因此成为了一个表达式，通过在末尾加上另外一个( )可以立即执行这个函数。第一个( )将函数变成了表达式，第二个( )执行了这个函数。IIFE代表立即执行函数表达式(Immediately Invoked Function Expression)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">ITFE</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a) <span class="comment">//2</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>IIFE的另一个非常普遍的进阶用法是把它们当作函数调用并传递参数进去。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">ITFE</span>(<span class="params">global</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a) <span class="comment">//3</span></span><br><span class="line">    <span class="built_in">console</span>.log(global.a) <span class="comment">//2</span></span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br><span class="line"> <span class="built_in">console</span>.log(a) <span class="comment">//2</span></span><br></pre></td></tr></table></figure><h3 id="3-4-块作用域"><a href="#3-4-块作用域" class="headerlink" title="3.4 块作用域"></a>3.4 块作用域</h3><p>表面上看JavaScript并没有块作用域的相关功能</p><h3 id="3-4-2-try-catch"><a href="#3-4-2-try-catch" class="headerlink" title="3.4.2 try/catch"></a>3.4.2 try/catch</h3><p>Javascript的ES3规范中规定try/catch的catch分句会创建一个块作用域，其中声明的变量仅在catch内部有效。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="literal">undefined</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (err) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(err);<span class="comment">//ReferenceError: err is not defined</span></span><br></pre></td></tr></table></figure></p><p>ES6中引入了let，使得代码有了创建完整、不受约束的块作用域的能力。但是在ES6之前，或者慢慢的向ES6环境过渡期我们如何创建块作用域的效果？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">     <span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">console</span>.log(a); <span class="comment">//ReferenceError: a is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (a) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//ReferenceError: a is not defined</span></span><br></pre></td></tr></table></figure><h2 id="4、提升"><a href="#4、提升" class="headerlink" title="4、提升"></a>4、提升</h2><h3 id="4-1-先有鸡还有蛋"><a href="#4-1-先有鸡还有蛋" class="headerlink" title="4.1 先有鸡还有蛋"></a>4.1 先有鸡还有蛋</h3><p>思考是声明(蛋)在前？还是赋值(鸡)在前？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> a ;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">var</span>  b = <span class="number">2</span>;</span><br></pre></td></tr></table></figure></p><h3 id="4-2-编译器再度来袭"><a href="#4-2-编译器再度来袭" class="headerlink" title="4.2 编译器再度来袭"></a>4.2 编译器再度来袭</h3><p>引擎会在解释Javascript代码之前首先对其进行编译。编译阶段中的一部分工作就是找到所有的声明，并用合适的作用域将它们关联起来。</p><p>包括变量和函数在内的所有的声明都会在任何代码被执行前首先被处理</p><p>函数声明会被提升，但是函数表达式却不会被提升</p><h3 id="4-3-函数优先"><a href="#4-3-函数优先" class="headerlink" title="4.3 函数优先"></a>4.3 函数优先</h3><p>函数声明和变量声明都会被提升。但是函数会首先被提升，然后才是变量。</p><blockquote><p>要注意避免重复声明，特别是当普通的var声明和函数声明混合在一起的时候</p></blockquote><h2 id="作用域闭包"><a href="#作用域闭包" class="headerlink" title="作用域闭包"></a>作用域闭包</h2><h3 id="5-2-启示"><a href="#5-2-启示" class="headerlink" title="5.2 启示"></a>5.2 启示</h3><p>当函数可以记住并访问所在的词法作用域时，就产生了闭包<br>函数在定义时的词法作用域以外的地方被调用，但是依然持有对该作用域的引用。这个引用就是闭包。<br>闭包主要例子模块</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 读【你不知道的js上】之后对作用域的理解和总结&lt;/p&gt;
    
    </summary>
    
      <category term="笔记【你不知道的js】" scheme="https://liuchao0704.github.io/categories/%E7%AC%94%E8%AE%B0%E3%80%90%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84js%E3%80%91/"/>
    
    
      <category term="scope" scheme="https://liuchao0704.github.io/tags/scope/"/>
    
  </entry>
  
  <entry>
    <title>你不知道的JS系列之精读</title>
    <link href="https://liuchao0704.github.io/2018/08/07/you-dont-know-js-index/"/>
    <id>https://liuchao0704.github.io/2018/08/07/you-dont-know-js-index/</id>
    <published>2018-08-07T01:32:20.000Z</published>
    <updated>2020-02-19T04:08:03.724Z</updated>
    
    <content type="html"><![CDATA[<p> 精读【你不知道的js】系列归纳总结目录</p><a id="more"></a><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><p>JavaScirpt 有七种内置类型</p><ul><li>未定义——undefined </li><li>空值——null</li><li>布尔值——boolean</li><li>数字——number</li><li>字符串——string</li><li>对象——object</li><li>符号——symbol（es6 新增）</li></ul><p>可以用<code>typeof</code>运算符查看值的类型，但是<code>null</code>有些特殊</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>  === <span class="string">'object'</span>; <span class="comment">// true </span></span><br><span class="line"><span class="keyword">var</span> a = <span class="literal">null</span>;</span><br><span class="line">(!a &amp;&amp; <span class="keyword">typeof</span> a === <span class="string">'object'</span>); <span class="comment">// true null是 "假值"也是唯一一个用typeof检测会返回"object"的基本类型值。</span></span><br></pre></td></tr></table></figure><p>js中变量没有类型，只有变量所存储的<strong>值</strong>才有类型,可以使用<code>typeof</code>运算符查看。<br><code>typeof</code>在使用时候由于安全机制不能区分<code>undefined</code>(声明但是未赋值)和<code>undeclared</code>(未声明的变量)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">//  undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a)  <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> b)  <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// ReferenceError: b is not defined</span></span><br></pre></td></tr></table></figure><h2 id="值"><a href="#值" class="headerlink" title="值"></a>值</h2><ul><li>数组<ul><li>Array.of()</li><li>Array.from()</li><li>Array.copyWithin()</li><li>Array.fill()</li><li>Array,reduce()</li><li>Array.reverse()</li><li>数组的增删拼接</li></ul></li><li>字符串  <ul><li>String.concat()</li><li>String.slice() </li><li>String.substring()</li></ul></li><li>数字<ul><li>0.1 + 0.2 = 0.3 ？</li><li>整数检测</li><li>NaN的判断</li><li>±0</li><li>特殊等式  <code>NaN !== NaN</code> ,<code>0 === -0</code></li></ul></li><li>特殊数值<ul><li>undefined </li><li>null</li></ul></li></ul><h2 id="原生函数"><a href="#原生函数" class="headerlink" title="原生函数"></a>原生函数</h2><h2 id="强制类型转化"><a href="#强制类型转化" class="headerlink" title="强制类型转化"></a>强制类型转化</h2><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a><a href="https://liuchao0704.github.io/2018/10/07/you-dont-know-js-scope/">作用域</a></h2><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><h2 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h2><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 精读【你不知道的js】系列归纳总结目录&lt;/p&gt;
    
    </summary>
    
      <category term="笔记【你不知道的js】" scheme="https://liuchao0704.github.io/categories/%E7%AC%94%E8%AE%B0%E3%80%90%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84js%E3%80%91/"/>
    
    
      <category term="目录" scheme="https://liuchao0704.github.io/tags/%E7%9B%AE%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>5、内联元素与流</title>
    <link href="https://liuchao0704.github.io/2018/05/07/cssworld-line-height/"/>
    <id>https://liuchao0704.github.io/2018/05/07/cssworld-line-height/</id>
    <published>2018-05-07T05:18:55.000Z</published>
    <updated>2020-02-19T04:07:39.262Z</updated>
    
    <content type="html"><![CDATA[<p>line-height相关知识。<br><a id="more"></a></p><h2 id="5-1-字母x–CSS世界中隐匿的举足轻重的角色"><a href="#5-1-字母x–CSS世界中隐匿的举足轻重的角色" class="headerlink" title="5.1 字母x–CSS世界中隐匿的举足轻重的角色"></a>5.1 字母x–CSS世界中隐匿的举足轻重的角色</h2><h3 id="5-1-1-字母x与CSS世界的基线"><a href="#5-1-1-字母x与CSS世界的基线" class="headerlink" title="5.1.1 字母x与CSS世界的基线"></a>5.1.1 字母x与CSS世界的基线</h3><p>字母x的下边缘是css世界的基线</p><h3 id="5-1-2-字母x与CSS中x-height"><a href="#5-1-2-字母x与CSS中x-height" class="headerlink" title="5.1.2 字母x与CSS中x-height"></a>5.1.2 字母x与CSS中x-height</h3><ul><li>x-height: 小写字母x的高度也就是ex。ex是css中的一个相对单位。</li><li><code>vertical-align:middle</code> middle是指基线往上1/2处x-height的高度。可以近似理解x交叉点的位置。</li></ul><h2 id="5-2-内联元素的基石"><a href="#5-2-内联元素的基石" class="headerlink" title="5.2 内联元素的基石"></a>5.2 内联元素的基石</h2><h3 id="5-2-1-内联元素的高度之本-————-line-height"><a href="#5-2-1-内联元素的高度之本-————-line-height" class="headerlink" title="5.2.1 内联元素的高度之本 ———— line-height"></a>5.2.1 内联元素的高度之本 ———— line-height</h3><ul><li>line-height决定非替换元素的纯内联元素的可视高度。 </li><li>内联元素的高度由固定高度和不固定的高度组成，这个不固定的高度就是指“行距”。</li><li>css中“行距”分散在当前文字的上方和下方，也就是第一行文字，其上方也是有“行距”的，不过高度是“行距”的一半，也叫做半“行距”。</li><li>行距 = line-height - font-size</li><li>对于替换元素来说line-height改变不了其高度</li><li>对于块级元素，line-height对其本身没有任何作用，我们改变line-height，块级元素的高度跟着变化实际上是通过改变块级元素里面的内联级别元素占据的高度实现的。</li></ul><h3 id="5-2-2-为什么line-height可以让内联元素“垂直居中”"><a href="#5-2-2-为什么line-height可以让内联元素“垂直居中”" class="headerlink" title="5.2.2 为什么line-height可以让内联元素“垂直居中”"></a>5.2.2 为什么line-height可以让内联元素“垂直居中”</h3><p>line-height 设置的垂直居中，并不是真正意义上的垂直居中而是近似“垂直居中”</p><ul><li>回答为何可以“垂直居中”，行高可以实现“垂直居中”原因在于css中“行距上下等分机制”</li><li>“近似”是因为文字字形的垂直中线位置普遍要比真正的“行框盒子”的垂直中线位置低</li></ul><p>实现多行文本或者替换元素的垂直居中需要line-height和vertical-align共同设置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">.box &#123;</span></span><br><span class="line"><span class="undefined">    width: 200px;</span></span><br><span class="line"><span class="undefined">    line-height: 120px;</span></span><br><span class="line"><span class="undefined">    background-color: #f0f0f9;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">.content &#123;</span></span><br><span class="line"><span class="undefined">    display: inline-block;</span></span><br><span class="line"><span class="undefined">    line-height: 20px;</span></span><br><span class="line"><span class="undefined">    margin: 0 20px;</span></span><br><span class="line"><span class="undefined">    vertical-align: middle;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>基于行高实现的。。。基于行高实现的。。。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>多行文字使用一个标签包裹，然后设置display为inline-block。可以重置外部的line-height，还可以设置vertical-align属性，以及产生一个关键的“行框盒子”。由于每个“行框盒子”都会附带的产物——“幽灵空白节点”，有了这个节点，我们的line-height:120px就有了作用对象</li><li>因为内联元素默认都是基线对齐的，所以对.content元素设置vertical-align:middle来调整多行文本的垂直位置。</li></ul><h3 id="5-2-3深入line-height的各类属性值"><a href="#5-2-3深入line-height的各类属性值" class="headerlink" title="5.2.3深入line-height的各类属性值"></a>5.2.3深入line-height的各类属性值</h3><p>line-height 的默认值是normal，还支持数值，百分比值以及长度值。</p><ul><li>数值 line-height:1.5，最终计算值 1.5*14px = 21px。</li><li>百分比值  line-height:150% ，最终计算值 150%*14px = 21px。</li><li>长度值 line-height:21px ，line-height:1.5em 最终计算值 1.5*14px = 21px。</li></ul><p>如果line-height使用数值作为属性值，则所有子元素都是继承这个值。但是如果用百分比或者长度值作为属性值，那么所有子元素继承的都是最终的计算值。</p><h3 id="5-2-4-内联元素line-height的“大值特性”"><a href="#5-2-4-内联元素line-height的“大值特性”" class="headerlink" title="5.2.4 内联元素line-height的“大值特性”"></a>5.2.4 内联元素line-height的“大值特性”</h3><p>无论内联元素元素line-height如何设置，最终父级元素的高度都是由数值大的那个line-height决定的，内联元素line-height的“大值特性”<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div class="box"&gt;</span><br><span class="line">      &lt;span class="content"&gt;基于行高实现的&lt;/span&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line"> &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">     <span class="selector-class">.box</span> &#123;</span><br><span class="line">     <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">     <span class="attribute">line-height</span>: <span class="number">120px</span>;</span><br><span class="line">     <span class="attribute">background-color</span>: <span class="number">#f0f0f9</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="selector-class">.content</span> &#123;</span><br><span class="line">     <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">     <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">     <span class="selector-class">.box</span> &#123;</span><br><span class="line">     <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">     <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">     <span class="attribute">background-color</span>: <span class="number">#f0f0f9</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="selector-class">.content</span> &#123;</span><br><span class="line">     <span class="attribute">line-height</span>: <span class="number">120px</span>;</span><br><span class="line">     <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><h2 id="5-3-line-height的好朋友vertical-align"><a href="#5-3-line-height的好朋友vertical-align" class="headerlink" title="5.3 line-height的好朋友vertical-align"></a>5.3 line-height的好朋友vertical-align</h2><h3 id="5-3-2-vertical-align作用的前提"><a href="#5-3-2-vertical-align作用的前提" class="headerlink" title="5.3.2 vertical-align作用的前提"></a>5.3.2 vertical-align作用的前提</h3><p>vertical-align作用的前提是只能应用于内联元素以及display值为table-cell的元素。浮动和绝对定位会让元素块状化。</p><h3 id="vertical-align-middle-与近似垂直居中"><a href="#vertical-align-middle-与近似垂直居中" class="headerlink" title="vertical-align:middle 与近似垂直居中"></a>vertical-align:middle 与近似垂直居中</h3><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/css/cssworld/verticalalignmiddle.jpg" alt=""></p><ul><li>父级line-height的值设置了空白幽灵节点的高度</li><li>line-height使得x近似垂直居中</li><li>子级vertical-align:middle使图片的垂直中心和x的1/2x-height靠近。随着字体的设置，x字符的中心点其实是靠下的。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;line-height相关知识。&lt;br&gt;
    
    </summary>
    
      <category term="笔记【css世界】" scheme="https://liuchao0704.github.io/categories/%E7%AC%94%E8%AE%B0%E3%80%90css%E4%B8%96%E7%95%8C%E3%80%91/"/>
    
    
      <category term="css" scheme="https://liuchao0704.github.io/tags/css/"/>
    
      <category term="line-height" scheme="https://liuchao0704.github.io/tags/line-height/"/>
    
      <category term="vertical-align" scheme="https://liuchao0704.github.io/tags/vertical-align/"/>
    
  </entry>
  
  <entry>
    <title>4、盒尺寸四大家族</title>
    <link href="https://liuchao0704.github.io/2018/05/06/cssworld-box/"/>
    <id>https://liuchao0704.github.io/2018/05/06/cssworld-box/</id>
    <published>2018-05-06T05:18:37.000Z</published>
    <updated>2020-02-19T04:09:23.820Z</updated>
    
    <content type="html"><![CDATA[<p>了解content/padding/margin</p><a id="more"></a><h2 id="4-1-深入理解content"><a href="#4-1-深入理解content" class="headerlink" title="4.1 深入理解content"></a>4.1 深入理解content</h2><h3 id="4-1-1-contnet-与替换元素"><a href="#4-1-1-contnet-与替换元素" class="headerlink" title="4.1.1 contnet 与替换元素"></a>4.1.1 contnet 与替换元素</h3><h3 id="什么是替换元素"><a href="#什么是替换元素" class="headerlink" title="什么是替换元素"></a>什么是替换元素</h3><p>通过修改某个属性值呈现的内容就可以被替换的元素就称为“替换元素”。典型的替换元素 <code>&lt;img&gt;</code>,<code>&lt;object&gt;</code>,<code>video</code>,<code>&lt;iframe&gt;</code>,<code>&lt;textarea&gt;</code>,<code>&lt;input&gt;</code></p><ul><li>内容外观不受页面上的css的影响</li><li>有自己的尺寸</li><li>在很多css属性上有自己的一套表现规则</li></ul><h3 id="替换元素的默认的display值"><a href="#替换元素的默认的display值" class="headerlink" title="替换元素的默认的display值"></a>替换元素的默认的display值</h3><p>所有的替换元素都是内联水平元素。替换元素的display值对于其尺寸计算规则无影响。</p><h3 id="替换元素的尺寸计算规则"><a href="#替换元素的尺寸计算规则" class="headerlink" title="替换元素的尺寸计算规则"></a>替换元素的尺寸计算规则</h3><p>替换元素的尺寸：固有尺寸、HTML尺寸、CSS尺寸</p><ul><li>如果没有CSS尺寸和HTML尺寸则使用固有尺寸作为最终的宽高</li><li>如果没有CSS尺寸则使用HTML尺寸</li><li>如果存在CSS尺寸，则最终尺寸由CSS属性决定</li><li>如果“固有尺寸”含有固有的宽高比例，同时仅设置了宽度或者仅设置了高度，则元素依然按照固有的宽高比例显示。</li><li>如果上面的条件都不符合，则最终宽度表现为300像素，高度为150像素。宽高比2:1。</li><li>内联替换元素和块级替换元素使用上面同一套尺寸计算规则。</li></ul><h3 id="替换元素和非替换元素的距离"><a href="#替换元素和非替换元素的距离" class="headerlink" title="替换元素和非替换元素的距离"></a>替换元素和非替换元素的距离</h3><ul><li>替换元素如img去掉src属性则是普通非替换元素。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">img &#123;</span></span><br><span class="line"><span class="undefined">display: block;</span></span><br><span class="line"><span class="css"><span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#eee</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- alt为任意值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"1"</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 此时img的宽度100%自适应父级容器  </p><ul><li>非替换元素和替换元素只隔了一个CSScontent属性</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">h1 &#123;</span><br><span class="line">content: url(../th.jpg);</span><br><span class="line">width: 50px;</span><br><span class="line">height:50px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">&lt;!-- 普通元素content --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 此时h1就是一个50*50的图片</p><h2 id="4-2-温和的padding属性"><a href="#4-2-温和的padding属性" class="headerlink" title="4.2 温和的padding属性"></a>4.2 温和的padding属性</h2><h3 id="4-2-1-padding与元素尺寸"><a href="#4-2-1-padding与元素尺寸" class="headerlink" title="4.2.1 padding与元素尺寸"></a>4.2.1 padding与元素尺寸</h3><p>内联元素的padding在垂直方向同样会影响布局。垂直方向会发生层叠。利用这一特点可以优雅的增加点击区域同时对现有布局无任何影响。</p><h3 id="4-2-2-padding的百分比值"><a href="#4-2-2-padding的百分比值" class="headerlink" title="4.2.2 padding的百分比值"></a>4.2.2 padding的百分比值</h3><p>padding百分比值无论是水平方向还是垂直方向均是相对于<strong>父级</strong>宽度来计算。 实际使用实例可以做自适应的等比矩形。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.img-wrapper</span> &#123;</span></span><br><span class="line"><span class="undefined">        position: relative;</span></span><br><span class="line"><span class="undefined">        padding: 50%; //实现正方形</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.img-wrapper</span> &gt; <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">        width: 100%;</span></span><br><span class="line"><span class="undefined">        height: 100%;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">left</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">top</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img-wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../th.jpg"</span> <span class="attr">alt</span>=<span class="string">"1"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>内联元素的padding</p><ul><li>padding相对宽度计算</li><li>默认的高度的宽度细节有差异</li><li>padding 会断行</li></ul><h2 id="4-3-激进的margin属性"><a href="#4-3-激进的margin属性" class="headerlink" title="4.3 激进的margin属性"></a>4.3 激进的margin属性</h2><h3 id="4-3-1-margin与元素尺寸以及相关布局"><a href="#4-3-1-margin与元素尺寸以及相关布局" class="headerlink" title="4.3.1 margin与元素尺寸以及相关布局"></a>4.3.1 margin与元素尺寸以及相关布局</h3><ol><li>margin 与元素的内部尺寸</li></ol><p>marign改变元素的可视尺寸与padding相反。对于paddding，元素设定了width属性或者保持<strong>包裹性</strong>的时候，会改变元素可视尺寸。而margin则无视之，只有当元素是“充分利用可用空间”状态的时候，margin才可以改变元素的可视尺寸。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">padding</span><span class="selector-pseudo">:0</span> 10<span class="selector-tag">px</span> ;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="undefined">margin: 0 -10px;</span></span><br><span class="line"><span class="undefined">line-height: 20px;</span></span><br><span class="line"><span class="undefined">text-align: center;</span></span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span>:<span class="selector-id">#e1e1e1</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- marigin 改变子级宽度 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"son"</span>&gt;</span>barfoo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-3-4-深入理解CSS中的margin-auto"><a href="#4-3-4-深入理解CSS中的margin-auto" class="headerlink" title="4.3.4 深入理解CSS中的margin:auto"></a>4.3.4 深入理解CSS中的margin:auto</h3><p>触发<code>margin:auto</code>计算有个前提条件就是width或者height为auto时，元素是具有对应方向的自动填充特性。(比如块状元素的width默认100%继承父级，绝对定位元素的格式化宽度和高度)<br><code>marigin:auto</code>的填充规则  </p><ol><li>如果一侧定值,一侧auto,则auto为剩余空间。</li><li>如果两侧均是auto,则平分剩余空间。 </li></ol><p>针对第一条可以实现<strong>块状元素</strong>的左右对齐(而不是只有通过<code>float:left/right</code>)</p><h2 id="例子（利用content生成伪元素以及margin-auto实现常见布局）"><a href="#例子（利用content生成伪元素以及margin-auto实现常见布局）" class="headerlink" title="例子（利用content生成伪元素以及margin:auto实现常见布局）"></a>例子（利用content生成伪元素以及margin:auto实现常见布局）</h2><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/css/cssworld/cssworld1.png" alt=""><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.home-icon-item</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">        display: inline-block;</span></span><br><span class="line"><span class="undefined">        content: '';</span></span><br><span class="line"><span class="undefined">        width: 50px;</span></span><br><span class="line"><span class="undefined">        height: 50px;</span></span><br><span class="line"><span class="undefined">        left: 0;</span></span><br><span class="line"><span class="undefined">        top: 0;</span></span><br><span class="line"><span class="undefined">        right: 0;</span></span><br><span class="line"><span class="undefined">        bottom: 0;</span></span><br><span class="line"><span class="undefined">        margin: auto;</span></span><br><span class="line"><span class="undefined">        border-radius: 50%;</span></span><br><span class="line"><span class="undefined">        z-index: -1;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"> </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>    </span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"home-icon-wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"home-icon-item"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>培训<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"home-icon-item"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>会议<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"home-icon-item"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>学员服务<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"home-icon-item"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>资料下载<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="4-4功勋卓越的border属性"><a href="#4-4功勋卓越的border属性" class="headerlink" title="4.4功勋卓越的border属性"></a>4.4功勋卓越的border属性</h2><h3 id="4-4-3-border-color和color"><a href="#4-4-3-border-color和color" class="headerlink" title="4.4.3 border-color和color"></a>4.4.3 border-color和color</h3><p>border-color 有一个很重要也很实用的特性，就是“border-color默认颜色就是color色值”。根据这个特性可以做个简单的边框hover变色实例。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.border</span> &#123;</span></span><br><span class="line"><span class="undefined">        position: relative; </span></span><br><span class="line"><span class="undefined">        width: 80px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">height</span><span class="selector-pseudo">:80px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">border</span><span class="selector-pseudo">:2px</span> <span class="selector-tag">dashed</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#e3e3e3</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.border</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.border</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">        display: block;</span></span><br><span class="line"><span class="undefined">        content: '';</span></span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="undefined">        height: 40px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">border-top</span><span class="selector-pseudo">:6px</span> <span class="selector-tag">solid</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">top</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">left</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="undefined">        margin-top: -3px;</span></span><br><span class="line"><span class="undefined">        margin-left: -20px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.border</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">        display: block;</span></span><br><span class="line"><span class="undefined">        content: '';</span></span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="undefined">        height: 40px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">top</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">left</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="undefined">        margin-top: -20px;</span></span><br><span class="line"><span class="undefined">        margin-left: -3px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">border-left</span><span class="selector-pseudo">:6px</span> <span class="selector-tag">solid</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- border属性缺省 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="例子（利用border和margin实现等分布局）"><a href="#例子（利用border和margin实现等分布局）" class="headerlink" title="例子（利用border和margin实现等分布局）"></a>例子（利用border和margin实现等分布局）</h2><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/css/cssworld/margin1.png" alt=""></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.bg</span> &#123;</span></span><br><span class="line"><span class="undefined">        padding: 15px  30px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#e1e1e1</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.ul-wrapper</span> &#123;</span></span><br><span class="line"><span class="undefined">        padding-left: 0;</span></span><br><span class="line"><span class="undefined">        margin-right: -15px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.ul-wrapper</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="undefined">        display: block;</span></span><br><span class="line"><span class="undefined">        content: '';</span></span><br><span class="line"><span class="undefined">        clear: both;</span></span><br><span class="line"><span class="undefined">    &#125; </span></span><br><span class="line"><span class="css">   <span class="selector-class">.li-item</span> &#123;</span></span><br><span class="line"><span class="undefined">       float: left;</span></span><br><span class="line"><span class="css">       <span class="selector-tag">width</span><span class="selector-pseudo">:25</span>% ;</span></span><br><span class="line"><span class="undefined">       box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">       border-right: 15px solid transparent;</span></span><br><span class="line"><span class="css">       <span class="selector-tag">list-style-type</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css">       <span class="selector-tag">background-color</span>:  <span class="selector-id">#8BC34A</span>;</span></span><br><span class="line"><span class="undefined">       background-clip: content-box; //content-box可以减少嵌套</span></span><br><span class="line"><span class="undefined">       height: 150px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- margin 等分布局 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> &gt;</span>管理中心<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"ul-wrapper"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"li-item"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"li-item"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"li-item"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"li-item"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="两种等高布局"><a href="#两种等高布局" class="headerlink" title="两种等高布局"></a>两种等高布局</h2><ul><li>border</li><li>margin + padding</li></ul><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/css/cssworld/equalHeight1.png" alt=""></p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.border-box</span> &#123;</span></span><br><span class="line"><span class="undefined">    margin: 10px 0;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border-left</span><span class="selector-pseudo">:150px</span> <span class="selector-tag">solid</span> <span class="selector-id">#c7c7c7</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#f1f1f1</span>;</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="comment">/* 此处不能用overflow:hidden清除浮动否则左浮动的导航列表元素就会被隐藏掉 */</span></span></span><br><span class="line"><span class="css"><span class="selector-class">.border-box</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="undefined">    display: block;</span></span><br><span class="line"><span class="undefined">    content: '';</span></span><br><span class="line"><span class="undefined">    clear: both;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.border-box</span> &gt; <span class="selector-tag">nav</span> &#123;</span></span><br><span class="line"><span class="undefined">    width: 150px;</span></span><br><span class="line"><span class="undefined">    margin-left: -150px;</span></span><br><span class="line"><span class="undefined">    float: left;</span></span><br><span class="line"><span class="undefined">    text-align: center;</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- border等高布局--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>导航1<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>导航2<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>模块1<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>模块2<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>模块3<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p> <img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/css/cssworld/equalHeight2.png" alt=""><br> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.margin-box</span> &#123;</span></span><br><span class="line"><span class="undefined">        overflow: hidden;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.column-left</span> ,<span class="selector-class">.column-right</span> &#123;</span></span><br><span class="line"><span class="undefined">        width: 50%;</span></span><br><span class="line"><span class="undefined">        float: left;</span></span><br><span class="line"><span class="undefined">        padding-bottom: 9999px;</span></span><br><span class="line"><span class="undefined">        margin-bottom: -9999px;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.column-left</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#c7c7c7</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.column-right</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#f1f1f1</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- margin + padding 等高布局 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"margin-box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column-left"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>导航1<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>导航2<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column-right"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>模块1<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;了解content/padding/margin&lt;/p&gt;
    
    </summary>
    
      <category term="笔记【css世界】" scheme="https://liuchao0704.github.io/categories/%E7%AC%94%E8%AE%B0%E3%80%90css%E4%B8%96%E7%95%8C%E3%80%91/"/>
    
    
      <category term="css" scheme="https://liuchao0704.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>3、流、元素、基本尺寸</title>
    <link href="https://liuchao0704.github.io/2018/05/06/cssworld-width/"/>
    <id>https://liuchao0704.github.io/2018/05/06/cssworld-width/</id>
    <published>2018-05-06T05:18:25.000Z</published>
    <updated>2020-02-19T06:49:21.510Z</updated>
    
    <content type="html"><![CDATA[<p>认识各种盒子以及width/height作用细节</p><a id="more"></a><h2 id="3-1-块级盒子（认识各种盒子）"><a href="#3-1-块级盒子（认识各种盒子）" class="headerlink" title="3.1 块级盒子（认识各种盒子）"></a>3.1 块级盒子（认识各种盒子）</h2><p>根据整个第三章第四章以及第五章的内容，将盒子模型之间的关系画了一个总的示意图。 </p><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/css/cssworld/box1.jpg" alt=""></p><h2 id="3-2-width-height-作用的具体细节"><a href="#3-2-width-height-作用的具体细节" class="headerlink" title="3.2 width/height 作用的具体细节"></a>3.2 width/height 作用的具体细节</h2><h3 id="3-2-1-width-auto属性"><a href="#3-2-1-width-auto属性" class="headerlink" title="3.2.1 width:auto属性"></a>3.2.1 width:auto属性</h3><ul><li><p>充分利用可用空间 <code>&lt;div</code>&gt; ,<code>&lt;p&gt;</code>这些元素默认宽度100%充满父级 （外部尺寸）</p></li><li><p>收缩与包裹性  （内部尺寸）</p></li><li><p>收缩到最小 （内部尺寸）</p></li><li><p>超出容器限制 （内部尺寸）</p></li></ul><h3 id="“外部尺寸”与“内部尺寸”"><a href="#“外部尺寸”与“内部尺寸”" class="headerlink" title="“外部尺寸”与“内部尺寸”"></a>“外部尺寸”与“内部尺寸”</h3><p>   外部尺寸：宽度由外部元素决定<br>   内部尺寸：宽度由内部元素决定 如果一个元素里面没有内容宽度为0， 那么这个元素应用的就是“内部尺寸”</p><h3 id="外部尺寸与流体特性"><a href="#外部尺寸与流体特性" class="headerlink" title="外部尺寸与流体特性"></a>外部尺寸与流体特性</h3><ol><li><p>正常流宽度<br>在页面中随便扔一个<code>&lt;div&gt;</code>元素，其尺寸表现就会和这水流一样铺满容器，这就是<code>block</code>容器的流特性。</p></li><li><p>格式化宽度<br>格式化宽度仅出现在“绝对定位模型”中，也就是出现在<code>position:absolute</code>，<code>position:fixed</code>中。<strong>一般来说</strong>绝对定位元素的宽度是包裹性的，由内部元素决定。但是对于<strong>非替换元素</strong>当left/top 或者top/bottom对立方的属性值同时存在的时候，元素的宽度表现为“格式化宽度”，其宽度大小相对于最近的具有定特性的祖先元素计算。“格式化宽度”具有完全的流体性，也就是margin、border、padding和content内容区域同样会自动分配水平（垂直）空间。</p></li></ol><h3 id="内部尺寸与流体特性"><a href="#内部尺寸与流体特性" class="headerlink" title="内部尺寸与流体特性"></a>内部尺寸与流体特性</h3><ol><li><p>包裹性<br>“包裹性”包含“包裹”以及<strong>“自适应性”</strong>。自适应性是指元素尺寸由内部元素的宽度决定，但是永远小于“包含块”容器的尺寸(除非容器尺寸小于元素的“首选最小宽度”)。<br>除了inline-block元素，<strong>浮动元素</strong>以及<strong>绝对定位元素</strong>都具有包裹性。</p></li><li><p>首选最小宽度<br>所谓“首选最小宽度”，指的是元素最合适的最小宽度。如果外部容器宽度是0，内部inline-block元素宽度不会为0。</p></li><li><p>最大宽度<br>实际等同于“包裹性”元素设置white-space:nowrap声明后的宽度。如果内部没有块级元素或者块级元素没有设定宽度值，则“最大宽度”实际上是最大的连续内联盒子的宽度</p></li></ol><h3 id="3-2-2-width值作用的具体细节"><a href="#3-2-2-width值作用的具体细节" class="headerlink" title="3.2.2 width值作用的具体细节"></a>3.2.2 width值作用的具体细节</h3><p> width作用在content box上</p><h3 id="3-2-3-CSS流体布局下的宽度分离原则"><a href="#3-2-3-CSS流体布局下的宽度分离原则" class="headerlink" title="3.2.3 CSS流体布局下的宽度分离原则"></a>3.2.3 CSS流体布局下的宽度分离原则</h3><p> 不在同一层标签上设置width，padding。 width设置在父级标签上，子级标签设置padding,border属性。子级自适应父级宽度。</p><h3 id="3-2-4-改变width作用细节的box-sizing"><a href="#3-2-4-改变width作用细节的box-sizing" class="headerlink" title="3.2.4 改变width作用细节的box-sizing"></a>3.2.4 改变width作用细节的box-sizing</h3><p> box-sizing被发明的初衷更大的可能是解决替换元素宽度自适应问题。原因替换元素的尺寸由内部元素决定对于其设置display属性是inline还是block,替换元素的宽度都不会受其影响。当替换元素设置<code>display:block</code>是无法让元素100%自适应父级。所以让textarea的width100%自适应父级，同时保留border,padding属性只能通过<code>box-sizing:border-box</code>来解决</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> input ,textarea, img, video, object &#123;</span><br><span class="line">box-sizing: border-box</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-6-height-100"><a href="#3-2-6-height-100" class="headerlink" title="3.2.6 height: 100%"></a>3.2.6 height: 100%</h3><p>如何让元素支持height:100%?  </p><ul><li>设定显示的高度</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  <span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用绝对定位   </li></ul><p>绝对定位元素百分比计算和非绝对定位元素的百分比计算是有区别的，区别在于绝对定位的宽高百分比计算是相对于padding box</p><h2 id="3-3-CSSmin-width-max-width和min-height-max-height"><a href="#3-3-CSSmin-width-max-width和min-height-max-height" class="headerlink" title="3.3 CSSmin-width/max-width和min-height/max-height"></a>3.3 CSSmin-width/max-width和min-height/max-height</h2><h3 id="3-3-2-与众不同的初始值"><a href="#3-3-2-与众不同的初始值" class="headerlink" title="3.3.2 与众不同的初始值"></a>3.3.2 与众不同的初始值</h3><p>min-width/min-height的初始值为auto<br>max-width/max-height的初始值为none (思考为什么max的初始值为none 而不是auto)</p><h3 id="3-3-3-超越-important-超越最大"><a href="#3-3-3-超越-important-超越最大" class="headerlink" title="3.3.3 超越!important 超越最大"></a>3.3.3 超越!important 超越最大</h3><p>简单的来说min和max的权重比!important大。 如果min和max设置起冲突的时候。min-width 会覆盖max-width。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;认识各种盒子以及width/height作用细节&lt;/p&gt;
    
    </summary>
    
      <category term="笔记【css世界】" scheme="https://liuchao0704.github.io/categories/%E7%AC%94%E8%AE%B0%E3%80%90css%E4%B8%96%E7%95%8C%E3%80%91/"/>
    
    
      <category term="css" scheme="https://liuchao0704.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>css总结 | 读css世界笔记</title>
    <link href="https://liuchao0704.github.io/2018/04/16/cssworld-index/"/>
    <id>https://liuchao0704.github.io/2018/04/16/cssworld-index/</id>
    <published>2018-04-16T07:04:25.000Z</published>
    <updated>2020-02-19T04:07:33.557Z</updated>
    
    <content type="html"><![CDATA[<p>2018年2月份入手了《css世界》一书。打算过年内看完，但是翻阅之后决定作为工具书多次阅读并记笔记总结之，加深自己对css的理解。随着页面越来越个性化，我发现写一段易修改，可维护，代码量少的css相当重要。</p><a id="more"></a><h2 id="3-、流、元素、基本尺寸"><a href="#3-、流、元素、基本尺寸" class="headerlink" title="3 、流、元素、基本尺寸"></a><a href="https://liuchao0704.github.io/2018/05/06/cssworld-width/">3 、流、元素、基本尺寸</a></h2><h2 id="4、盒尺寸四大家族"><a href="#4、盒尺寸四大家族" class="headerlink" title="4、盒尺寸四大家族 "></a><a href="https://liuchao0704.github.io/2018/05/06/cssworld-box/">4、盒尺寸四大家族 </a></h2><h2 id="5、内联元素与流"><a href="#5、内联元素与流" class="headerlink" title="5、内联元素与流 "></a><a href="https://liuchao0704.github.io/2018/05/07/cssworld-line-height/">5、内联元素与流 </a></h2><h2 id="6、流的破坏与保护"><a href="#6、流的破坏与保护" class="headerlink" title="6、流的破坏与保护"></a><a href="https://liuchao0704.github.io/2018/11/0/cssworld-float/">6、流的破坏与保护</a></h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2018年2月份入手了《css世界》一书。打算过年内看完，但是翻阅之后决定作为工具书多次阅读并记笔记总结之，加深自己对css的理解。随着页面越来越个性化，我发现写一段易修改，可维护，代码量少的css相当重要。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记【css世界】" scheme="https://liuchao0704.github.io/categories/%E7%AC%94%E8%AE%B0%E3%80%90css%E4%B8%96%E7%95%8C%E3%80%91/"/>
    
    
      <category term="目录" scheme="https://liuchao0704.github.io/tags/%E7%9B%AE%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>游泳小记</title>
    <link href="https://liuchao0704.github.io/2018/04/09/swim/"/>
    <id>https://liuchao0704.github.io/2018/04/09/swim/</id>
    <published>2018-04-09T12:42:16.000Z</published>
    <updated>2020-02-19T02:44:20.168Z</updated>
    
    <content type="html"><![CDATA[<p>觉得为时已晚的时候,恰恰是最早的时候</p><a id="more"></a><h2 id="Day1-（2018-04-09）"><a href="#Day1-（2018-04-09）" class="headerlink" title="Day1 （2018.04.09）"></a>Day1 （2018.04.09）</h2><p>一共十节课 今天是第一节。课时一个小时，主要学会了漂浮在水面、换气、手臂动作。刚开始入水我是恐惧的，不敢手臂远离墙壁，自身腰部也很紧张，腿部很沉，下半身很沉，总是飘不起来。就算勉强漂浮在水中，身体也极度不稳定，整个人像风雨中飘摇的船只，左右摇晃不定，容易翻身。对于这种情况，教练教了两种动作，一个是在水中自主站立的动作，双腿的膝盖靠近胸部，手臂向下挥舞 ，人就顺势站立起来。还有一种是感觉你要翻身的时候 ，脚尖绷紧，膝盖打直，手臂张开角度越大越好，手臂打直 ，手指尖绷紧。然后整个人就不容易翻身了。掌握了以后，就不怕对水的恐惧了。 开心ing。 </p><h2 id="Day2-5-（2018-04-10-04-13）"><a href="#Day2-5-（2018-04-10-04-13）" class="headerlink" title="Day2-5 （2018.04.10-04.13）"></a>Day2-5 （2018.04.10-04.13）</h2><p>整个四节课就练习划手和蹬腿，其中蹬腿的用的时间很长，我刚开始练习的时候犯了很多错误。</p><ul><li>蹬腿必撅屁股</li><li>蹬腿身体滑行距离很小</li><li>蹬腿几次之后身体下半身越来越下沉 </li><li>蹬腿像慢动作</li></ul><p>首先蹬腿的时候 在小腿和脚后跟靠近屁股的同时，膝关节尽量打开 + 大腿不要太往池底靠，这样屁股就不会撅起来了。</p><p>蹬腿的时候 尽量保证身体的平稳性 不要操之过急，每次蹬腿完毕尽量让身体都稳定在水面中央 既不下沉的厉害，也不漂浮的厉害。</p><p>蹬腿要快要用力 </p><h2 id="Day6-（2018-04-15）"><a href="#Day6-（2018-04-15）" class="headerlink" title="Day6 （2018.04.15）"></a>Day6 （2018.04.15）</h2><p>今天蹬腿和划手有点感觉了，滑行的距离也出来了。明天可以练习一下综合了</p><h2 id="Day1N-2018-05-06"><a href="#Day1N-2018-05-06" class="headerlink" title="Day1N (2018.05.06)"></a>Day1N (2018.05.06)</h2><p>应该练习了有十几天，五一假期三天连续练习，能游一个来回，但是蹬腿的距离太短，以至于不停的蹬腿才能保持前进。初步判断是人未达到平行的状态就蹬腿，导致一部分前进的力量被分解为向上的力量。后期注意蹬腿时机。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;觉得为时已晚的时候,恰恰是最早的时候&lt;/p&gt;
    
    </summary>
    
      <category term="个人" scheme="https://liuchao0704.github.io/categories/%E4%B8%AA%E4%BA%BA/"/>
    
    
      <category term="游泳" scheme="https://liuchao0704.github.io/tags/%E6%B8%B8%E6%B3%B3/"/>
    
  </entry>
  
  <entry>
    <title>常用正则表达式整理</title>
    <link href="https://liuchao0704.github.io/2018/02/01/reg/"/>
    <id>https://liuchao0704.github.io/2018/02/01/reg/</id>
    <published>2018-02-01T13:45:43.000Z</published>
    <updated>2020-02-19T03:16:48.877Z</updated>
    
    <content type="html"><![CDATA[<p>将常用的正则表达式整理如下。</p><a id="more"></a> <h1 id="常用正则表达式整理"><a href="#常用正则表达式整理" class="headerlink" title="常用正则表达式整理"></a>常用正则表达式整理</h1><h2 id="正则元字符"><a href="#正则元字符" class="headerlink" title="正则元字符"></a>正则元字符</h2><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>*</td><td>匹配前面的字表达式零次或者多次等价于{0,}</td></tr><tr><td>+</td><td>匹配前面的字表达式一次或者多次等价于{1,}</td></tr><tr><td>?</td><td>匹配前面的字表达式零次或者一次等价于{0,1}</td></tr></tbody></table><h2 id="整数-不限制正负"><a href="#整数-不限制正负" class="headerlink" title="整数(不限制正负)"></a>整数(不限制正负)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^-?\d+$/; <span class="comment">// 不限制长度</span></span><br></pre></td></tr></table></figure><h2 id="整数-gt-0"><a href="#整数-gt-0" class="headerlink" title="整数(&gt; 0)"></a>整数(&gt; 0)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/^[<span class="number">1</span><span class="number">-9</span>]\d*$/; <span class="comment">// 不限制长度</span></span><br><span class="line">/^[<span class="number">1</span><span class="number">-9</span>]\d&#123;<span class="number">0</span>,<span class="number">5</span>&#125;$/;<span class="comment">// 限制长度</span></span><br></pre></td></tr></table></figure><h2 id="整数-gt-0-amp-amp-lt-100"><a href="#整数-gt-0-amp-amp-lt-100" class="headerlink" title="整数(&gt; 0 &amp;&amp; &lt;= 100)"></a>整数(&gt; 0 &amp;&amp; &lt;= 100)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^(<span class="number">100</span>|([<span class="number">1</span><span class="number">-9</span>]&#123;<span class="number">1</span>&#125;\d?))$/</span><br></pre></td></tr></table></figure><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/js/reg/reg2.png" alt=""></p><h2 id="浮点型-gt-0-保留2位小数"><a href="#浮点型-gt-0-保留2位小数" class="headerlink" title="浮点型(&gt; 0 保留2位小数)"></a>浮点型(&gt; 0 保留2位小数)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^(([<span class="number">1</span><span class="number">-9</span>]&#123;<span class="number">1</span>&#125;)(\.\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;)?|(<span class="number">0</span>(\.\d&#123;<span class="number">0</span>,<span class="number">1</span>&#125;[<span class="number">1</span><span class="number">-9</span>])))$/</span><br></pre></td></tr></table></figure><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/js/reg/reg0.png" alt=""></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/^(([<span class="number">1</span><span class="number">-9</span>]&#123;<span class="number">1</span>&#125;[<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">0</span>,<span class="number">5</span>&#125;)(\.\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;)?|(<span class="number">0</span>(\.\d&#123;<span class="number">0</span>,<span class="number">1</span>&#125;[<span class="number">1</span><span class="number">-9</span>])))$/</span><br></pre></td></tr></table></figure><h2 id="浮点型-gt-0-保留2位小数-1"><a href="#浮点型-gt-0-保留2位小数-1" class="headerlink" title="浮点型(&gt;= 0 保留2位小数)"></a>浮点型(&gt;= 0 保留2位小数)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^(([<span class="number">1</span><span class="number">-9</span>]&#123;<span class="number">1</span>&#125;)(\.\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;)?|(<span class="number">0</span>(\.\d&#123;<span class="number">0</span>,<span class="number">1</span>&#125;[<span class="number">1</span><span class="number">-9</span>])?))$/</span><br></pre></td></tr></table></figure><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/js/reg/reg1.png" alt=""></p><h2 id="字符串开头不能空格-中间可以是空格-数字-字母-中文-非特殊字符结尾"><a href="#字符串开头不能空格-中间可以是空格-数字-字母-中文-非特殊字符结尾" class="headerlink" title="字符串开头不能空格 中间可以是空格/数字/字母/中文/非特殊字符结尾"></a>字符串开头不能空格 中间可以是空格/数字/字母/中文/非特殊字符结尾</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^[\w\u4e00-\u9fa5]&#123;<span class="number">1</span>&#125;[\s\w\u4e00-\u9fa5]&#123;<span class="number">0</span>,<span class="number">8</span>&#125;$/</span><br></pre></td></tr></table></figure><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/js/reg/reg3.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将常用的正则表达式整理如下。&lt;/p&gt;
    
    </summary>
    
      <category term="js" scheme="https://liuchao0704.github.io/categories/js/"/>
    
    
      <category term="正则" scheme="https://liuchao0704.github.io/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>学以致用系列之Array</title>
    <link href="https://liuchao0704.github.io/2018/01/28/jsArray/"/>
    <id>https://liuchao0704.github.io/2018/01/28/jsArray/</id>
    <published>2018-01-28T10:46:46.000Z</published>
    <updated>2020-02-19T03:54:40.470Z</updated>
    
    <content type="html"><![CDATA[<p>改造一下之前ng中checkbox全选和选不选的js。</p><a id="more"></a><h2 id="一行代码搞定Array的深拷贝"><a href="#一行代码搞定Array的深拷贝" class="headerlink" title="一行代码搞定Array的深拷贝"></a>一行代码搞定Array的深拷贝</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">var</span> <span class="class"><span class="keyword">data</span> = <span class="keyword">data</span>.conact(); // js contacat() 方法会返回一个新的数组。tips：原数组中如有对象,还是不能做到完全的深拷贝。</span></span><br><span class="line"><span class="title">var</span> <span class="class"><span class="keyword">data</span> = <span class="keyword">data</span>.splice(); //同上</span></span><br></pre></td></tr></table></figure><h2 id="数组的过滤-filter"><a href="#数组的过滤-filter" class="headerlink" title="数组的过滤 filter()"></a>数组的过滤 filter()</h2><p>原来我操作的数组的思路是循环数组找到index,然后用数组的splice(index, 1)删除。其实就是filter()应该干的事情。</p><h2 id="改写Angular-JS动态控制多选框"><a href="#改写Angular-JS动态控制多选框" class="headerlink" title="改写Angular JS动态控制多选框"></a>改写Angular JS动态控制多选框</h2><p><a href="https://liuchao0704.github.io/2017/04/10/multiselect/">点击查看</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">"angular-1.3.0.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span> </span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body ng-app="myApp" ng-controller="vipApplyEditCtrl"&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;div&gt;  </span></span><br><span class="line"><span class="regexp">     &lt;input </span></span><br><span class="line"><span class="regexp">          type="checkbox" </span></span><br><span class="line"><span class="regexp">          name="all" </span></span><br><span class="line"><span class="regexp">          ng-model="all"</span></span><br><span class="line"><span class="regexp">          ng-change="toSelectAll(all)"&gt; 全选 </span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &lt;i&gt;&#123;&#123;all&#125;&#125;&lt;/i</span>&gt;</span><br><span class="line">    &lt;div ng-repeat=<span class="string">"color in colors"</span>&gt;  </span><br><span class="line">        &lt;input </span><br><span class="line">              type=<span class="string">"checkbox"</span> </span><br><span class="line">              ng-checked=<span class="string">"color.checked == true"</span>   </span><br><span class="line">              ng-click=<span class="string">"updateSelection(color)"</span> </span><br><span class="line">              /&gt;</span><br><span class="line">              &#123;&#123;color.name&#125;&#125;  </span><br><span class="line">    &lt;<span class="regexp">/div&gt;  </span></span><br><span class="line"><span class="regexp">    </span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    Selected :&#123;&#123;selected&#125;&#125;</span><br><span class="line">&lt;<span class="regexp">/div&gt;  </span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">var app = angular.module('myApp', []);</span></span><br><span class="line"><span class="regexp">app.controller("vipApplyEditCtrl", function($scope) &#123;  </span></span><br><span class="line"><span class="regexp">    $scope.formData = &#123;&#125;;</span></span><br><span class="line"><span class="regexp">    $scope.colors = [  </span></span><br><span class="line"><span class="regexp">        &#123;id : 1, name : 'black'&#125;,  </span></span><br><span class="line"><span class="regexp">        &#123;id : 2, name : 'red'&#125;,  </span></span><br><span class="line"><span class="regexp">        &#123;id : 3, name : 'blue'&#125;,  </span></span><br><span class="line"><span class="regexp">        &#123;id : 4, name : 'yellow'&#125;,  </span></span><br><span class="line"><span class="regexp">        &#123;id : 5, name : 'green'&#125;,  </span></span><br><span class="line"><span class="regexp">        &#123;id : 6, name : 'white'&#125;  </span></span><br><span class="line"><span class="regexp">    ] ;  </span></span><br><span class="line"><span class="regexp">      </span></span><br><span class="line"><span class="regexp">     $scope.selected = [] ;  /</span><span class="regexp">/ 存放新的已选数据 </span></span><br><span class="line"><span class="regexp">     $scope.updateSelection = function(obj)&#123;  </span></span><br><span class="line"><span class="regexp">        obj.checked = !obj.checked;</span></span><br><span class="line"><span class="regexp">        $scope.selected = [] ; </span></span><br><span class="line"><span class="regexp">         $scope.colors.forEach(function(item)&#123;</span></span><br><span class="line"><span class="regexp">            if(item.checked)&#123;</span></span><br><span class="line"><span class="regexp">                $scope.selected.push(item.id) ;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;)</span></span><br><span class="line"><span class="regexp">         $scope.colors.every(function(item)&#123;</span></span><br><span class="line"><span class="regexp">            return item.checked ;</span></span><br><span class="line"><span class="regexp">        &#125;)</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">     $scope.toSelectAll = function(flag)&#123;</span></span><br><span class="line"><span class="regexp">        $scope.selected = [];</span></span><br><span class="line"><span class="regexp">        $scope.colors.forEach(function(i)&#123;</span></span><br><span class="line"><span class="regexp">                 i.checked = flag;</span></span><br><span class="line"><span class="regexp">                 if(flag)$scope.selected.push(i.id);</span></span><br><span class="line"><span class="regexp">             &#125;)</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;);  </span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><h2 id="一维数组分割成二维数组"><a href="#一维数组分割成二维数组" class="headerlink" title="一维数组分割成二维数组"></a>一维数组分割成二维数组</h2><p>目的 将一维数组按照既定的目标个数截取变成二维数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">      <span class="keyword">var</span> totalNum = <span class="number">23</span> ;<span class="comment">// 初始化一维数组</span></span><br><span class="line">      <span class="keyword">var</span> originArr = [];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt; totalNum; i++) &#123;</span><br><span class="line">        originArr.push(i)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> result = []; <span class="comment">// 存放结果</span></span><br><span class="line">      <span class="keyword">var</span> index = <span class="number">0</span>; <span class="comment">// 存放二维标志位</span></span><br><span class="line">      <span class="keyword">var</span> targetNum = <span class="number">11</span>; <span class="comment">// 希望截取的个数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 方法一 index是一维变二维的关键标志位。</span></span><br><span class="line"><span class="comment">    标志位和 Math.floor (j / targetNum ) 恰好相同</span></span><br><span class="line"><span class="comment">    如果二维数组还未初始化，初始化二维数组为空数组待用。</span></span><br><span class="line"><span class="comment">    标志位相同的个体都是同一个二维数组成员，push到同一个result[index]里面</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">      </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">0</span>; j&lt; originArr.length;j++) &#123;</span><br><span class="line">        index = <span class="built_in">Math</span>.floor (j / targetNum )</span><br><span class="line">        <span class="keyword">if</span>(!result[index])&#123;</span><br><span class="line">          result[index] = []</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">       result[index].push(j)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">0</span>; j&lt; originArr.length;j=j+targetNum)&#123;</span><br><span class="line">   <span class="keyword">var</span> curArr = originArr.slice(j,j+targetNum);</span><br><span class="line">   result.push(curArr)</span><br><span class="line">&#125;</span><br><span class="line">   <span class="built_in">console</span>.log(result)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;改造一下之前ng中checkbox全选和选不选的js。&lt;/p&gt;
    
    </summary>
    
      <category term="angularJs" scheme="https://liuchao0704.github.io/categories/angularJs/"/>
    
    
      <category term="checkbox" scheme="https://liuchao0704.github.io/tags/checkbox/"/>
    
  </entry>
  
</feed>
