<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>超元气Zeroの札记</title>
  <icon>https://www.gravatar.com/avatar/6f2cdb2237458c9d449c99b722c0099d</icon>
  <subtitle>一个集美貌与才华于一身的程序媛</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liuchao0704.github.io/"/>
  <updated>2018-11-16T07:51:02.805Z</updated>
  <id>https://liuchao0704.github.io/</id>
  
  <author>
    <name>超元气Zero</name>
    <email>2820501417@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>6、流的破坏与保护</title>
    <link href="https://liuchao0704.github.io/2018/11/15/cssworld04/"/>
    <id>https://liuchao0704.github.io/2018/11/15/cssworld04/</id>
    <published>2018-11-15T08:05:55.000Z</published>
    <updated>2018-11-16T07:51:02.805Z</updated>
    
    <content type="html"><![CDATA[<p>float相关属性。<br><a id="more"></a></p><h2 id="5-1-魔鬼属性float"><a href="#5-1-魔鬼属性float" class="headerlink" title="5.1 魔鬼属性float"></a>5.1 魔鬼属性float</h2><h3 id="6-1-1-float的本质与特性"><a href="#6-1-1-float的本质与特性" class="headerlink" title="6.1.1 float的本质与特性"></a>6.1.1 float的本质与特性</h3><ul><li>包裹性</li><li>块状化并格式化上下文</li><li>破坏文档流</li><li>没有任何margin合并</li></ul><h3 id="6-1-2-float的作用机制"><a href="#6-1-2-float的作用机制" class="headerlink" title="6.1.2 float的作用机制"></a>6.1.2 float的作用机制</h3><ul><li>父级元素“高度塌陷”</li><li>行框盒子和浮动元素不可重叠性</li></ul><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/css/cssworld/float.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;float相关属性。&lt;br&gt;
    
    </summary>
    
    
      <category term="css" scheme="https://liuchao0704.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>你不知道的JS(上)作用域</title>
    <link href="https://liuchao0704.github.io/2018/10/07/you-dont-know-js-first1/"/>
    <id>https://liuchao0704.github.io/2018/10/07/you-dont-know-js-first1/</id>
    <published>2018-10-07T01:32:20.000Z</published>
    <updated>2018-10-07T13:44:54.600Z</updated>
    
    <content type="html"><![CDATA[<p> 读【你不知道的js上】之后对作用域的理解和总结</p><a id="more"></a><h2 id="1、作用域是什么"><a href="#1、作用域是什么" class="headerlink" title="1、作用域是什么"></a>1、作用域是什么</h2><h3 id="1-1-编译原理"><a href="#1-1-编译原理" class="headerlink" title="1.1 编译原理"></a>1.1 编译原理</h3><p>对于Javascript来说，大部分情况下的编译发生在代码执行前的几微秒(甚至更短)的时间内。任何Javascript代码片段在执行前都要进行编译。</p><h3 id="1-2-理解作用域"><a href="#1-2-理解作用域" class="headerlink" title="1.2 理解作用域"></a>1.2 理解作用域</h3><h3 id="1-2-1-演员表"><a href="#1-2-1-演员表" class="headerlink" title="1.2.1 演员表"></a>1.2.1 演员表</h3><ul><li>引擎<br>从头到尾负责整个Javascript程序的编译及执行过程。</li><li>编译器<br>引擎最好的朋友之一，负责语法分析及代码生成等脏活累活。</li><li>作用域<br>引擎的另一个好朋友，负责收集并维护由所有声明的标志符(变量)组成的一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标志符的访问权限。</li></ul><h3 id="1-2-4-引擎和作用域的对话"><a href="#1-2-4-引擎和作用域的对话" class="headerlink" title="1.2.4 引擎和作用域的对话"></a>1.2.4 引擎和作用域的对话</h3><ul><li>RHS查询 谁是赋值操作的源头， 取到它的原值 ，注重拿到值</li><li>LHS查询 赋值操作的目标是谁， 为它赋值， 注重赋值</li></ul><h3 id="1-3-作用域嵌套"><a href="#1-3-作用域嵌套" class="headerlink" title="1.3 作用域嵌套"></a>1.3 作用域嵌套</h3><p>当一个块或者函数嵌套在另一个块或者函数中时，就发生了作用域的嵌套。因此，在当前作用域中无法找到某个变量时，引擎就会在外层嵌套的作用域中继续查找，直到找到该变量，或抵达最外层的作用域(也就是全局作用域)为止。</p><h2 id="2、词法作用域"><a href="#2、词法作用域" class="headerlink" title="2、词法作用域"></a>2、词法作用域</h2><p>简单的来说，词法作用域就是定义在词法阶段的作用域。词法作用域是你在写代码时将变量和块作用域写在哪里决定的。编译的词法分析阶段基本能够知道全部的标志符在哪里以及是如何声明的，从而能够预测在执行过程中如何对它们进行查找。</p><h2 id="3、函数作用域和块作用域"><a href="#3、函数作用域和块作用域" class="headerlink" title="3、函数作用域和块作用域"></a>3、函数作用域和块作用域</h2><h3 id="3-1-函数中的作用域"><a href="#3-1-函数中的作用域" class="headerlink" title="3.1 函数中的作用域"></a>3.1 函数中的作用域</h3><p>函数用作域的含义是指，属于这个函数的全部变量都可以在整个函数的范围内使用及复用(事实上在嵌套的作用域中也可以使用)。</p><h3 id="3-2-隐藏内部实现"><a href="#3-2-隐藏内部实现" class="headerlink" title="3.2 隐藏内部实现"></a>3.2 隐藏内部实现</h3><p>可以将变量和函数包裹在一个函数的作用域中，然后用这个作用域来“隐藏”它们。</p><h3 id="规避冲突"><a href="#规避冲突" class="headerlink" title="规避冲突"></a>规避冲突</h3><ul><li>全局命名空间</li><li>模块管理</li></ul><h3 id="3-3-函数作用域"><a href="#3-3-函数作用域" class="headerlink" title="3.3 函数作用域"></a>3.3 函数作用域</h3><p>区分函数声明和表达式最简单的方法是看function关键字出现在声明的位置，如果function是声明的第一个词，那么就是一个函数声明，否则就是一个函数表达式。<br>函数声明和函数表达式之间最重要的区别是它们的名称标识符将会绑定在何处。</p><p>(function foo(){…})作为一个函数表达式意味着foo只能在…所代表的位置中被访问，外部作用域则不行。foo变量名被隐藏在自身中意味着不会非必要地污染外部作用域。</p><h3 id="3-3-1-匿名和具名"><a href="#3-3-1-匿名和具名" class="headerlink" title="3.3.1 匿名和具名"></a>3.3.1 匿名和具名</h3><p>匿名函数表达式最熟悉的场景就是回调参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>匿名函数表达式虽然书写起来简单快捷，但是也存在几个缺点</p><ol><li>匿名函数在栈追踪中不会显示出有意义的函数名，使得调试很困难。</li><li>如果没有函数名，当函数需要引用自身时只能使用已经<em>过期</em>的arguments.callee引用，比如在递归中。另一个函数需要引用自身的例子，是在事件触发后事件监听器需要解绑自身。</li><li>匿名函数省略了对于代码可读性/可理解性很重要的函数名</li></ol><h3 id="3-3-2-立即执行函数表达式"><a href="#3-3-2-立即执行函数表达式" class="headerlink" title="3.3.2 立即执行函数表达式"></a>3.3.2 立即执行函数表达式</h3><p>由于函数被包含在一对()括号内部，因此成为了一个表达式，通过在末尾加上另外一个( )可以立即执行这个函数。第一个( )将函数变成了表达式，第二个( )执行了这个函数。IIFE代表立即执行函数表达式(Immediately Invoked Function Expression)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">ITFE</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a) <span class="comment">//2</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>IIFE的另一个非常普遍的进阶用法是把它们当作函数调用并传递参数进去。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">ITFE</span>(<span class="params">global</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a) <span class="comment">//3</span></span><br><span class="line">    <span class="built_in">console</span>.log(global.a) <span class="comment">//2</span></span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br><span class="line"> <span class="built_in">console</span>.log(a) <span class="comment">//2</span></span><br></pre></td></tr></table></figure><h3 id="3-4-块作用域"><a href="#3-4-块作用域" class="headerlink" title="3.4 块作用域"></a>3.4 块作用域</h3><p>表面上看JavaScript并没有块作用域的相关功能</p><h3 id="3-4-2-try-catch"><a href="#3-4-2-try-catch" class="headerlink" title="3.4.2 try/catch"></a>3.4.2 try/catch</h3><p>Javascript的ES3规范中规定try/catch的catch分句会创建一个块作用域，其中声明的变量仅在catch内部有效。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="literal">undefined</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (err) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(err);<span class="comment">//ReferenceError: err is not defined</span></span><br></pre></td></tr></table></figure></p><p>ES6中引入了let，使得代码有了创建完整、不受约束的块作用域的能力。但是在ES6之前，或者慢慢的向ES6环境过渡期我们如何创建块作用域的效果？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">     <span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">console</span>.log(a); <span class="comment">//ReferenceError: a is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (a) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//ReferenceError: a is not defined</span></span><br></pre></td></tr></table></figure><h2 id="4、提升"><a href="#4、提升" class="headerlink" title="4、提升"></a>4、提升</h2><h3 id="4-1-先有鸡还有蛋"><a href="#4-1-先有鸡还有蛋" class="headerlink" title="4.1 先有鸡还有蛋"></a>4.1 先有鸡还有蛋</h3><p>思考是声明(蛋)在前？还是赋值(鸡)在前？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> a ;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">var</span>  b = <span class="number">2</span>;</span><br></pre></td></tr></table></figure></p><h3 id="4-2-编译器再度来袭"><a href="#4-2-编译器再度来袭" class="headerlink" title="4.2 编译器再度来袭"></a>4.2 编译器再度来袭</h3><p>引擎会在解释Javascript代码之前首先对其进行编译。编译阶段中的一部分工作就是找到所有的声明，并用合适的作用域将它们关联起来。</p><p>包括变量和函数在内的所有的声明都会在任何代码被执行前首先被处理</p><p>函数声明会被提升，但是函数表达式却不会被提升</p><h3 id="4-3-函数优先"><a href="#4-3-函数优先" class="headerlink" title="4.3 函数优先"></a>4.3 函数优先</h3><p>函数声明和变量声明都会被提升。但是函数会首先被提升，然后才是变量。</p><blockquote><p>要注意避免重复声明，特别是当普通的var声明和函数声明混合在一起的时候</p></blockquote><h2 id="作用域闭包"><a href="#作用域闭包" class="headerlink" title="作用域闭包"></a>作用域闭包</h2><h3 id="5-2-启示"><a href="#5-2-启示" class="headerlink" title="5.2 启示"></a>5.2 启示</h3><p>当函数可以记住并访问所在的词法作用域时，就产生了闭包<br>函数在定义时的词法作用域以外的地方被调用，但是依然持有对该作用域的引用。这个引用就是闭包。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 读【你不知道的js上】之后对作用域的理解和总结&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://liuchao0704.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>你不知道的JS(中)语法</title>
    <link href="https://liuchao0704.github.io/2018/09/20/you-dont-know-js-middle3/"/>
    <id>https://liuchao0704.github.io/2018/09/20/you-dont-know-js-middle3/</id>
    <published>2018-09-20T13:02:20.000Z</published>
    <updated>2018-10-06T06:17:44.566Z</updated>
    
    <content type="html"><![CDATA[<p> 读【你不知道的js中】之后对语法的总结</p><a id="more"></a><h2 id="5、语法"><a href="#5、语法" class="headerlink" title="5、语法"></a>5、语法</h2><h3 id="5-1语句和表达式"><a href="#5-1语句和表达式" class="headerlink" title="5.1语句和表达式"></a>5.1语句和表达式</h3><ul><li>语句相当于句子</li><li>表达式相当于短语</li><li>运算符相当于标点符号和连接词</li></ul><h3 id="5-1-1语句的结果值"><a href="#5-1-1语句的结果值" class="headerlink" title="5.1.1语句的结果值"></a>5.1.1语句的结果值</h3><p>语句都有一个结果值(statement completion value, undefined也算)</p><h3 id="5-1-2表达式的副作用"><a href="#5-1-2表达式的副作用" class="headerlink" title="5.1.2表达式的副作用"></a>5.1.2表达式的副作用</h3><ul><li>a++ 有后续副作用</li><li>=赋值运算符的副作用将某个值赋值给某个变量。并且有结果值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a,b,c;</span><br><span class="line">a = b = c = <span class="number">42</span>; <span class="comment">//链式赋值就是利用 = 的副作用</span></span><br></pre></td></tr></table></figure><h3 id="5-2运算符的优先级"><a href="#5-2运算符的优先级" class="headerlink" title="5.2运算符的优先级"></a>5.2运算符的优先级</h3><h3 id="5-2-2更强的绑定"><a href="#5-2-2更强的绑定" class="headerlink" title="5.2.2更强的绑定"></a>5.2.2更强的绑定</h3><p>&amp;&amp;运算符的优先级高于||，而||的优先级又高于? : </p><h3 id="5-2-3关联"><a href="#5-2-3关联" class="headerlink" title="5.2.3关联"></a>5.2.3关联</h3><ul><li>一般来说，运算符的关联不是从左到右就是从右到左</li><li>请注意关联和执行顺序并不是一回事</li><li>三元运算符是右关联</li><li>= 运算符是右关联</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> a ? b : (c ? d : e)</span><br><span class="line"> <span class="keyword">var</span> a,b,c;</span><br><span class="line">(a = (b = (c = <span class="number">42</span>)));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 读【你不知道的js中】之后对语法的总结&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://liuchao0704.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>你不知道的JS(中)类型</title>
    <link href="https://liuchao0704.github.io/2018/09/15/you-dont-know-js-middle1/"/>
    <id>https://liuchao0704.github.io/2018/09/15/you-dont-know-js-middle1/</id>
    <published>2018-09-15T14:02:20.000Z</published>
    <updated>2018-09-16T12:50:13.122Z</updated>
    
    <content type="html"><![CDATA[<p> 读【js高级程序】、【你不知道的js中】之后对js基本类型的总结</p><a id="more"></a><h2 id="1、类型"><a href="#1、类型" class="headerlink" title="1、类型"></a>1、类型</h2><h3 id="1-1-JavaScript的七种内置类型"><a href="#1-1-JavaScript的七种内置类型" class="headerlink" title="1.1  JavaScript的七种内置类型"></a>1.1  JavaScript的七种内置类型</h3><ul><li>undefined</li><li>null</li><li>boolean</li><li>number</li><li>string</li><li>object</li><li>symbol(ECMAScript 6 新定义)</li></ul><h3 id="1-2值和类型"><a href="#1-2值和类型" class="headerlink" title="1.2值和类型"></a>1.2值和类型</h3><p>JavaScript 中的变量是没有类型的，只有<strong>值</strong>才有。在对变量执行typeof操作的时候，得到的结果并不是该变量的类型，而是该变量持有的值的类型，因为JavaScript中的变量是没有类型的。</p><h3 id="1-3-typeof判断数据类型"><a href="#1-3-typeof判断数据类型" class="headerlink" title="1.3 typeof判断数据类型"></a>1.3 typeof判断数据类型</h3><p>typeof操作符返回一个<strong>字符串</strong>指示未经计算的操作数的类型。</p><table><thead><tr><th>类型</th><th style="text-align:left">结果</th></tr></thead><tbody><tr><td>undefined</td><td style="text-align:left">“undefined”</td></tr><tr><td>null</td><td style="text-align:left">“object”</td></tr><tr><td>boolean</td><td style="text-align:left">“boolean”</td></tr><tr><td>number</td><td style="text-align:left">“number”</td></tr><tr><td>string</td><td style="text-align:left">“string”</td></tr><tr><td>Symbol</td><td style="text-align:left">“symbol”</td></tr><tr><td>函数对象</td><td style="text-align:left">“function”</td></tr><tr><td>任何其他对象</td><td style="text-align:left">“object”</td></tr></tbody></table><p>typeof对于null 的处理结果有些特殊</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> === <span class="string">"object"</span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="literal">null</span>;</span><br><span class="line">(!a &amp;&amp; <span class="keyword">typeof</span> a === <span class="string">"object"</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>typeof实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Numbers</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">37</span> === <span class="string">'number'</span>;</span><br><span class="line"><span class="keyword">typeof</span> <span class="number">3.14</span> === <span class="string">'number'</span>;</span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Math</span>.LN2 === <span class="string">'number'</span>;</span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">Infinity</span> === <span class="string">'number'</span>;</span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">NaN</span> === <span class="string">'number'</span>; <span class="comment">// 尽管NaN是"Not-A-Number"的缩写</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Number</span>(<span class="number">1</span>) === <span class="string">'number'</span>; <span class="comment">// 但不要使用这种形式!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Strings</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">""</span> === <span class="string">'string'</span>;</span><br><span class="line"><span class="keyword">typeof</span> <span class="string">"bla"</span> === <span class="string">'string'</span>;</span><br><span class="line"><span class="keyword">typeof</span> (<span class="keyword">typeof</span> <span class="number">1</span>) === <span class="string">'string'</span>; <span class="comment">// typeof总是返回一个字符串</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">String</span>(<span class="string">"abc"</span>) === <span class="string">'string'</span>; <span class="comment">// 但不要使用这种形式!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Booleans</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span> === <span class="string">'boolean'</span>;</span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">false</span> === <span class="string">'boolean'</span>;</span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Boolean</span>(<span class="literal">true</span>) === <span class="string">'boolean'</span>; <span class="comment">// 但不要使用这种形式!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Symbols</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Symbol</span>() === <span class="string">'symbol'</span>;</span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Symbol</span>(<span class="string">'foo'</span>) === <span class="string">'symbol'</span>;</span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Symbol</span>.iterator === <span class="string">'symbol'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Undefined</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span> === <span class="string">'undefined'</span>;</span><br><span class="line"><span class="comment">//对于undeclared的变量，typeof返回"undefined"并不会报错，这是因为typeof有一个特殊的安全防范机制</span></span><br><span class="line"><span class="keyword">typeof</span> declaredButUndefinedVariable === <span class="string">'undefined'</span>;</span><br><span class="line"><span class="keyword">typeof</span> undeclaredVariable === <span class="string">'undefined'</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// Objects</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;<span class="attr">a</span>:<span class="number">1</span>&#125; === <span class="string">'object'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Array.isArray 或者 Object.prototype.toString.call</span></span><br><span class="line"><span class="comment">// 区分数组,普通对象</span></span><br><span class="line"><span class="keyword">typeof</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>] === <span class="string">'object'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">Date</span>() === <span class="string">'object'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面的容易令人迷惑，不要使用！</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">true</span>) === <span class="string">'object'</span>;</span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">1</span>) ==== <span class="string">'object'</span>;</span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"abc"</span>) === <span class="string">'object'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125; === <span class="string">'function'</span>;</span><br><span class="line"><span class="keyword">typeof</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;&#125; === <span class="string">'function'</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Math</span>.sin === <span class="string">'function'</span>;</span><br></pre></td></tr></table></figure><h2 id="2、值"><a href="#2、值" class="headerlink" title="2、值"></a>2、值</h2><h3 id="2-1-数组"><a href="#2-1-数组" class="headerlink" title="2.1 数组"></a>2.1 数组</h3><h4 id="判断数组的几种方法"><a href="#判断数组的几种方法" class="headerlink" title="判断数组的几种方法"></a>判断数组的几种方法</h4><ul><li>typeof &amp;&amp; length （数组类型属于object，但是数组有length属性，object没有）</li><li>instanceof （多个iframe情况下）</li><li>Array.isArray() （IE9以及上支持）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123; <span class="string">'name'</span>:<span class="string">'lee'</span> &#125;; <span class="comment">// 对象</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="string">'reg'</span>,<span class="string">'blue'</span>]; <span class="comment">// 数组</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">var</span> getDataType = <span class="function"><span class="keyword">function</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> o == <span class="string">'object'</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>( <span class="keyword">typeof</span> o.length == <span class="string">'number'</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'Array'</span>; </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'Object'</span>;    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'param is no object type'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">    </span><br><span class="line">alert( getDataType(o) );    <span class="comment">// Object</span></span><br><span class="line">alert( getDataType(a) );    <span class="comment">// Array</span></span><br><span class="line">alert( getDataType(<span class="number">1</span>) );    <span class="comment">// param is no object type</span></span><br><span class="line">alert( getDataType(<span class="literal">true</span>) ); <span class="comment">// param is no object type</span></span><br><span class="line">alert( getDataType(<span class="string">'a'</span>) );  <span class="comment">// param is no object type</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123; <span class="string">'name'</span>:<span class="string">'lee'</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> a = [<span class="string">'reg'</span>,<span class="string">'blue'</span>];</span><br><span class="line">    </span><br><span class="line">alert( a <span class="keyword">instanceof</span> <span class="built_in">Array</span> );  <span class="comment">// true</span></span><br><span class="line">alert( o <span class="keyword">instanceof</span> <span class="built_in">Array</span> );  <span class="comment">// false</span></span><br><span class="line">alert( a <span class="keyword">instanceof</span> <span class="built_in">Object</span> );  <span class="comment">// true</span></span><br><span class="line">alert( o <span class="keyword">instanceof</span> <span class="built_in">Object</span> );  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// all following calls return true</span></span><br><span class="line"><span class="built_in">Array</span>.isArray([]);</span><br><span class="line"><span class="built_in">Array</span>.isArray([<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="keyword">new</span> <span class="built_in">Array</span>());</span><br><span class="line"><span class="comment">// Little known fact: Array.prototype itself is an array:</span></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="built_in">Array</span>.prototype); </span><br><span class="line"></span><br><span class="line"><span class="comment">// all following calls return false</span></span><br><span class="line"><span class="built_in">Array</span>.isArray();</span><br><span class="line"><span class="built_in">Array</span>.isArray(&#123;&#125;);</span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="literal">null</span>);</span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="literal">undefined</span>);</span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="number">17</span>);</span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="string">'Array'</span>);</span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">Array</span>.isArray(&#123; <span class="attr">__proto__</span>: <span class="built_in">Array</span>.prototype &#125;);</span><br></pre></td></tr></table></figure><p>ECMAScript5中Array.isArray是原生的判断数组的方法，IE9及以上支持。考虑到兼容性，在没有此方法的浏览器中，可以使用Object.prototype.toString.call(obj) === ‘[object Array]’替代。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isArray = <span class="built_in">Array</span>.isArray || <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">'[object Array]'</span>;</span><br><span class="line">&#125;   </span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="built_in">console</span>.log(isArray(arr)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><h3 id="2-2字符串"><a href="#2-2字符串" class="headerlink" title="2.2字符串"></a>2.2字符串</h3><p>字符串是不可变的，而数组是可变的。字符串不可变是指字符串成员函数不会改变其原始值，而是创建并返回一个新的字符串。而数组的成员函数都是在其原始值上进行操作。</p><h3 id="2-3数字"><a href="#2-3数字" class="headerlink" title="2.3数字"></a>2.3数字</h3><p>如何判断0.1+0.2=0.3？最常见的方法是设置一个误差范围值，通常称为”机器精度”（machine epsilon），对Javascript的数字来说，这个值通常是2^-52。<br>从ES6开始，该值定义在Number.EPSILON,我们可以直接拿来用，也可以为ES之前的版本写polyfill：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="built_in">Number</span>.EPSILON)&#123;</span><br><span class="line">    <span class="built_in">Number</span>.EPSILON = <span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">-52</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">numberCloseEnoughToEqual</span>(<span class="params">n1,n2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> n1 === <span class="string">'number'</span> &amp;&amp; <span class="keyword">typeof</span> n2 === <span class="string">'number'</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.abs(n1 - n2) &lt; <span class="built_in">Number</span>.EPSILON;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">0.1</span> + <span class="number">0.2</span> ;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">0.3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">// 0.30000000000000004</span></span><br><span class="line"><span class="built_in">console</span>.log(numberCloseEnoughToEqual(a,b)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><h2 id="3、JavaScript的内置函数"><a href="#3、JavaScript的内置函数" class="headerlink" title="3、JavaScript的内置函数"></a>3、JavaScript的内置函数</h2><p>常用的原生函数有：</p><ul><li>String()</li><li>Number()</li><li>Boolean()</li><li>Array()</li><li>Oject()</li><li>Function()</li><li>RegExp()</li><li>Date()</li><li>Error()</li><li>Symbol()</li></ul><h4 id="Array-对象方法"><a href="#Array-对象方法" class="headerlink" title="Array 对象方法"></a>Array 对象方法</h4><ul><li>concat()</li><li>join()</li><li>slice()</li><li>splice()</li><li>push()</li><li>pop()</li><li>shift()</li><li>unshift()</li></ul><h2 id="concat-方法"><a href="#concat-方法" class="headerlink" title="concat()方法"></a>concat()方法</h2><p>concat()方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。</p><p>concat方法创建一个新的数组，它由被调用的对象中的元素组成，每个参数的顺序依次是该参数的元素（如果参数是数组）或参数本身（如果参数不是数组）。它<strong>不会递归</strong>到嵌套数组参数中。</p><ul><li><p>concat方法不会改变this或任何作为参数提供的数组，而是返回一个浅拷贝，它包含与原始数组相结合的相同元素的副本。 原始数组的元素将复制到新数组中，如下所示：</p></li><li><p>对象引用（而不是实际对象）：concat将对象引用复制到新数组中。 原始数组和新数组都引用相同的对象。 也就是说，如果引用的对象被修改，则更改对于新数组和原始数组都是可见的。 这包括也是数组的数组参数的元素。<br>数据类型如字符串，数字和布尔（不是String，Number 和 Boolean 对象）：concat将字符串和数字的值复制到新数组中。</p></li></ul><h3 id="concat-例子"><a href="#concat-例子" class="headerlink" title="concat()例子"></a>concat()例子</h3><p>连接两个数组 以下代码将两个数组合并为一个新数组：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> alpha = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">var</span> numeric = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">alpha.concat(numeric);</span><br><span class="line"><span class="comment">// result in ['a', 'b', 'c', 1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//合并嵌套数组以下代码合并数组并保留引用：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num1 = [[<span class="number">1</span>]];</span><br><span class="line"><span class="keyword">var</span> num2 = [<span class="number">2</span>, [<span class="number">3</span>]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nums = num1.concat(num2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(nums);</span><br><span class="line"><span class="comment">// results in [[1], 2, [3]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// modify the first element of num1</span></span><br><span class="line">num1[<span class="number">0</span>].push(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(nums);</span><br><span class="line"><span class="comment">// results in [[1, 4], 2, [3]]</span></span><br></pre></td></tr></table></figure></p><h2 id="join-方法"><a href="#join-方法" class="headerlink" title="join()方法"></a>join()方法</h2><p>join() 方法将数组（或一个类数组对象）的所有元素连接到一个字符串中。不改变原始数组，而是返回新的字符串<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">str = arr.join()</span><br><span class="line"><span class="comment">// 默认为 ","</span></span><br><span class="line"></span><br><span class="line">str = arr.join(<span class="string">""</span>)</span><br><span class="line"><span class="comment">// 分隔符 === 空字符串 ""</span></span><br><span class="line"></span><br><span class="line">str = arr.join(separator)</span><br><span class="line"><span class="comment">// 分隔符</span></span><br></pre></td></tr></table></figure></p><h3 id="separator"><a href="#separator" class="headerlink" title="separator"></a>separator</h3><ul><li><p>指定一个字符串来分隔数组的每个元素。</p></li><li><p>如果需要(separator)，将分隔符转换为字符串。</p></li><li><p>如果省略分隔符参数，数组元素用逗号分隔。默认为 “,”。</p></li><li><p>如果separator是空字符串(“”)，则所有元素之间都没有任何字符。</p></li></ul><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>一个所有数组元素连接的字符串。如果 arr.length 为0，则返回空字符串</p><h3 id="拓展延伸"><a href="#拓展延伸" class="headerlink" title="拓展延伸"></a>拓展延伸</h3><p>数组contact()方法并不能递归到嵌套数组，可以通过join()方法将数组转换成字符串，然后通过split()方法将字符串输出为数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = [[<span class="number">1</span>]];</span><br><span class="line"><span class="keyword">var</span> num2 = [<span class="number">2</span>, [<span class="number">3</span>],[[[<span class="number">7</span>],<span class="number">9</span>],<span class="number">8</span>]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nums = num1.concat(num2).join().split();</span><br><span class="line"><span class="comment">// [1,2,3,7,9,8]</span></span><br></pre></td></tr></table></figure><h2 id="slice-方法"><a href="#slice-方法" class="headerlink" title="slice()方法"></a>slice()方法</h2><p>slice() 方法返回一个从开始到结束（不包括结束）选择的数组的一部分浅拷贝到一个新数组对象。且原始数组不会被修改。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayObject.slice(start,end) <span class="comment">// 如果忽略start和end可以快速得到某个数组的浅拷贝</span></span><br></pre></td></tr></table></figure><h3 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h3><p>返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。</p><p> start 可选   </p><p>从该索引处开始提取原数组中的元素（从0开始）。<br>如果该参数为负数，则表示从原数组中的倒数第几个元素开始提取，slice(-2)表示提取原数组中的倒数第二个元素到最后一个元素（包含最后一个元素）。<br>如果省略 start，则 slice 从索引 0 开始。 </p><p>end可选  </p><p>在该索引处结束提取原数组元素（从0开始）。slice会提取原数组中索引从 begin 到 end 的所有元素（包含begin，但不包含end）。<br>slice(1,4) 提取原数组中的第二个元素开始直到第四个元素的所有元素 （索引为 1, 2, 3的元素）。<br>如果该参数为负数， 则它表示在原数组中的倒数第几个元素结束抽取。 slice(-2,-1)表示抽取了原数组中的倒数第二个元素到最后一个元素（不包含最后一个元素，也就是只有倒数第二个元素）。<br>如果 end 被省略，则slice 会一直提取到原数组末尾。<br>如果 end 大于数组长度，slice 也会一直提取到原数组末尾。</p><h2 id="splice-方法"><a href="#splice-方法" class="headerlink" title="splice()方法"></a>splice()方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayObject.splice(index,howmany,item1,.....,itemX)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>index</td><td>必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。</td></tr><tr><td>howmany</td><td>要删除的项目数量。如果设置为 0，则不会删除项目</td></tr><tr><td>item1,item2,itemX</td><td>可选。向数组添加的新项目。</td></tr></tbody></table><h3 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a>返回值</h3><p>返回包含被删除项目的新数组，如果有的话。</p><blockquote><p>请注意，splice() 方法与 slice() 方法的作用是不同的，splice() 方法会直接对数组进行修改。</p></blockquote><h2 id="push-pop-shift-unshift"><a href="#push-pop-shift-unshift" class="headerlink" title="push/pop/shift/unshift"></a>push/pop/shift/unshift</h2><table><thead><tr><th>方法</th><th>说明</th><th>返回值</th><th>是否改变原数组</th></tr></thead><tbody><tr><td>push</td><td>向数组的末尾添加一个或多个元素，</td><td>新的 length 属性值</td><td>是</td></tr><tr><td>pop</td><td>数组中删除最后一个元素</td><td>该元素的值(当数组为空时返回undefined)</td><td>是</td></tr><tr><td>shift</td><td>从数组中删除第一个元素</td><td>该元素的值(当数组为空时返回undefined)</td><td>是</td></tr><tr><td>unshift</td><td>将一个或多个元素添加到数组的开头</td><td>新的 length 属性值</td><td>是</td></tr></tbody></table><h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h2><ul><li>用于颠倒数组中元素的顺序。</li><li>该方法会直接修改原数组，而不会创建新数组。</li></ul><h2 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h2><ul><li>用于对数组的元素进行排序。</li><li>该排序直接修改原数组，不生成副本。 </li><li>该方法接受一个可选参数，若未使用参数，将按字母顺序对数组元素进行排序，说得更精确点，是按照字符编码的顺序进行排序。要实现这一点，首先应把数组的元素都转换成字符串（如有必要），以便进行比较。</li><li>如果想按照其他标准进行排序，就需要提供比较函数，该函数要比较两个值，然后返回一个用于说明这两个值的相对顺序的数字。比较函数应该具有两个参数 a 和 b，其返回值如下：<ul><li>如果 compareFunction(a, b) 小于 0 ，那么 a 会被排列到 b 之前；</li><li>如果 compareFunction(a, b) 等于 0 ， a 和 b 的相对位置不变。备注： ECMAScript 标准并不保证这一行为，而且也不是所有浏览器都会遵守（例如 Mozilla如果 compareFunction(a, b) 大于 0 ， b 会被排列到 a 之前。 在 2003 年之前的版本）；</li><li>如果 compareFunction(a, b) 大于 0 ， b 会被排列到 a 之前。</li><li>compareFunction(a, b) 必须总是对相同的输入返回相同的比较结果，否则排序的结果将是不确定的。</li></ul></li></ul><p>要比较数字而非字符串，比较函数可以简单的以 a 减 b，如下的函数将会将数组升序排列<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compareNumbers</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a - b; <span class="comment">// 由小到大</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="String类型常用原生方法"><a href="#String类型常用原生方法" class="headerlink" title="String类型常用原生方法"></a>String类型常用原生方法</h2><ul><li>concat()</li><li>slice()  </li><li>substring()</li><li>substr() </li><li>split()</li></ul><table><thead><tr><th>方法</th><th>说明</th><th>返回对象</th></tr></thead><tbody><tr><td>concat</td><td>连接字符串</td><td>新的字符串（字符串连接，实际情况中用+号更加方便）</td></tr><tr><td>slice</td><td>分割提取字符串</td><td>新的字符串</td></tr><tr><td>substring</td><td>分割提取字符串</td><td>新的字符串</td></tr><tr><td>substr</td><td>分割提取字符串</td><td>新的字符串</td></tr><tr><td>split</td><td>分割成字符串数组</td><td>一个字符串数组</td></tr></tbody></table><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">''</span>hello world;</span><br></pre></td></tr></table></figure><table><thead><tr><th>只有一个参数(正值)</th><th>返回值</th><th>说明</th></tr></thead><tbody><tr><td>str.slice(3)</td><td>// lo world</td><td>返回从位置3到原字符串结尾的字符串</td></tr><tr><td>str.substring(3)</td><td>同上</td><td>同上</td></tr><tr><td>str.substr(3)</td><td>同上</td><td>同上</td></tr></tbody></table><table><thead><tr><th>只有一个参数(负值)</th><th>返回值</th><th>说明</th></tr></thead><tbody><tr><td>str.slice(-3)</td><td>// rld</td><td>将负值加上数组长度 等同于str.splice(8)</td></tr><tr><td>str.substring(-3)</td><td>// hello world</td><td>不接受负参数 等同于 str.substring(0)</td></tr><tr><td>str.substr(-3)</td><td>// rld</td><td>将第一个负值加上数组长度 等同于str.substr(8)</td></tr></tbody></table><table><thead><tr><th>两个参数</th><th>返回值</th><th>说明</th></tr></thead><tbody><tr><td>str.slice(3,7)</td><td>// lo w</td><td>返回原字符串从位置3到7（包括3但是不包括7）之间的字符串</td></tr><tr><td>str.substring(3,7)</td><td>// lo w</td><td>返回原字符串从位置3到7（包括3但是不包括7）之间的字符串</td></tr><tr><td>str.substr(3,7)</td><td>// lo worl</td><td>第二个参数代表返回的字符串个数为7个</td></tr></tbody></table><table><thead><tr><th>两个参数</th><th>返回值</th><th>说明</th></tr></thead><tbody><tr><td>str.slice(3,2)</td><td>空</td><td>都为正值的情况下，第二个参数小于第一个参数即结束位置小于开始位置 无返回值</td></tr><tr><td>str.substring(3,2)</td><td>// l</td><td>开始位置小于结束位置，将自动调整为 str.substring(2,3)</td></tr><tr><td>str.substr(3,2)</td><td>// lo</td><td>第二个参数代表返回的字符串个数为2个</td></tr></tbody></table><table><thead><tr><th>两个参数</th><th>返回值</th><th>说明</th></tr></thead><tbody><tr><td>str.slice(3,-4)</td><td>// lo w</td><td>将负值加上数组长度 等同于substr(3,7)</td></tr><tr><td>str.substring(3,-4)</td><td>// hel</td><td>不接受负参数 等同于 str.substring(3,0) 开始位置小于结束位置，将自动调整为 str.substring(0,3)</td></tr><tr><td>str.substr(3,-4)</td><td>无</td><td>第二个参数不接受负参数 代表返回的字符串个数为0个</td></tr></tbody></table><table><thead><tr><th>两个参数</th><th>返回值</th><th>说明</th></tr></thead><tbody><tr><td>str.slice(-4,-3)</td><td>// o</td><td>将负值加上数组长度 等同于substr(7,8)</td></tr><tr><td>str.substring(-4,-3)</td><td>无</td><td>不接受负参数 等同于 str.substring(0,0)</td></tr><tr><td>str.substr(-4,-3)</td><td>无</td><td>第二个参数不接受负参数 代表返回的字符串个数为0个</td></tr></tbody></table><h2 id="split-方法"><a href="#split-方法" class="headerlink" title="split() 方法"></a>split() 方法</h2><p>split() 方法使用指定的分隔符字符串将一个String对象分割成字符串数组，以将字符串分隔为子字符串，以确定每个拆分的位置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.split([separator[, limit]])</span><br></pre></td></tr></table></figure><h4 id="separator-1"><a href="#separator-1" class="headerlink" title="separator"></a>separator</h4><p>指定表示每个拆分应发生的点的字符串。separator 可以是一个字符串或正则表达式。 如果纯文本分隔符包含多个字符，则必须找到整个字符串来表示分割点。如果在str中省略或不出现分隔符，则返回的数组包含一个由整个字符串组成的元素。如果分隔符为空字符串，则将str原字符串中每个字符的数组形式返回。</p><h4 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h4><p>一个整数，限定返回的分割片段数量。当提供此参数时，split 方法会在指定分隔符的每次出现时分割该字符串，但在限制条目已放入数组时停止。如果在达到指定限制之前达到字符串的末尾，它可能仍然包含少于限制的条目。新数组中不返回剩下的文本。</p><h2 id="split-实例"><a href="#split-实例" class="headerlink" title="split()实例"></a>split()实例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colorText = <span class="string">"color:white,red,\\xx\\y"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(colorText.split(<span class="regexp">/[\\]+/</span>));  <span class="comment">// ["color:white,red,", "xx", "y"]</span></span><br><span class="line"><span class="built_in">console</span>.log(colorText.split(<span class="regexp">/[^\,]+/</span>)); <span class="comment">// ["", ",", ",", ""]</span></span><br><span class="line"><span class="built_in">console</span>.log(colorText.split(<span class="string">','</span>,<span class="number">2</span>)); <span class="comment">// ["color:white", "red"]</span></span><br></pre></td></tr></table></figure><blockquote><h3 id="已知有字符串foo-”get-element-by-id”-写一个function将其转化成驼峰表示法”getElementById”"><a href="#已知有字符串foo-”get-element-by-id”-写一个function将其转化成驼峰表示法”getElementById”" class="headerlink" title="已知有字符串foo=”get-element-by-id”,写一个function将其转化成驼峰表示法”getElementById”"></a>已知有字符串foo=”get-element-by-id”,写一个function将其转化成驼峰表示法”getElementById”</h3></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">combo</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = msg.split(<span class="string">"-"</span>);</span><br><span class="line">    <span class="keyword">var</span> len = arr.length;    <span class="comment">//将arr.length存储在一个局部变量可以提高for循环效率</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">        arr[i] = arr[i].charAt(<span class="number">0</span>).toUpperCase() + arr[i].substr(<span class="number">1</span>, arr[i].length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    msg = arr.join(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法二</span></span><br><span class="line">foo.replace(<span class="regexp">/\-[a-z]/g</span>,<span class="function"><span class="keyword">function</span>(<span class="params">match</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> match.substring(<span class="number">1</span>).toUpperCase()    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Date类型"><a href="#Date类型" class="headerlink" title="Date类型"></a>Date类型</h2><p>  Date类型使用UTC（国际协调时间）1970年1月1日午夜（零时)开始经过的毫秒数来保存日期<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">// 无参数下 Date对象返回当前的日期和时间</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(value); <span class="comment">// 代表自1970年1月1日00:00:00 (世界标准时间) 起经过的毫秒数。</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(dateString); <span class="comment">//表示日期的字符串值。该字符串应该能被 Date.parse() 方法识别</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(year, month[, day[, hour[, minutes[, seconds[, milliseconds]]]]]); <span class="comment">//代表月份的整数值从0（1月）到11（12月）。</span></span><br></pre></td></tr></table></figure></p><h3 id="Date方法"><a href="#Date方法" class="headerlink" title="Date方法"></a>Date方法</h3><ul><li>Date.now()   返回自 1970-1-1 00:00:00  UTC (世界标准时间)至今所经过的毫秒数。</li><li>Date.parse() 解析一个表示日期的字符串，并返回从 1970-1-1 00:00:00 所经过的毫秒数。</li><li>Date.UTC() 接受和构造函数最长形式的参数相同的参数（从2到7），并返回从 1970-01-01 00:00:00 UTC 开始所经过的毫秒数。</li></ul><h3 id="Date-parse"><a href="#Date-parse" class="headerlink" title="Date.parse()"></a>Date.parse()</h3><p>Date.parse() 方法解析一个表示某个日期的字符串，并返回从1970-1-1 00:00:00 UTC 到该日期对象（该日期对象的UTC时间）的毫秒数，如果该字符串无法识别，或者一些情况下，包含了不合法的日期数值（如：2015-02-31），则返回值为NaN。</p><p>不推荐在ES5之前使用Date.parse方法，因为字符串的解析完全取决于实现。直到至今，不同宿主在如何解析日期字符串上仍存在许多差异，因此最好还是手动解析日期字符串（在需要适应不同格式时库能起到很大帮助）。     </p><h4 id="显式调用"><a href="#显式调用" class="headerlink" title="显式调用"></a>显式调用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Date</span>.parse(dateString)</span><br></pre></td></tr></table></figure><h4 id="隐式调用"><a href="#隐式调用" class="headerlink" title="隐式调用"></a>隐式调用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(dateString)</span><br></pre></td></tr></table></figure><h3 id="Date-UTC"><a href="#Date-UTC" class="headerlink" title="Date.UTC()"></a>Date.UTC()</h3><p>UTC 方法接受以逗号隔开的日期参数，返回1970-1-1 00:00:00 UTC到指定的日期之间的毫秒数。<br>你应该指定一个完整格式的年份，如 1998。如果年份被指定为 0 到 99 之间，则该方法会将年份转换为 20 世纪的一个年份（即 1990 + year），例如，指定为 95， 则年份为 1995。</p><p>如果有一个指定的参数超出其合理范围，则 UTC 方法会通过更新其他参数直到该参数在合理范围内。例如，为月份指定 15，则年份将会加 1，然后月份将会使用 3。</p><h2 id="时间倒计时实例"><a href="#时间倒计时实例" class="headerlink" title="时间倒计时实例"></a>时间倒计时实例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 移动端 new Date() 传入日期参数出来的时间会比当前的时间+8小时</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">var</span> featureTime = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2018/11/13 13:55:55+0800'</span>);</span><br><span class="line"><span class="keyword">var</span> nowTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> timeDiff = (featureTime.getTime() - nowTime.getTime()) / <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">var</span> d = <span class="built_in">parseInt</span>(timeDiff / <span class="number">86400</span>);  <span class="comment">// 一天24小时 一小时60分 一分钟60秒 合计86400 秒</span></span><br><span class="line"><span class="keyword">var</span> h = <span class="built_in">parseInt</span>((timeDiff % <span class="number">86400</span> ) / <span class="number">3600</span>) <span class="comment">// 剩余小时</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="built_in">parseInt</span>((timeDiff % <span class="number">86400</span> ) % <span class="number">3600</span> / <span class="number">60</span>) <span class="comment">//剩余分钟</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="built_in">parseInt</span>( timeDiff % <span class="number">60</span>) <span class="comment">//剩余秒</span></span><br><span class="line"><span class="built_in">console</span>.log(d + <span class="string">'天'</span> + h + <span class="string">'小时'</span> + m + <span class="string">'分钟'</span> + s + <span class="string">'秒'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 读【js高级程序】、【你不知道的js中】之后对js基本类型的总结&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://liuchao0704.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>你不知道的JS(中)强制类型转换</title>
    <link href="https://liuchao0704.github.io/2018/09/15/you-dont-know-js-middle2/"/>
    <id>https://liuchao0704.github.io/2018/09/15/you-dont-know-js-middle2/</id>
    <published>2018-09-15T14:02:20.000Z</published>
    <updated>2018-11-23T00:47:24.164Z</updated>
    
    <content type="html"><![CDATA[<p> 读【你不知道的js中】之后对js强制类型转换的总结</p><a id="more"></a><h2 id="4、强制类型转换"><a href="#4、强制类型转换" class="headerlink" title="4、强制类型转换"></a>4、强制类型转换</h2><h3 id="4-1值类型转换"><a href="#4-1值类型转换" class="headerlink" title="4.1值类型转换"></a>4.1值类型转换</h3><ul><li>类型转换（显式）</li><li>强制类型转换（隐式）<ul><li>隐式强制类型转换</li><li>显式强制类型转换</li></ul></li></ul><h3 id="4-2-抽象值操作"><a href="#4-2-抽象值操作" class="headerlink" title="4.2 抽象值操作"></a>4.2 抽象值操作</h3><h3 id="4-2-1-Tostring"><a href="#4-2-1-Tostring" class="headerlink" title="4.2.1 Tostring"></a>4.2.1 Tostring</h3><ul><li>null 转换为 “null”</li><li>undefined 转换为“undefined”</li><li>true 转换为“true” ，false转化为“false”</li><li>数字的字符串化遵循通用规则（极小或者极大的数字使用指数形式）</li><li>对普通对象，除非自定义，否则toString()（object.prototype.toString()）返回内部属性[[Class]]的值，如“[object oject]”。</li></ul><h4 id="JSON字符串化"><a href="#JSON字符串化" class="headerlink" title="JSON字符串化"></a>JSON字符串化</h4><p>工具函数JSON.stringify(…)在将JSON对象序列化为字符串时也用到了ToString。</p><ul><li>所有安全的值都可以使用JSON.stringify(…)字符串化</li><li>不安全的JSON值。undefined、function、symbol和包含循环引用（对象之间互相引用，形成一个无限循环）的对象都不符合JSON结构标准，其他支持JSON的语言无法处理他们。</li><li>JSON.stringify(…)在对象中遇到undefined、function、symbol对自动将其忽略，在数组中则会返回null(以保证单元位置不变)</li><li>我们可以向JSON.string(…)传递一个可选的参数replacer，它可以是数组或者函数。</li><li>如果replacer是一个数组，那么它必须是一个<em>字符串数组</em>，其中包含序列化要处理的对象的属性名称，除此之外其他的属性则被忽略。</li><li>如果replacer是一个函数，它会对<em>对象本身调用一次</em>，然后对对象中的每个属性各调用一次，每次传递的两个参数，键和值。如果要忽略某个键就返回undefined，否则返回指定的值。</li><li>JSON.stringif还有一个可选的参数space，用来指定输出的缩进格式。space为正整数时是指定每一级缩进的字符数，它还可以是字符串，此时最前面的十个字符被用于每一级的缩进。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">JSON</span>.stringify(<span class="number">42</span>); <span class="comment">// "42"</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify(<span class="string">"42"</span>); <span class="comment">// ""42""</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify(<span class="string">"42"</span>); <span class="comment">// ""42""</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify(<span class="literal">true</span>); <span class="comment">// "true"</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify(<span class="literal">undefined</span>); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify([<span class="number">1</span>,<span class="literal">undefined</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,<span class="number">4</span>]); <span class="comment">// "[1,null,null,4]"</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify(&#123;<span class="attr">a</span>:<span class="number">2</span>, <span class="attr">b</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;&#125;);<span class="comment">//&#123;"a":2&#125;</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> result = <span class="built_in">JSON</span>.stringify(someObj,<span class="function"><span class="keyword">function</span> (<span class="params">k,v</span>) </span>&#123; <span class="keyword">if</span>(k !== <span class="string">"c"</span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> v;</span><br><span class="line"> &#125;&#125;,<span class="string">'---'</span>);</span><br><span class="line"> <span class="built_in">console</span>.log(result);</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     ---"b": 42,</span></span><br><span class="line"><span class="comment">//     ---"d": &#123;</span></span><br><span class="line"><span class="comment">//     ------"a": 3</span></span><br><span class="line"><span class="comment">//     ---&#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-2-ToNumber"><a href="#4-2-2-ToNumber" class="headerlink" title="4.2.2 ToNumber"></a>4.2.2 ToNumber</h3><ul><li>true转化为1</li><li>false 转化为0</li><li>undefined 转化为NaN</li><li>null 转化为 0</li><li>对象（包括数组）会首先被转化为相应的基本类型值，如果返回的是非数字的基本类型值，再遵循以上规则将其转化为数字</li><li>检查该值是否有valueof()方法。如果有并且返回基本类型值，就使用该值进行强制类型转换。如果没有就使用toString()的返回值（如果存在）来进行强制类型的转换。</li></ul><h3 id="4-2-3-ToBoolean"><a href="#4-2-3-ToBoolean" class="headerlink" title="4.2.3 ToBoolean"></a>4.2.3 ToBoolean</h3><p>假值</p><ul><li>undefined</li><li>null</li><li>false</li><li>+0 、-0和NaN</li><li>“”</li></ul><p>真值</p><ul><li>[]</li><li>{}</li><li>function(){}</li><li>…. 除了假值列表以外的都是真值</li></ul><h3 id="4-3显示强制类型转换"><a href="#4-3显示强制类型转换" class="headerlink" title="4.3显示强制类型转换"></a>4.3显示强制类型转换</h3><h3 id="4-3-1字符串和数字之间的显式转换"><a href="#4-3-1字符串和数字之间的显式转换" class="headerlink" title="4.3.1字符串和数字之间的显式转换"></a>4.3.1字符串和数字之间的显式转换</h3><ul><li>string(42)</li><li>Number(“3.14”)</li><li>42.toString()</li><li>一元加操作符(显示的将操作数显示强制类型转化为数字)</li><li>+new Date() (获取当前时间戳)</li></ul><h3 id="4-3-2-显示解析数字字符串"><a href="#4-3-2-显示解析数字字符串" class="headerlink" title="4.3.2 显示解析数字字符串"></a>4.3.2 显示解析数字字符串</h3><ul><li>parseInt 针对的是字符串</li><li>第二个参数来指定转换的基数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="number">0.000008</span>);<span class="comment">//0</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">0.000000008</span>);</span><br><span class="line"><span class="comment">// 8 "8e-7"</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="literal">false</span> ,<span class="number">16</span>);</span><br><span class="line"><span class="comment">// 250 "fa" 15*16^1 + 10*16^0 = 250</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="built_in">parseInt</span>,<span class="number">16</span>);</span><br><span class="line"><span class="comment">// 15 "f" 15*16^0 = 15</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"0x10"</span>);</span><br><span class="line"><span class="comment">// 16  1*16^1 + 0*16^0 = 16</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"103"</span>,<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 2   1*2^1 + 0*2^0 = 2</span></span><br></pre></td></tr></table></figure><h3 id="4-3-3-显式转化为布尔值"><a href="#4-3-3-显式转化为布尔值" class="headerlink" title="4.3.3 显式转化为布尔值"></a>4.3.3 显式转化为布尔值</h3><ul><li>Boolean()是显式的ToBoolean强制类型转换</li><li>一元运算符!显式的将强制类型转换为Boolean。但是它同时还将真值反转为假值(或者将假值反转为真值)。!!将反转的值再次转换过来。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">"0"</span>;</span><br><span class="line"><span class="keyword">var</span> b = [];</span><br><span class="line"><span class="keyword">var</span> c = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">var</span> e = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> f = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> g;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(a)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(b)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(c)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(d)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(e)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(f)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(g)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(!!a);</span><br><span class="line"><span class="built_in">console</span>.log(!!b);</span><br><span class="line"><span class="built_in">console</span>.log(!!c);</span><br><span class="line"><span class="built_in">console</span>.log(!!d);</span><br><span class="line"><span class="built_in">console</span>.log(!!e);</span><br><span class="line"><span class="built_in">console</span>.log(!!f);</span><br><span class="line"><span class="built_in">console</span>.log(!!g);</span><br></pre></td></tr></table></figure><h3 id="4-4-隐式强制类型转换"><a href="#4-4-隐式强制类型转换" class="headerlink" title="4.4 隐式强制类型转换"></a>4.4 隐式强制类型转换</h3><ul><li><em>隐式强制类型转换</em>指的是那些隐蔽的强制类型转换，副作用也不是很明显</li><li>隐式强制类型转换的作用是减少冗余，让代码更简洁</li></ul><h3 id="4-4-2-字符串和数字之间的隐式强制类型转换"><a href="#4-4-2-字符串和数字之间的隐式强制类型转换" class="headerlink" title="4.4.2 字符串和数字之间的隐式强制类型转换"></a>4.4.2 字符串和数字之间的隐式强制类型转换</h3><p>+ 运算符的其中一个操作数是字符串(或者通过以上步骤可以得到字符串)，则执行字符串拼接；否则执行数字加法。</p><h3 id="4-4-4-隐式强制类型转换为布尔值"><a href="#4-4-4-隐式强制类型转换为布尔值" class="headerlink" title="4.4.4 隐式强制类型转换为布尔值"></a>4.4.4 隐式强制类型转换为布尔值</h3><ol><li>if (…) 语句中的条件判断表达式</li><li>for (..;..;..;) 语句中的条件判断表达式(第二个)</li><li>while (..) 和do..while (..) 循环中的条件判断表达式</li><li>?:中的条件判断表达式</li><li>逻辑运算符| |(逻辑或)和 &amp;&amp; (逻辑与)左边的操作数(作为条件判断表达式)</li></ol><h3 id="4-4-5-和-amp-amp"><a href="#4-4-5-和-amp-amp" class="headerlink" title="4.4.5 || 和 &amp;&amp;"></a>4.4.5 || 和 &amp;&amp;</h3><ul><li>逻辑运算符又称“选择器运算符”或者“操作数选择器运算符”</li><li>并非返回布尔值，而是返回两个操作数中的一个(且仅一个)</li><li>|| 和 &amp;&amp; 首先会对<em>第一个操作数</em>执行条件判断，如果不是布尔值，就先进行ToBoolean强制类型转换。然后再执行条件判断。</li><li>对于||来说，如果条件判断结果为true就返回第一个操作数的值，如果false就返回第二个操作数的值。</li><li>对于&amp;&amp; 来说，如果条件判断结果为true就返回第二个操作数的值，如果false就返回第一个操作数的值。</li></ul><h3 id="4-5-宽松相等和严格相等"><a href="#4-5-宽松相等和严格相等" class="headerlink" title="4.5 宽松相等和严格相等"></a>4.5 宽松相等和严格相等</h3><p>正确解释 == 允许在相等比较中进行强制类型转换，而 === 不允许</p><h4 id="字符串和数字之间的相等比较"><a href="#字符串和数字之间的相等比较" class="headerlink" title="字符串和数字之间的相等比较"></a>字符串和数字之间的相等比较</h4><ol><li>如果Type(x)是数字，Type(y)是字符串，则返回 x == ToNumber(y)的结果</li><li>如果Type(x)是字符串，Type(y)是数字，则返回 ToNumber(x ) == y的结果</li></ol><h4 id="其他类型和布尔值类型之间"><a href="#其他类型和布尔值类型之间" class="headerlink" title="其他类型和布尔值类型之间"></a>其他类型和布尔值类型之间</h4><ol><li>如果Type(x)是布尔类型，则返回 ToNumber(x) == y的结果</li><li>如果Type(y)是布尔类型，则返回 ToNumber(y) == x的结果</li></ol><blockquote><p> 建议无论什么情况你下都不要使用 == true 和 == false</p></blockquote><h4 id="null和undefined之间的相等比较"><a href="#null和undefined之间的相等比较" class="headerlink" title="null和undefined之间的相等比较"></a>null和undefined之间的相等比较</h4><ol><li>如果x为null，y为undefined，则结果为true。</li><li>如果x为undefined，y为null，则结果为true。</li></ol><h4 id="对象和非对象之间的相等比较"><a href="#对象和非对象之间的相等比较" class="headerlink" title="对象和非对象之间的相等比较"></a>对象和非对象之间的相等比较</h4><ol><li>如果Type(x)是字符串或者数字，Type(y)是对象，则返回x == Toprimitive(y)的结果</li><li>如果Type(x)是对象，Type(y)是字符串或者数字，则返回y == Toprimitive(x)的结果</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">Object</span>(a); <span class="comment">// 和new String(a)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a === b); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(a == b); <span class="comment">//true  拆封-打开封装对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> d = <span class="built_in">Object</span>(c);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(c == d);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> e = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">var</span> f = <span class="built_in">Object</span>(e);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(e == f);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g = <span class="literal">NaN</span>;</span><br><span class="line"><span class="keyword">var</span> h = <span class="built_in">Object</span>(g);</span><br><span class="line"><span class="built_in">console</span>.log(g == h);<span class="comment">//false NaN 不等于 NaN</span></span><br></pre></td></tr></table></figure><p>因为没有对应的封装对象，所以null和undefined不能够被封装(boxed)，object(null)和object()均返回一个常规对象。</p><h4 id="极端情况"><a href="#极端情况" class="headerlink" title="极端情况"></a>极端情况</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[] ==![]</span><br></pre></td></tr></table></figure><ol><li>Boolean([])结果为true</li><li>!是一元运算符，会进行布尔值的显示强制类型转换，同时反转奇偶校验位</li><li>[] == false</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 读【你不知道的js中】之后对js强制类型转换的总结&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://liuchao0704.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>5、内联元素与流</title>
    <link href="https://liuchao0704.github.io/2018/05/07/cssworld03/"/>
    <id>https://liuchao0704.github.io/2018/05/07/cssworld03/</id>
    <published>2018-05-07T05:18:55.000Z</published>
    <updated>2018-11-14T01:50:18.176Z</updated>
    
    <content type="html"><![CDATA[<p>line-height相关知识。<br><a id="more"></a></p><h2 id="5-1-字母x–CSS世界中隐匿的举足轻重的角色"><a href="#5-1-字母x–CSS世界中隐匿的举足轻重的角色" class="headerlink" title="5.1 字母x–CSS世界中隐匿的举足轻重的角色"></a>5.1 字母x–CSS世界中隐匿的举足轻重的角色</h2><h3 id="5-1-1-字母x与CSS世界的基线"><a href="#5-1-1-字母x与CSS世界的基线" class="headerlink" title="5.1.1 字母x与CSS世界的基线"></a>5.1.1 字母x与CSS世界的基线</h3><p>字母x的下边缘是css世界的基线</p><h3 id="5-1-2-字母x与CSS中x-height"><a href="#5-1-2-字母x与CSS中x-height" class="headerlink" title="5.1.2 字母x与CSS中x-height"></a>5.1.2 字母x与CSS中x-height</h3><ul><li>x-height: 小写字母x的高度也就是ex。ex是css中的一个相对单位。</li><li><code>vertical-align:middle</code> middle是指基线往上1/2处x-height的高度。可以近似理解x交叉点的位置。</li></ul><h2 id="5-2-内联元素的基石"><a href="#5-2-内联元素的基石" class="headerlink" title="5.2 内联元素的基石"></a>5.2 内联元素的基石</h2><h3 id="5-2-1-内联元素的高度之本-————-line-height"><a href="#5-2-1-内联元素的高度之本-————-line-height" class="headerlink" title="5.2.1 内联元素的高度之本 ———— line-height"></a>5.2.1 内联元素的高度之本 ———— line-height</h3><ul><li>line-height决定非替换元素的纯内联元素的可视高度。 </li><li>内联元素的高度由固定高度和不固定的高度组成，这个不固定的高度就是指“行距”。</li><li>css中“行距”分散在当前文字的上方和下方，也就是第一行文字，其上方也是有“行距”的，不过高度是“行距”的一半，也叫做半“行距”。</li><li>行距 = line-height - font-size</li><li>对于替换元素来说line-height改变不了其高度</li><li>对于块级元素，line-height对其本身没有任何作用，我们改变line-height，块级元素的高度跟着变化实际上是通过改变块级元素里面的内联级别元素占据的高度实现的。</li></ul><h3 id="5-2-2-为什么line-height可以让内联元素“垂直居中”"><a href="#5-2-2-为什么line-height可以让内联元素“垂直居中”" class="headerlink" title="5.2.2 为什么line-height可以让内联元素“垂直居中”"></a>5.2.2 为什么line-height可以让内联元素“垂直居中”</h3><p>line-height 设置的垂直居中，并不是真正意义上的垂直居中而是近似“垂直居中”</p><ul><li>回答为何可以“垂直居中”，行高可以实现“垂直居中”原因在于css中“行距上下等分机制”</li><li>“近似”是因为文字字形的垂直中线位置普遍要比真正的“行框盒子”的垂直中线位置低</li></ul><p>实现多行文本或者替换元素的垂直居中需要line-height和vertical-align共同设置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="undefined">    width: 200px;</span></span><br><span class="line"><span class="undefined">    line-height: 120px;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#f0f0f9</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="undefined">    display: inline-block;</span></span><br><span class="line"><span class="undefined">    line-height: 20px;</span></span><br><span class="line"><span class="undefined">    margin: 0 20px;</span></span><br><span class="line"><span class="undefined">    vertical-align: middle;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>基于行高实现的。。。基于行高实现的。。。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>多行文字使用一个标签包裹，然后设置display为inline-block。可以重置外部的line-height，还可以设置vertical-align属性，以及产生一个关键的“行框盒子”。由于每个“行框盒子”都会附带的产物——“幽灵空白节点”，有了这个节点，我们的line-height:120px就有了作用对象</li><li>因为内联元素默认都是基线对齐的，所以对.content元素设置vertical-align:middle来调整多行文本的垂直位置。</li></ul><h3 id="5-2-3深入line-height的各类属性值"><a href="#5-2-3深入line-height的各类属性值" class="headerlink" title="5.2.3深入line-height的各类属性值"></a>5.2.3深入line-height的各类属性值</h3><p>line-height 的默认值是normal，还支持数值，百分比值以及长度值。</p><ul><li>数值 line-height:1.5，最终计算值 1.5*14px = 21px。</li><li>百分比值  line-height:150% ，最终计算值 150%*14px = 21px。</li><li>长度值 line-height:21px ，line-height:1.5em 最终计算值 1.5*14px = 21px。</li></ul><p>如果line-height使用数值作为属性值，则所有子元素都是继承这个值。但是如果用百分比或者长度值作为属性值，那么所有子元素继承的都是最终的计算值。</p><h3 id="5-2-4-内联元素line-height的“大值特性”"><a href="#5-2-4-内联元素line-height的“大值特性”" class="headerlink" title="5.2.4 内联元素line-height的“大值特性”"></a>5.2.4 内联元素line-height的“大值特性”</h3><p>无论内联元素元素line-height如何设置，最终父级元素的高度都是由数值大的那个line-height决定的，内联元素line-height的“大值特性”<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div class="box"&gt;</span><br><span class="line">      &lt;span class="content"&gt;基于行高实现的&lt;/span&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line"> &lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">     <span class="selector-class">.box</span> &#123;</span><br><span class="line">     <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">     <span class="attribute">line-height</span>: <span class="number">120px</span>;</span><br><span class="line">     <span class="attribute">background-color</span>: <span class="number">#f0f0f9</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="selector-class">.content</span> &#123;</span><br><span class="line">     <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">     <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">     <span class="selector-class">.box</span> &#123;</span><br><span class="line">     <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">     <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">     <span class="attribute">background-color</span>: <span class="number">#f0f0f9</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="selector-class">.content</span> &#123;</span><br><span class="line">     <span class="attribute">line-height</span>: <span class="number">120px</span>;</span><br><span class="line">     <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><h2 id="5-3-line-height的好朋友vertical-align"><a href="#5-3-line-height的好朋友vertical-align" class="headerlink" title="5.3 line-height的好朋友vertical-align"></a>5.3 line-height的好朋友vertical-align</h2><h3 id="5-3-2-vertical-align作用的前提"><a href="#5-3-2-vertical-align作用的前提" class="headerlink" title="5.3.2 vertical-align作用的前提"></a>5.3.2 vertical-align作用的前提</h3><p>vertical-align作用的前提是只能应用于内联元素以及display值为table-cell的元素。浮动和绝对定位会让元素块状化。</p><h3 id="vertical-align-middle-与近似垂直居中"><a href="#vertical-align-middle-与近似垂直居中" class="headerlink" title="vertical-align:middle 与近似垂直居中"></a>vertical-align:middle 与近似垂直居中</h3><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/css/cssworld/verticalalignmiddle.jpg" alt=""></p><ul><li>父级line-height的值设置了空白幽灵节点的高度</li><li>line-height使得x近似垂直居中</li><li>子级vertical-align:middle使图片的垂直中心和x的1/2x-height靠近。随着字体的设置，x字符的中心点其实是靠下的。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;line-height相关知识。&lt;br&gt;
    
    </summary>
    
    
      <category term="css" scheme="https://liuchao0704.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>4、盒尺寸四大家族</title>
    <link href="https://liuchao0704.github.io/2018/05/06/cssworld02/"/>
    <id>https://liuchao0704.github.io/2018/05/06/cssworld02/</id>
    <published>2018-05-06T05:18:37.000Z</published>
    <updated>2018-11-14T01:18:45.800Z</updated>
    
    <content type="html"><![CDATA[<p>了解content/padding/margin</p><a id="more"></a><h2 id="4-1-深入理解content"><a href="#4-1-深入理解content" class="headerlink" title="4.1 深入理解content"></a>4.1 深入理解content</h2><h3 id="4-1-1-contnet-与替换元素"><a href="#4-1-1-contnet-与替换元素" class="headerlink" title="4.1.1 contnet 与替换元素"></a>4.1.1 contnet 与替换元素</h3><h3 id="什么是替换元素"><a href="#什么是替换元素" class="headerlink" title="什么是替换元素"></a>什么是替换元素</h3><p>通过修改某个属性值呈现的内容就可以被替换的元素就称为“替换元素”。典型的替换元素 <code>&lt;img&gt;</code>,<code>&lt;object&gt;</code>,<code>video</code>,<code>&lt;iframe&gt;</code>,<code>&lt;textarea&gt;</code>,<code>&lt;input&gt;</code></p><ul><li>内容外观不受页面上的css的影响</li><li>有自己的尺寸</li><li>在很多css属性上有自己的一套表现规则</li></ul><h3 id="替换元素的默认的display值"><a href="#替换元素的默认的display值" class="headerlink" title="替换元素的默认的display值"></a>替换元素的默认的display值</h3><p>所有的替换元素都是内联水平元素。替换元素的display值对于其尺寸计算规则无影响。</p><h3 id="替换元素的尺寸计算规则"><a href="#替换元素的尺寸计算规则" class="headerlink" title="替换元素的尺寸计算规则"></a>替换元素的尺寸计算规则</h3><p>替换元素的尺寸：固有尺寸、HTML尺寸、CSS尺寸</p><ul><li>如果没有CSS尺寸和HTML尺寸则使用固有尺寸作为最终的宽高</li><li>如果没有CSS尺寸则使用HTML尺寸</li><li>如果存在CSS尺寸，则最终尺寸由CSS属性决定</li><li>如果“固有尺寸”含有固有的宽高比例，同时仅设置了宽度或者仅设置了高度，则元素依然按照固有的宽高比例显示。</li><li>如果上面的条件都不符合，则最终宽度表现为300像素，高度为150像素。宽高比2:1。</li><li>内联替换元素和块级替换元素使用上面同一套尺寸计算规则。</li></ul><h3 id="替换元素和非替换元素的距离"><a href="#替换元素和非替换元素的距离" class="headerlink" title="替换元素和非替换元素的距离"></a>替换元素和非替换元素的距离</h3><ul><li>替换元素如img去掉src属性则是普通非替换元素。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">img &#123;</span></span><br><span class="line"><span class="undefined">display: block;</span></span><br><span class="line"><span class="css"><span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#eee</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- alt为任意值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"1"</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 此时img的宽度100%自适应父级容器  </p><ul><li>非替换元素和替换元素只隔了一个CSScontent属性</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">h1 &#123;</span><br><span class="line">content: url(../th.jpg);</span><br><span class="line">width: 50px;</span><br><span class="line">height:50px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">&lt;!-- 普通元素content --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 此时h1就是一个50*50的图片</p><h2 id="4-2-温和的padding属性"><a href="#4-2-温和的padding属性" class="headerlink" title="4.2 温和的padding属性"></a>4.2 温和的padding属性</h2><h3 id="4-2-1-padding与元素尺寸"><a href="#4-2-1-padding与元素尺寸" class="headerlink" title="4.2.1 padding与元素尺寸"></a>4.2.1 padding与元素尺寸</h3><p>内联元素的padding在垂直方向同样会影响布局。垂直方向会发生层叠。利用这一特点可以优雅的增加点击区域同时对现有布局无任何影响。</p><h3 id="4-2-2-padding的百分比值"><a href="#4-2-2-padding的百分比值" class="headerlink" title="4.2.2 padding的百分比值"></a>4.2.2 padding的百分比值</h3><p>padding百分比值无论是水平方向还是垂直方向均是相对于宽度来计算。 实际使用实例可以做自适应的等比矩形。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.img-wrapper</span> &#123;</span></span><br><span class="line"><span class="undefined">        position: relative;</span></span><br><span class="line"><span class="undefined">        padding: 50%; //实现正方形</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.img-wrapper</span> &gt; <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">        width: 100%;</span></span><br><span class="line"><span class="undefined">        height: 100%;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">left</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">top</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"img-wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../th.jpg"</span> <span class="attr">alt</span>=<span class="string">"1"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>内联元素的padding</p><ul><li>padding相对宽度计算</li><li>默认的高度的宽度细节有差异</li><li>padding 会断行</li></ul><h2 id="4-3-激进的margin属性"><a href="#4-3-激进的margin属性" class="headerlink" title="4.3 激进的margin属性"></a>4.3 激进的margin属性</h2><h3 id="4-3-1-margin与元素尺寸以及相关布局"><a href="#4-3-1-margin与元素尺寸以及相关布局" class="headerlink" title="4.3.1 margin与元素尺寸以及相关布局"></a>4.3.1 margin与元素尺寸以及相关布局</h3><ol><li>margin 与元素的内部尺寸</li></ol><p>marign改变元素的可视尺寸与padding相反。对于paddding，元素设定了width属性或者保持<strong>包裹性</strong>的时候，会改变元素可视尺寸。而margin则无视之，只有当元素是“充分利用可用空间”状态的时候，margin才可以改变元素的可视尺寸。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">padding</span><span class="selector-pseudo">:0</span> 10<span class="selector-tag">px</span> ;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="undefined">margin: 0 -10px;</span></span><br><span class="line"><span class="undefined">line-height: 20px;</span></span><br><span class="line"><span class="undefined">text-align: center;</span></span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span>:<span class="selector-id">#e1e1e1</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- marigin 改变子级宽度 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"father"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"son"</span>&gt;</span>barfoo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-3-4-深入理解CSS中的margin-auto"><a href="#4-3-4-深入理解CSS中的margin-auto" class="headerlink" title="4.3.4 深入理解CSS中的margin:auto"></a>4.3.4 深入理解CSS中的margin:auto</h3><p>触发<code>margin:auto</code>计算有个前提条件就是width或者height为auto时，元素是具有对应方向的自动填充特性。(比如块状元素的width默认100%继承父级，绝对定位元素的格式化宽度和高度)<br><code>marigin:auto</code>的填充规则  </p><ol><li>如果一侧定值,一侧auto,则auto为剩余空间。</li><li>如果两侧均是auto,则平分剩余空间。 </li></ol><p>针对第一条可以实现<strong>块状元素</strong>的左右对齐(而不是只有通过<code>float:left/right</code>)</p><h2 id="例子（利用content生成伪元素以及margin-auto实现常见布局）"><a href="#例子（利用content生成伪元素以及margin-auto实现常见布局）" class="headerlink" title="例子（利用content生成伪元素以及margin:auto实现常见布局）"></a>例子（利用content生成伪元素以及margin:auto实现常见布局）</h2><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/css/cssworld/cssworld1.png" alt=""><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.home-icon-item</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">        display: inline-block;</span></span><br><span class="line"><span class="undefined">        content: '';</span></span><br><span class="line"><span class="undefined">        width: 50px;</span></span><br><span class="line"><span class="undefined">        height: 50px;</span></span><br><span class="line"><span class="undefined">        left: 0;</span></span><br><span class="line"><span class="undefined">        top: 0;</span></span><br><span class="line"><span class="undefined">        right: 0;</span></span><br><span class="line"><span class="undefined">        bottom: 0;</span></span><br><span class="line"><span class="undefined">        margin: auto;</span></span><br><span class="line"><span class="undefined">        border-radius: 50%;</span></span><br><span class="line"><span class="undefined">        z-index: -1;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"> </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>    </span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"home-icon-wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"home-icon-item"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>培训<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"home-icon-item"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>会议<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"home-icon-item"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>学员服务<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"home-icon-item"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"iconfont"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>资料下载<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="4-4功勋卓越的border属性"><a href="#4-4功勋卓越的border属性" class="headerlink" title="4.4功勋卓越的border属性"></a>4.4功勋卓越的border属性</h2><h3 id="4-4-3-border-color和color"><a href="#4-4-3-border-color和color" class="headerlink" title="4.4.3 border-color和color"></a>4.4.3 border-color和color</h3><p>border-color 有一个很重要也很实用的特性，就是“border-color默认颜色就是color色值”。根据这个特性可以做个简单的边框hover变色实例。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.border</span> &#123;</span></span><br><span class="line"><span class="undefined">        position: relative; </span></span><br><span class="line"><span class="undefined">        width: 80px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">height</span><span class="selector-pseudo">:80px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">border</span><span class="selector-pseudo">:2px</span> <span class="selector-tag">dashed</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#e3e3e3</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.border</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.border</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">        display: block;</span></span><br><span class="line"><span class="undefined">        content: '';</span></span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="undefined">        height: 40px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">border-top</span><span class="selector-pseudo">:6px</span> <span class="selector-tag">solid</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">top</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">left</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="undefined">        margin-top: -3px;</span></span><br><span class="line"><span class="undefined">        margin-left: -20px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.border</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">        display: block;</span></span><br><span class="line"><span class="undefined">        content: '';</span></span><br><span class="line"><span class="css">        <span class="selector-tag">width</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="undefined">        height: 40px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">top</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">left</span><span class="selector-pseudo">:40px</span>;</span></span><br><span class="line"><span class="undefined">        margin-top: -20px;</span></span><br><span class="line"><span class="undefined">        margin-left: -3px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">border-left</span><span class="selector-pseudo">:6px</span> <span class="selector-tag">solid</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- border属性缺省 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="例子（利用border和margin实现等分布局）"><a href="#例子（利用border和margin实现等分布局）" class="headerlink" title="例子（利用border和margin实现等分布局）"></a>例子（利用border和margin实现等分布局）</h2><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/css/cssworld/margin1.png" alt=""></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.bg</span> &#123;</span></span><br><span class="line"><span class="undefined">        padding: 15px  30px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#e1e1e1</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.ul-wrapper</span> &#123;</span></span><br><span class="line"><span class="undefined">        padding-left: 0;</span></span><br><span class="line"><span class="undefined">        margin-right: -15px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.ul-wrapper</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="undefined">        display: block;</span></span><br><span class="line"><span class="undefined">        content: '';</span></span><br><span class="line"><span class="undefined">        clear: both;</span></span><br><span class="line"><span class="undefined">    &#125; </span></span><br><span class="line"><span class="css">   <span class="selector-class">.li-item</span> &#123;</span></span><br><span class="line"><span class="undefined">       float: left;</span></span><br><span class="line"><span class="css">       <span class="selector-tag">width</span><span class="selector-pseudo">:25</span>% ;</span></span><br><span class="line"><span class="undefined">       box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">       border-right: 15px solid transparent;</span></span><br><span class="line"><span class="css">       <span class="selector-tag">list-style-type</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css">       <span class="selector-tag">background-color</span>:  <span class="selector-id">#8BC34A</span>;</span></span><br><span class="line"><span class="undefined">       background-clip: content-box; //content-box可以减少嵌套</span></span><br><span class="line"><span class="undefined">       height: 150px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- margin 等分布局 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> &gt;</span>管理中心<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"ul-wrapper"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"li-item"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"li-item"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"li-item"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"li-item"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="两种等高布局"><a href="#两种等高布局" class="headerlink" title="两种等高布局"></a>两种等高布局</h2><ul><li>border</li><li>margin + padding</li></ul><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/css/cssworld/equalHeight1.png" alt=""></p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.border-box</span> &#123;</span></span><br><span class="line"><span class="undefined">    margin: 10px 0;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border-left</span><span class="selector-pseudo">:150px</span> <span class="selector-tag">solid</span> <span class="selector-id">#c7c7c7</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#f1f1f1</span>;</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="comment">/* 此处不能用overflow:hidden清除浮动否则左浮动的导航列表元素就会被隐藏掉 */</span></span></span><br><span class="line"><span class="css"><span class="selector-class">.border-box</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="undefined">    display: block;</span></span><br><span class="line"><span class="undefined">    content: '';</span></span><br><span class="line"><span class="undefined">    clear: both;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.border-box</span> &gt; <span class="selector-tag">nav</span> &#123;</span></span><br><span class="line"><span class="undefined">    width: 150px;</span></span><br><span class="line"><span class="undefined">    margin-left: -150px;</span></span><br><span class="line"><span class="undefined">    float: left;</span></span><br><span class="line"><span class="undefined">    text-align: center;</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- border等高布局--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"border-box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>导航1<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>导航2<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>模块1<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>模块2<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>模块3<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p> <img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/css/cssworld/equalHeight2.png" alt=""><br> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.margin-box</span> &#123;</span></span><br><span class="line"><span class="undefined">        overflow: hidden;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.column-left</span> ,<span class="selector-class">.column-right</span> &#123;</span></span><br><span class="line"><span class="undefined">        width: 50%;</span></span><br><span class="line"><span class="undefined">        float: left;</span></span><br><span class="line"><span class="undefined">        padding-bottom: 9999px;</span></span><br><span class="line"><span class="undefined">        margin-bottom: -9999px;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.column-left</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#c7c7c7</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.column-right</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#f1f1f1</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- margin + padding 等高布局 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"margin-box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column-left"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>导航1<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>导航2<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column-right"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>模块1<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;了解content/padding/margin&lt;/p&gt;
    
    </summary>
    
    
      <category term="css" scheme="https://liuchao0704.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>3、流、元素、基本尺寸</title>
    <link href="https://liuchao0704.github.io/2018/05/06/cssworld01/"/>
    <id>https://liuchao0704.github.io/2018/05/06/cssworld01/</id>
    <published>2018-05-06T05:18:25.000Z</published>
    <updated>2018-11-14T01:18:45.804Z</updated>
    
    <content type="html"><![CDATA[<p>认识各种盒子以及width/height作用细节</p><a id="more"></a><h2 id="3-1-块级盒子（认识各种盒子）"><a href="#3-1-块级盒子（认识各种盒子）" class="headerlink" title="3.1 块级盒子（认识各种盒子）"></a>3.1 块级盒子（认识各种盒子）</h2><p>根据整个第三章第四章以及第五章的内容，将盒子模型之间的关系画了一个总的示意图。 </p><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/css/cssworld/box1.jpg" alt=""></p><h2 id="3-2-width-height-作用的具体细节"><a href="#3-2-width-height-作用的具体细节" class="headerlink" title="3.2 width/height 作用的具体细节"></a>3.2 width/height 作用的具体细节</h2><h3 id="3-2-1-width-auto属性"><a href="#3-2-1-width-auto属性" class="headerlink" title="3.2.1 width:auto属性"></a>3.2.1 width:auto属性</h3><ul><li><p>充分利用可用空间 <code>&lt;div</code>&gt; ,<code>&lt;p&gt;</code>这些元素默认宽度100%充满父级 （外部尺寸）</p></li><li><p>收缩与包裹性  （内部尺寸）</p></li><li><p>收缩到最小 （内部尺寸）</p></li><li><p>超出容器限制 （内部尺寸）</p></li></ul><h3 id="“外部尺寸”与“内部尺寸”"><a href="#“外部尺寸”与“内部尺寸”" class="headerlink" title="“外部尺寸”与“内部尺寸”"></a>“外部尺寸”与“内部尺寸”</h3><p>   外部尺寸：宽度由外部元素决定<br>   内部尺寸：宽度由内部元素决定 如果一个元素里面没有内容宽度为0， 那么这个元素应用的就是“内部尺寸”</p><h3 id="外部尺寸与流体特性"><a href="#外部尺寸与流体特性" class="headerlink" title="外部尺寸与流体特性"></a>外部尺寸与流体特性</h3><ol><li><p>正常流宽度<br>在页面中随便扔一个<code>&lt;div&gt;</code>元素，其尺寸表现就会和这水流一样铺满容器，这就是<code>block</code>容器的流特性。</p></li><li><p>格式化宽度<br>格式化宽度仅出现在“绝对定位模型”中，也就是出现在<code>position:absolute</code>，<code>position:fixed</code>中。<strong>一般来说</strong>绝对定位元素的宽度是包裹性的，由内部元素决定。但是对于<strong>非替换元素</strong>当left/top 或者top/bottom对立方的属性值同时存在的时候，元素的宽度表现为“格式化宽度”，其宽度大小相对于最近的具有定特性的祖先元素计算。“格式化宽度”具有完全的流体性，也就是margin、border、padding和content内容区域同样会自动分配水平（垂直）空间。</p></li></ol><h3 id="内部尺寸与流体特性"><a href="#内部尺寸与流体特性" class="headerlink" title="内部尺寸与流体特性"></a>内部尺寸与流体特性</h3><ol><li><p>包裹性<br>“包裹性”包含“包裹”以及<strong>“自适应性”</strong>。自适应性是指元素尺寸由内部元素的宽度决定，但是永远小于“包含块”容器的尺寸(除非容器尺寸小于元素的“首选最小宽度”)。<br>除了inline-block元素，<strong>浮动元素</strong>以及<strong>绝对定位元素</strong>都具有包裹性。</p></li><li><p>首选最小宽度<br>所谓“首选最小宽度”，指的是元素最合适的最小宽度。如果外部容器宽度是0，内部inline-block元素宽度不会为0。</p></li><li><p>最大宽度<br>实际等同于“包裹性”元素设置white-space:nowrap声明后的宽度。如果内部没有块级元素或者块级元素没有设定宽度值，则“最大宽度”实际上是最大的连续内联盒子的宽度</p></li></ol><h3 id="3-2-2-width值作用的具体细节"><a href="#3-2-2-width值作用的具体细节" class="headerlink" title="3.2.2 width值作用的具体细节"></a>3.2.2 width值作用的具体细节</h3><p> width作用在content box上</p><h3 id="3-2-3-CSS流体布局下的宽度分离原则"><a href="#3-2-3-CSS流体布局下的宽度分离原则" class="headerlink" title="3.2.3 CSS流体布局下的宽度分离原则"></a>3.2.3 CSS流体布局下的宽度分离原则</h3><p> 不在同一层标签上设置width，padding。 width设置在父级标签上，子级标签设置padding,border属性。子级自适应父级宽度。</p><h3 id="3-2-4-改变width作用细节的box-sizing"><a href="#3-2-4-改变width作用细节的box-sizing" class="headerlink" title="3.2.4 改变width作用细节的box-sizing"></a>3.2.4 改变width作用细节的box-sizing</h3><p> box-sizing被发明的初衷更大的可能是解决替换元素宽度自适应问题。原因替换元素的尺寸由内部元素决定对于其设置display属性是inline还是block,替换元素的宽度都不会受其影响。当替换元素设置<code>display:block</code>是无法让元素100%自适应父级。所以让textarea的width100%自适应父级，同时保留border,padding属性只能通过<code>box-sizing:border-box</code>来解决</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> input ,textarea, img, video, object &#123;</span><br><span class="line">box-sizing: border-box</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-6-height-100"><a href="#3-2-6-height-100" class="headerlink" title="3.2.6 height: 100%"></a>3.2.6 height: 100%</h3><p>如何让元素支持height:100%?  </p><ul><li>设定显示的高度</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  <span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用绝对定位   </li></ul><p>绝对定位元素百分比计算和非绝对定位元素的百分比计算是有区别的，区别在于绝对定位的宽高百分比计算是相对于padding box</p><h2 id="3-3-CSSmin-width-max-width和min-height-max-height"><a href="#3-3-CSSmin-width-max-width和min-height-max-height" class="headerlink" title="3.3 CSSmin-width/max-width和min-height/max-height"></a>3.3 CSSmin-width/max-width和min-height/max-height</h2><h3 id="3-3-2-与众不同的初始值"><a href="#3-3-2-与众不同的初始值" class="headerlink" title="3.3.2 与众不同的初始值"></a>3.3.2 与众不同的初始值</h3><p>min-width/min-height的初始值为auto<br>max-width/max-height的初始值为none (思考为什么max的初始值为none 而不是auto)</p><h3 id="3-3-3-超越-important-超越最大"><a href="#3-3-3-超越-important-超越最大" class="headerlink" title="3.3.3 超越!important 超越最大"></a>3.3.3 超越!important 超越最大</h3><p>简单的来说min和max的权重比!important大。 如果min和max设置起冲突的时候。min-width 会覆盖max-width。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;认识各种盒子以及width/height作用细节&lt;/p&gt;
    
    </summary>
    
    
      <category term="css" scheme="https://liuchao0704.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>css总结 | 读css世界笔记</title>
    <link href="https://liuchao0704.github.io/2018/04/16/css3/"/>
    <id>https://liuchao0704.github.io/2018/04/16/css3/</id>
    <published>2018-04-16T07:04:25.000Z</published>
    <updated>2018-11-15T11:41:27.714Z</updated>
    
    <content type="html"><![CDATA[<p>2018年2月份入手了《css世界》一书。打算过年内看完，但是翻阅之后决定作为工具书多次阅读并记笔记总结之，加深自己对css的理解。随着页面越来越个性化，我发现写一段易修改，可维护，代码量少的css相当重要。</p><a id="more"></a><h2 id="3-、流、元素、基本尺寸"><a href="#3-、流、元素、基本尺寸" class="headerlink" title="3 、流、元素、基本尺寸"></a><a href="https://liuchao0704.github.io/2018/05/06/cssworld01/">3 、流、元素、基本尺寸</a></h2><h2 id="4、盒尺寸四大家族"><a href="#4、盒尺寸四大家族" class="headerlink" title="4、盒尺寸四大家族 "></a><a href="https://liuchao0704.github.io/2018/05/06/cssworld02/">4、盒尺寸四大家族 </a></h2><h2 id="5、内联元素与流"><a href="#5、内联元素与流" class="headerlink" title="5、内联元素与流 "></a><a href="https://liuchao0704.github.io/2018/05/07/cssworld03/">5、内联元素与流 </a></h2><h2 id="6、流的破坏与保护"><a href="#6、流的破坏与保护" class="headerlink" title="6、流的破坏与保护"></a><a href="https://liuchao0704.github.io/2018/11/0/cssworld04/">6、流的破坏与保护</a></h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2018年2月份入手了《css世界》一书。打算过年内看完，但是翻阅之后决定作为工具书多次阅读并记笔记总结之，加深自己对css的理解。随着页面越来越个性化，我发现写一段易修改，可维护，代码量少的css相当重要。&lt;/p&gt;
    
    </summary>
    
    
      <category term="css" scheme="https://liuchao0704.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>游泳小记</title>
    <link href="https://liuchao0704.github.io/2018/04/09/swim/"/>
    <id>https://liuchao0704.github.io/2018/04/09/swim/</id>
    <published>2018-04-09T12:42:16.000Z</published>
    <updated>2018-07-21T05:56:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>觉得为时已晚的时候,恰恰是最早的时候</p><a id="more"></a><h2 id="Day1-（2018-04-09）"><a href="#Day1-（2018-04-09）" class="headerlink" title="Day1 （2018.04.09）"></a>Day1 （2018.04.09）</h2><p>一共十节课 今天是第一节。课时一个小时，主要学会了漂浮在水面、换气、手臂动作。刚开始入水我是恐惧的，不敢手臂远离墙壁，自身腰部也很紧张，腿部很沉，下半身很沉，总是飘不起来。就算勉强漂浮在水中，身体也极度不稳定，整个人像风雨中飘摇的船只，左右摇晃不定，容易翻身。对于这种情况，教练教了两种动作，一个是在水中自主站立的动作，双腿的膝盖靠近胸部，手臂向下挥舞 ，人就顺势站立起来。还有一种是感觉你要翻身的时候 ，脚尖绷紧，膝盖打直，手臂张开角度越大越好，手臂打直 ，手指尖绷紧。然后整个人就不容易翻身了。掌握了以后，就不怕对水的恐惧了。 开心ing。 </p><h2 id="Day2-5-（2018-04-10-04-13）"><a href="#Day2-5-（2018-04-10-04-13）" class="headerlink" title="Day2-5 （2018.04.10-04.13）"></a>Day2-5 （2018.04.10-04.13）</h2><p>整个四节课就练习划手和蹬腿，其中蹬腿的用的时间很长，我刚开始练习的时候犯了很多错误。</p><ul><li>蹬腿必撅屁股</li><li>蹬腿身体滑行距离很小</li><li>蹬腿几次之后身体下半身越来越下沉 </li><li>蹬腿像慢动作</li></ul><p>首先蹬腿的时候 在小腿和脚后跟靠近屁股的同时，膝关节尽量打开 + 大腿不要太往池底靠，这样屁股就不会撅起来了。</p><p>蹬腿的时候 尽量保证身体的平稳性 不要操之过急，每次蹬腿完毕尽量让身体都稳定在水面中央 既不下沉的厉害，也不漂浮的厉害。</p><p>蹬腿要快要用力 </p><h2 id="Day6-（2018-04-15）"><a href="#Day6-（2018-04-15）" class="headerlink" title="Day6 （2018.04.15）"></a>Day6 （2018.04.15）</h2><p>今天蹬腿和划手有点感觉了，滑行的距离也出来了。明天可以练习一下综合了</p><h2 id="Day1N-2018-05-06"><a href="#Day1N-2018-05-06" class="headerlink" title="Day1N (2018.05.06)"></a>Day1N (2018.05.06)</h2><p>应该练习了有十几天，五一假期三天连续练习，能游一个来回，但是蹬腿的距离太短，以至于不停的蹬腿才能保持前进。初步判断是人未达到平行的状态就蹬腿，导致一部分前进的力量被分解为向上的力量。后期注意蹬腿时机。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;觉得为时已晚的时候,恰恰是最早的时候&lt;/p&gt;
    
    </summary>
    
    
      <category term="生活" scheme="https://liuchao0704.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="游泳" scheme="https://liuchao0704.github.io/tags/%E6%B8%B8%E6%B3%B3/"/>
    
  </entry>
  
  <entry>
    <title>前端面试总结</title>
    <link href="https://liuchao0704.github.io/2018/03/02/test/"/>
    <id>https://liuchao0704.github.io/2018/03/02/test/</id>
    <published>2018-03-02T13:45:43.000Z</published>
    <updated>2018-11-22T13:05:48.606Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="HTML5中的datalist是什么"><a href="#HTML5中的datalist是什么" class="headerlink" title="HTML5中的datalist是什么"></a>HTML5中的datalist是什么</h2><p>datalist 是HTML5 的新的表单元素 datalist要结合input元素才行，给input提供可用数据源不需要手动输入，加快输入，而且datalist还可以达到模糊匹配的效果。  </p><h2 id="本地存储和cookie之间的区别是什么"><a href="#本地存储和cookie之间的区别是什么" class="headerlink" title="本地存储和cookie之间的区别是什么"></a>本地存储和cookie之间的区别是什么</h2><h4 id="数据有效期不同："><a href="#数据有效期不同：" class="headerlink" title="数据有效期不同："></a>数据有效期不同：</h4><ul><li><p>默认情况下cookie只在浏览器会话期存在.退出浏览器就丢失;可以用expires设置时间;退出浏览器后就不会丢失并存为客户端浏览器的cookie文件;过了时间后cookie失效,还会自动删除cookie文件.</p></li><li><p>sessionStorage生命周期为当前窗口或标签页，一旦窗口或标签页被永久关闭了，那么所有通过sessionStorage存储的数据也就被清空了</p></li><li><p>localStorage 始终有效，长期保存。</p></li></ul><h4 id="存储大小"><a href="#存储大小" class="headerlink" title="存储大小"></a>存储大小</h4><ul><li>cookie历史悠久,浏览器支持率高。数据不能超过4k。</li><li>sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大。</li></ul><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><ul><li><p>相同浏览器的不同页面间可以共享相同的 localStorage（页面属于相同域名和端口，同源策略），但是不同页面或标签页间无法共享sessionStorage的信息</p></li><li><p>cookie也是在所有同源窗口中都是共享的</p></li><li><p>cookie的path属性:默认情况下,在同一个目录下文件可以调用; 例如:<a href="http://demo.com/c1/1.html" target="_blank" rel="noopener">http://demo.com/c1/1.html</a> 设置的cookie可以被<a href="http://demo.com/c1/2.html调用.但不能被http://demo.com/c2/" target="_blank" rel="noopener">http://demo.com/c1/2.html调用.但不能被http://demo.com/c2/</a> 目录下的文件调用; 但如把path属性设成”/“;则在<a href="http://demo.com/" target="_blank" rel="noopener">http://demo.com/</a> 下的所有文件都可调用此cookie.</p></li><li><p>cookie的domain属性:例如设成”.demo.com”则在.demo.com(“<a href="http://a.demo.com&quot;" target="_blank" rel="noopener">http://a.demo.com&quot;</a> 和 “<a href="http://b.demo.com&quot;)下的所有服务器下的文件都可以调用cookie" target="_blank" rel="noopener">http://b.demo.com&quot;)下的所有服务器下的文件都可以调用cookie</a>.</p></li></ul><p>WebStorage 支持事件通知机制，可以将数据更新的通知发送给监听者。Web Storage 的 api 接口使用更方便。</p><h2 id="link-和-import的区别是"><a href="#link-和-import的区别是" class="headerlink" title="link 和 @import的区别是"></a>link 和 @import的区别是</h2><p>1.从属关系区别<br>@import是 CSS 提供的语法规则，只有导入样式表的作用；link是HTML提供的标签，不仅可以加载 CSS 文件，还可以定义 RSS、rel 连接属性等。</p><p>2.加载顺序区别<br>加载页面时，link标签引入的 CSS 被同时加载；@import引入的 CSS 将在页面加载完毕后被加载。</p><p>3.兼容性区别<br>@import是 CSS2.1 才有的语法，故只可在 IE5+ 才能识别；link标签作为 HTML 元素，不存在兼容性问题。</p><h2 id="css选择器有哪些，哪些属性可以继承，优先级如何"><a href="#css选择器有哪些，哪些属性可以继承，优先级如何" class="headerlink" title="css选择器有哪些，哪些属性可以继承，优先级如何"></a>css选择器有哪些，哪些属性可以继承，优先级如何</h2><h3 id="优先级-0-1-0-0"><a href="#优先级-0-1-0-0" class="headerlink" title="优先级 0,1,0,0"></a>优先级 0,1,0,0</h3><ul><li>id选择器 </li></ul><h3 id="优先级-0-0-1-0"><a href="#优先级-0-0-1-0" class="headerlink" title="优先级 0,0,1,0"></a>优先级 0,0,1,0</h3><ul><li>类选择器</li><li>属性选择器</li><li>伪类选择器</li></ul><h3 id="优先级-0-0-0-1"><a href="#优先级-0-0-0-1" class="headerlink" title="优先级 0,0,0,1"></a>优先级 0,0,0,1</h3><ul><li>元素选择器</li><li>伪元素选择器</li><li>后代选择器</li><li>子元素选择器</li><li>相邻兄弟选择器</li></ul><h3 id="优先级-0-0-0-0"><a href="#优先级-0-0-0-0" class="headerlink" title="优先级 0,0,0,0"></a>优先级 0,0,0,0</h3><ul><li>通配选择器*对特殊性没有贡献，即0,0,0,0。</li></ul><h3 id="可以继承的属性"><a href="#可以继承的属性" class="headerlink" title="可以继承的属性"></a>可以继承的属性</h3><ul><li>color,line-height,font-size</li></ul><h3 id="补充-优先级-1-0-0-0"><a href="#补充-优先级-1-0-0-0" class="headerlink" title="补充 优先级 1,0,0,0"></a>补充 优先级 1,0,0,0</h3><p> 行间样式的特殊性是1,0,0,0<br> 最后比较特殊的一个标志!important（权重），它没有特殊性值，但它的优先级是最高的，为了方便记忆，可以认为它的特殊性值为1,0,0,0,0。</p><h2 id="html5中的应用缓存是什么"><a href="#html5中的应用缓存是什么" class="headerlink" title="html5中的应用缓存是什么"></a>html5中的应用缓存是什么</h2><p>应用程序缓存是专门从浏览器的缓存中分出一块缓存区用于缓存数据，从而在离线状态下也能读取和使用该数据，这就是应用缓存，或者说叫appcache</p><h2 id="用Javascript创建一个对象"><a href="#用Javascript创建一个对象" class="headerlink" title="用Javascript创建一个对象"></a>用Javascript创建一个对象</h2><h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><p>类似于普通函数调用 内部显式的创建对象 并且return 。<br>工厂模式解决了创建多个相似对象的问题，但是没有解决对象识别的问题。</p><h4 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h4><ul><li>没有显示的创建对象 没有return</li><li>直接属性和方法赋给了this对象</li><li>函数名大写</li><li>调用函数的时候用new</li></ul><h4 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 工厂模式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObj</span>(<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    o.name = name;</span><br><span class="line">    o.age = age;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1 = createObj(<span class="string">'l'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> obj2 = createObj(<span class="string">'c'</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreateObj</span>(<span class="params">name,age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj3 = <span class="keyword">new</span> CreateObj(<span class="string">'L'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> obj4 = <span class="keyword">new</span> CreateObj(<span class="string">'C'</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型模式</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PrototypeCreateObj</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PrototypeCreateObj.prototype.name = <span class="string">'demo'</span>;</span><br><span class="line">PrototypeCreateObj.prototype.age =  <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj5 = <span class="keyword">new</span> PrototypeCreateObj();</span><br><span class="line"><span class="keyword">var</span> obj6 = <span class="keyword">new</span> PrototypeCreateObj();<span class="string">``</span></span><br></pre></td></tr></table></figure><h2 id="谈谈你对this的理解"><a href="#谈谈你对this的理解" class="headerlink" title="谈谈你对this的理解"></a>谈谈你对this的理解</h2><p>当一个函数被调用的时候，会创建一个活动记录，有时候也称为执行的上下文。这个记录会包含函数在哪里被调用（调用栈）、函数的调用方式、传入的参数等信息。this就是这个记录的一个属性。会在函数执行的过程中用到。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;HTML5中的datalist是什么&quot;&gt;&lt;a href=&quot;#HTML5中的datalist是什么&quot; class=&quot;headerlink&quot; title=&quot;HTML5中的datalist是什么&quot;&gt;&lt;/a&gt;HTML5中的datalis
      
    
    </summary>
    
    
      <category term="css" scheme="https://liuchao0704.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>个人简历</title>
    <link href="https://liuchao0704.github.io/2018/03/01/resume/"/>
    <id>https://liuchao0704.github.io/2018/03/01/resume/</id>
    <published>2018-03-01T13:45:43.000Z</published>
    <updated>2018-11-19T01:23:19.696Z</updated>
    
    <content type="html"><![CDATA[<p>刘超的简历</p><a id="more"></a> <h2 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h2><table><thead><tr><th>姓名</th><th>刘超</th><th>联系方式</th><th>18552057721</th></tr></thead><tbody><tr><td>邮箱</td><td><a href="mailto:liuc0704@outlook.com" target="_blank" rel="noopener">liuc0704@outlook.com</a></td><td>应聘职位</td><td>前端工程师/JS工程师</td></tr><tr><td>性别</td><td>女</td><td>出生年月</td><td>1991-07</td></tr><tr><td>户籍</td><td>无锡</td><td>婚姻状况</td><td>未婚</td></tr><tr><td>学历</td><td>本科</td><td>毕业院校</td><td>南京信息工程大学</td></tr><tr><td>专业</td><td>电子信息技术</td><td>到岗时间</td><td>1个月</td></tr></tbody></table><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><ul><li>精通HTML/CSS</li><li>精通JavaScript</li><li>精通 AngularJS </li><li>熟悉WEB应用开发技术，熟悉JavaScript技术平台，丰富的B/S框架项目开发经验</li><li>良好的英语技能</li><li>对研发及团队管理十分感兴趣。工作态度认真仔细，做事严谨，自信心强并且自我要求严格，为人开朗热情，具有团队意识，具有很好的沟通能力</li></ul><h4 id="参与过的Web项目"><a href="#参与过的Web项目" class="headerlink" title="参与过的Web项目"></a>参与过的Web项目</h4><table><thead><tr><th>项目</th><th>角色</th></tr></thead><tbody><tr><td>乐伏光伏大数据智慧管理平台</td><td>前端工程师</td></tr><tr><td>中国航天可再生能源管理平台</td><td>前端工程师，项目负责人</td></tr><tr><td>江西省光伏扶贫大数据平台</td><td>前端工程师</td></tr><tr><td>光伏运维管理平台</td><td>前端工程师</td></tr></tbody></table><ul><li>后端 JAVA+Tomcat+mybatis+spring+mysql</li><li>前端 AngularJS</li><li>乐伏光伏大数据智慧管理平台</li><li>负责：前端页面CSS/DIV编写，JS编写，整体负责前端框架。<br>采用前后端完全分离的架构。前端采用AngularJS框架，通过AJAX请求与后端交互；同时引入百度地图插件和highcharts图表插件来丰富网站内容。</li></ul><h4 id="参与过的App项目"><a href="#参与过的App项目" class="headerlink" title="参与过的App项目"></a>参与过的App项目</h4><table><thead><tr><th>项目</th><th>角色</th></tr></thead><tbody><tr><td>乐伏管家APP</td><td>前端工程师</td></tr><tr><td>乐伏监控APP</td><td>前端工程师</td></tr><tr><td>乐伏运维APP</td><td>前端工程师</td></tr></tbody></table><ul><li>前端 AngularJS</li><li>乐伏管家App</li><li>负责：前端页面CSS/DIV编写，JS编写，整体负责前端框架。<br>采用前后端完全分离的架构。前端采用AngularJS框架，通过AJAX请求与后端交互；同时引入betterscroll插件, 它可以优化WebApp的滚动体验，使webApp中超长页更接近原生App的滚动效果。  </li></ul><h2 id="工作经验"><a href="#工作经验" class="headerlink" title="工作经验"></a>工作经验</h2><ul><li>公司：江苏乐伏能源科技有限公司</li><li>时间：2016/11 – 至今</li><li>职位：前端工程师</li><li>汇报对象：部门经理</li></ul><p>2016至今我在无锡乐伏能源有限公司从事前端开发。乐伏能源是一家光伏监控与运维解决方案的提供商。我有幸在公司创业之初就加入。经历了从无到有，初代产品研发以及后期功能的升级和迭代。主要为公司开发PC端网页系统以及移动端webApp。</p><h2 id="项目经验"><a href="#项目经验" class="headerlink" title="项目经验"></a>项目经验</h2><h4 id="乐伏智能光伏管理云中心3-0"><a href="#乐伏智能光伏管理云中心3-0" class="headerlink" title="乐伏智能光伏管理云中心3.0"></a>乐伏智能光伏管理云中心3.0</h4><ul><li>无锡乐伏智慧光伏监控平台是一款为安装商/厂家用户量身制定的大屏软件。该产品方便用户查看电站运行情况、电站收益、设备运行状况、电站运维记录等信息。</li><li>本人在该项目中担任前端开发。HTML + CSS 制作高保真静态页面。使用AngualrJS + ajax 调用后台API接口获取数据并绑定到页面。</li></ul><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/resume/smartenergy1.jpg" alt=""></p><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/resume/smartenergy2.jpg" alt=""></p><h4 id="中国航天智慧能源管理平台-（Aerospace-smart-energy-management-system-）"><a href="#中国航天智慧能源管理平台-（Aerospace-smart-energy-management-system-）" class="headerlink" title="中国航天智慧能源管理平台 （Aerospace smart energy  management system ）"></a>中国航天智慧能源管理平台 （Aerospace smart energy  management system ）</h4><ul><li>中国航天智慧能源管理平台是为上海航天定制开发的大屏监控系统（适合2560x1440以上分辨率）于2018年8月上线。  </li><li>本人负责该项目的前期沟通/需求整理/界面风格确认工作 分析客户基本需求：资产管理 、能量管理。结合公司现有系统功能提炼并改造 为中国航天开发了去菜单化一键查看数据流程。满足了非专业人士也能便捷操作能源站系统的需求。</li><li>本人在该项目中担任前端开发，HTML + CSS 制作高保真静态页面。使用AngualrJS + ajax 调用后台API接口获取数据并绑定到页面。</li></ul><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/resume/aerospace1.jpg" alt=""></p><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/resume/aerospace2.jpg" alt=""></p><h4 id="乐伏管家App"><a href="#乐伏管家App" class="headerlink" title="乐伏管家App"></a>乐伏管家App</h4><ul><li>乐伏管家App可以同时满足个人业主和大型安装商对电站运营情况的查询和运维需求。2018年3月上线。</li><li>本人负责该项目产品需求整理和前端开发工作。采用AngularJs + betterscroll。betterscroll是一款优秀的滚动插件，它可以优化WebApp的滚动体验，使webApp中超长页更接近原生App的滚动效果。   </li><li>视觉层面：根据电站的天气情况个性化设置页面，新增晴天/阴天/多云/雨/雪/夜间模式并动态更新页面，带来不一样的视觉体验  </li><li>数据存储：利用AngularJs  的<code>$rootscope</code>作为简易版本的根数据管理，在<code>$rootscope</code>创建根对象用于存储多次复用并且实时更新的数据。</li></ul><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/resume/app3.jpg" alt=""></p><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/resume/app2.jpg" alt=""></p><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/resume/app4.jpg" alt=""></p><h4 id="乐伏运维App"><a href="#乐伏运维App" class="headerlink" title="乐伏运维App"></a>乐伏运维App</h4><ul><li>乐伏运维App可以满足终端业主及运维人员对于电站运维的需求。2017年9月上线。</li><li>本人负责该项目的前端开发工作。 AngularJs + ajax与后台交互数据</li><li>版本合一 android 和 ios  共用一个前端版本，减少维护成本。</li><li>路由切换更加自然 更接近原生app</li></ul><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/resume/operationapp.jpg" alt=""></p><h4 id="乐伏运维系统网页版"><a href="#乐伏运维系统网页版" class="headerlink" title="乐伏运维系统网页版"></a>乐伏运维系统网页版</h4><ul><li>乐伏电站运维系统网页版是一款为终端业主/运维人员/电站集成商打造的电站运维系统 。于2017年8月上线。  </li><li>本人负责该项目的前端开发工作。乐伏运维系统采用AngualrJs框架将三种不同的电站管理角色紧密联系到一起，便于及时排除和解决电站的故障问题。</li><li>不同用户角色不同权限的页面展示</li><li>集成简易的物料管理系统，运单不同状态下的可操作流程、功能</li></ul><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/resume/P%25LH@1EVQR_NTPA$@14DO$H.jpg" alt=""></p><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/resume/3W14R%7D081LVN_41G8~KVI5Y.jpg" alt=""></p><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/resume/534@%60V8556CBTWM%7DQHN%601NT.jpg" alt=""></p><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/resume/H$%60WG%5BOD4WTN$7G%7B78%29P~1I.jpg" alt=""></p><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/resume/W%29CZLRG%5B%5B%7BW%7B$26JVN15833.jpg" alt=""></p><h4 id="乐伏电站设计系统网页版"><a href="#乐伏电站设计系统网页版" class="headerlink" title="乐伏电站设计系统网页版"></a>乐伏电站设计系统网页版</h4><ul><li>乐伏电站设计系统是一款实用的电站设计系统。于2017年3月份上线。</li><li>本人负责该项目的前端开发工作。乐伏电站设计系统采用AngualrJs框架。该软件方便用户进行电站预估计算及设备选型。用户无需要专业的电站知识即可进行一键式计算收益和组件、设备匹配，使电站获得最佳收益。</li><li>高德地图支持用户快速自定义电站位置 ,获取该地理位置的辐照量和最佳倾斜角</li></ul><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/resume/%5B5C5%29H%7BD$%5BP@XXQ%29%28SFJ%5D%7B6.jpg" alt=""></p><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/resume/NB8%60O5%5BF4K1_S%5DL%7DXHKR20A.jpg" alt=""></p><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/resume/I7%25D~7@KS3U89~C54UDYXH4.jpg" alt=""></p><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/resume/BH~%25J%5B7DH%5B%7DDXE%28@K$G4%7D8S.jpg" alt=""></p><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/resume/Y%25B9@QO_$7V$9N%28P%7DBLF6ZB.jpg" alt=""></p><h4 id="乐伏电站监控系统网页版"><a href="#乐伏电站监控系统网页版" class="headerlink" title="乐伏电站监控系统网页版"></a>乐伏电站监控系统网页版</h4><ul><li>乐伏监控系统网页版是一款功能丰富的电站监控系统，于2017年1月上线 。</li><li>本人负责该项目的前端开发工作。项目中使用AngularJs + bootstrap 框架。</li><li>AngularJs 负责数据双向绑定，ng-router路由开发SPA，使页面之间的切换效果更为流畅。使用图表类插件highcharts进行数据可视化，更加清晰的展示电站及设备的各个时间段发电量/功率/告警记录。</li><li>bootstrap 栅格系统快速搭建后台管理系统页面</li></ul><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/resume/D%28~U1%5B%7BHJJJZX~%7B%607EIDIK8.jpg" alt=""></p><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/resume/3K3%29%60%60M%7D%7BUF3VE%29N%7BEG%60_C2.jpg" alt=""></p><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/resume/%5B@K%29FUG52%25PND0VL%28%5B@6Z11.jpg" alt=""></p><h2 id="教育经历"><a href="#教育经历" class="headerlink" title="教育经历"></a>教育经历</h2><ul><li>2009/09-2013/07            南京信息工程大学   电子信息技术   本科 </li></ul><h2 id="薪资"><a href="#薪资" class="headerlink" title="薪资"></a>薪资</h2><ul><li>目前薪资  12000 * 12 （税前）</li></ul><h2 id="语言能力"><a href="#语言能力" class="headerlink" title="语言能力"></a>语言能力</h2><table><thead><tr><th></th><th>口语</th><th>书面</th></tr></thead><tbody><tr><td>英语</td><td>一般</td><td>一般</td></tr><tr><td>中文</td><td>熟练</td><td>熟练</td></tr></tbody></table><h2 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h2><table><thead><tr><th>类别</th><th>时间</th><th>名称</th></tr></thead><tbody><tr><td>英语</td><td>2010-06</td><td>CET-6</td></tr><tr><td>计算机</td><td>2011-03</td><td>计算机二级</td></tr><tr><td>计算机</td><td>2012-09</td><td>计算机四级</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刘超的简历&lt;/p&gt;
    
    </summary>
    
    
      <category term="简历" scheme="https://liuchao0704.github.io/tags/%E7%AE%80%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>常用正则表达式整理</title>
    <link href="https://liuchao0704.github.io/2018/02/01/reg/"/>
    <id>https://liuchao0704.github.io/2018/02/01/reg/</id>
    <published>2018-02-01T13:45:43.000Z</published>
    <updated>2018-11-14T01:34:44.622Z</updated>
    
    <content type="html"><![CDATA[<p>将常用的正则表达式整理如下。</p><a id="more"></a> <h1 id="常用正则表达式整理"><a href="#常用正则表达式整理" class="headerlink" title="常用正则表达式整理"></a>常用正则表达式整理</h1><h2 id="正则元字符"><a href="#正则元字符" class="headerlink" title="正则元字符"></a>正则元字符</h2><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>*</td><td>匹配前面的字表达式零次或者多次等价于{0,}</td></tr><tr><td>+</td><td>匹配前面的字表达式一次或者多次等价于{1,}</td></tr><tr><td>?</td><td>匹配前面的字表达式零次或者一次等价于{0,1}</td></tr></tbody></table><h2 id="整数-不限制正负"><a href="#整数-不限制正负" class="headerlink" title="整数(不限制正负)"></a>整数(不限制正负)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^-?\d+$/; <span class="comment">// 不限制长度</span></span><br></pre></td></tr></table></figure><h2 id="整数-gt-0"><a href="#整数-gt-0" class="headerlink" title="整数(&gt; 0)"></a>整数(&gt; 0)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/^[<span class="number">1</span><span class="number">-9</span>]\d*$/; <span class="comment">// 不限制长度</span></span><br><span class="line">/^[<span class="number">1</span><span class="number">-9</span>]\d&#123;<span class="number">0</span>,<span class="number">5</span>&#125;$/;<span class="comment">// 限制长度</span></span><br></pre></td></tr></table></figure><h2 id="整数-gt-0-amp-amp-lt-100"><a href="#整数-gt-0-amp-amp-lt-100" class="headerlink" title="整数(&gt; 0 &amp;&amp; &lt;= 100)"></a>整数(&gt; 0 &amp;&amp; &lt;= 100)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^(<span class="number">100</span>|([<span class="number">1</span><span class="number">-9</span>]&#123;<span class="number">1</span>&#125;\d?))$/</span><br></pre></td></tr></table></figure><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/js/reg/reg2.png" alt=""></p><h2 id="浮点型-gt-0-保留2位小数"><a href="#浮点型-gt-0-保留2位小数" class="headerlink" title="浮点型(&gt; 0 保留2位小数)"></a>浮点型(&gt; 0 保留2位小数)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^(([<span class="number">1</span><span class="number">-9</span>]&#123;<span class="number">1</span>&#125;)(\.\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;)?|(<span class="number">0</span>(\.\d&#123;<span class="number">0</span>,<span class="number">1</span>&#125;[<span class="number">1</span><span class="number">-9</span>])))$/</span><br></pre></td></tr></table></figure><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/js/reg/reg0.png" alt=""></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/^(([<span class="number">1</span><span class="number">-9</span>]&#123;<span class="number">1</span>&#125;[<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">0</span>,<span class="number">5</span>&#125;)(\.\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;)?|(<span class="number">0</span>(\.\d&#123;<span class="number">0</span>,<span class="number">1</span>&#125;[<span class="number">1</span><span class="number">-9</span>])))$/</span><br></pre></td></tr></table></figure><h2 id="浮点型-gt-0-保留2位小数-1"><a href="#浮点型-gt-0-保留2位小数-1" class="headerlink" title="浮点型(&gt;= 0 保留2位小数)"></a>浮点型(&gt;= 0 保留2位小数)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^(([<span class="number">1</span><span class="number">-9</span>]&#123;<span class="number">1</span>&#125;)(\.\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;)?|(<span class="number">0</span>(\.\d&#123;<span class="number">0</span>,<span class="number">1</span>&#125;[<span class="number">1</span><span class="number">-9</span>])?))$/</span><br></pre></td></tr></table></figure><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/js/reg/reg1.png" alt=""></p><h2 id="字符串开头不能空格-中间可以是空格-数字-字母-中文-非特殊字符结尾"><a href="#字符串开头不能空格-中间可以是空格-数字-字母-中文-非特殊字符结尾" class="headerlink" title="字符串开头不能空格 中间可以是空格/数字/字母/中文/非特殊字符结尾"></a>字符串开头不能空格 中间可以是空格/数字/字母/中文/非特殊字符结尾</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^[\w\u4e00-\u9fa5]&#123;<span class="number">1</span>&#125;[\s\w\u4e00-\u9fa5]&#123;<span class="number">0</span>,<span class="number">8</span>&#125;$/</span><br></pre></td></tr></table></figure><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/js/reg/reg3.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将常用的正则表达式整理如下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="reg" scheme="https://liuchao0704.github.io/tags/reg/"/>
    
  </entry>
  
  <entry>
    <title>学以致用系列之js array</title>
    <link href="https://liuchao0704.github.io/2018/01/28/jsArray/"/>
    <id>https://liuchao0704.github.io/2018/01/28/jsArray/</id>
    <published>2018-01-28T10:46:46.000Z</published>
    <updated>2018-07-21T05:56:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近学react,对于数据操作特别是数组的操作让我有了新的认识,现在将数组的一些方法记录下来,并且改造一下之前angular js checkbox全选和选不选的js。希望自己写出更加优雅的代码(少用if，else)。</p><a id="more"></a>  <h2 id="一行代码搞定Array的深拷贝"><a href="#一行代码搞定Array的深拷贝" class="headerlink" title="一行代码搞定Array的深拷贝"></a>一行代码搞定Array的深拷贝</h2><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">var</span> <span class="class"><span class="keyword">data</span> = <span class="keyword">data</span>.conact(); // js contacat() 方法会返回一个新的数组。tips：原数组中如有对象,还是不能做到完全的深拷贝。</span></span><br></pre></td></tr></table></figure><h2 id="数组的过滤-filter"><a href="#数组的过滤-filter" class="headerlink" title="数组的过滤 filter()"></a>数组的过滤 filter()</h2><p>原来我操作的数组的思路是循环数组找到index,然后用数组的splice(index, 1)删除。其实就是filter()应该干的事情。</p><h2 id="改写Angular-JS动态控制多选框全选与全不选并且打印选中的值"><a href="#改写Angular-JS动态控制多选框全选与全不选并且打印选中的值" class="headerlink" title="改写Angular JS动态控制多选框全选与全不选并且打印选中的值]"></a>改写Angular JS动态控制多选框全选与全不选并且打印选中的值]</h2><p><a href="https://liuchao0704.github.io/2017/04/10/multiselect/">点击查看</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">"angular-1.3.0.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span> </span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body ng-app="myApp" ng-controller="vipApplyEditCtrl"&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;div&gt;  </span></span><br><span class="line"><span class="regexp">     &lt;input </span></span><br><span class="line"><span class="regexp">          type="checkbox" </span></span><br><span class="line"><span class="regexp">          name="all" </span></span><br><span class="line"><span class="regexp">          ng-model="all"</span></span><br><span class="line"><span class="regexp">          ng-change="toSelectAll(all)"&gt; 全选 </span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &lt;i&gt;&#123;&#123;all&#125;&#125;&lt;/i</span>&gt;</span><br><span class="line">    &lt;div ng-repeat=<span class="string">"color in colors"</span>&gt;  </span><br><span class="line">        &lt;input </span><br><span class="line">              type=<span class="string">"checkbox"</span> </span><br><span class="line">              ng-checked=<span class="string">"color.checked == true"</span>   </span><br><span class="line">              ng-click=<span class="string">"updateSelection(color)"</span> </span><br><span class="line">              /&gt;</span><br><span class="line">              &#123;&#123;color.name&#125;&#125;  </span><br><span class="line">    &lt;<span class="regexp">/div&gt;  </span></span><br><span class="line"><span class="regexp">    </span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    Selected :&#123;&#123;selected&#125;&#125;</span><br><span class="line">&lt;<span class="regexp">/div&gt;  </span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">var app = angular.module('myApp', []);</span></span><br><span class="line"><span class="regexp">app.controller("vipApplyEditCtrl", function($scope) &#123;  </span></span><br><span class="line"><span class="regexp">    $scope.formData = &#123;&#125;;</span></span><br><span class="line"><span class="regexp">    $scope.colors = [  </span></span><br><span class="line"><span class="regexp">        &#123;id : 1, name : 'black'&#125;,  </span></span><br><span class="line"><span class="regexp">        &#123;id : 2, name : 'red'&#125;,  </span></span><br><span class="line"><span class="regexp">        &#123;id : 3, name : 'blue'&#125;,  </span></span><br><span class="line"><span class="regexp">        &#123;id : 4, name : 'yellow'&#125;,  </span></span><br><span class="line"><span class="regexp">        &#123;id : 5, name : 'green'&#125;,  </span></span><br><span class="line"><span class="regexp">        &#123;id : 6, name : 'white'&#125;  </span></span><br><span class="line"><span class="regexp">    ] ;  </span></span><br><span class="line"><span class="regexp">      </span></span><br><span class="line"><span class="regexp">     $scope.selected = [] ;  /</span><span class="regexp">/ 存放新的已选数据 </span></span><br><span class="line"><span class="regexp">     $scope.updateSelection = function(obj)&#123;  </span></span><br><span class="line"><span class="regexp">        obj.checked = !obj.checked;</span></span><br><span class="line"><span class="regexp">        $scope.selected = [] ; </span></span><br><span class="line"><span class="regexp">         $scope.colors.forEach(function(item)&#123;</span></span><br><span class="line"><span class="regexp">            if(item.checked)&#123;</span></span><br><span class="line"><span class="regexp">                $scope.selected.push(item.id) ;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;)</span></span><br><span class="line"><span class="regexp">         $scope.colors.every(function(item)&#123;</span></span><br><span class="line"><span class="regexp">            return item.checked ;</span></span><br><span class="line"><span class="regexp">        &#125;)</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">     $scope.toSelectAll = function(flag)&#123;</span></span><br><span class="line"><span class="regexp">        $scope.selected = [];</span></span><br><span class="line"><span class="regexp">        $scope.colors.forEach(function(i)&#123;</span></span><br><span class="line"><span class="regexp">                 i.checked = flag;</span></span><br><span class="line"><span class="regexp">                 if(flag)$scope.selected.push(i.id);</span></span><br><span class="line"><span class="regexp">             &#125;)</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;);  </span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近学react,对于数据操作特别是数组的操作让我有了新的认识,现在将数组的一些方法记录下来,并且改造一下之前angular js checkbox全选和选不选的js。希望自己写出更加优雅的代码(少用if，else)。&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://liuchao0704.github.io/tags/js/"/>
    
      <category term="array" scheme="https://liuchao0704.github.io/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>Sticky footer 布局</title>
    <link href="https://liuchao0704.github.io/2018/01/06/stickyfooter/"/>
    <id>https://liuchao0704.github.io/2018/01/06/stickyfooter/</id>
    <published>2018-01-06T05:18:37.000Z</published>
    <updated>2018-11-14T01:18:45.796Z</updated>
    
    <content type="html"><![CDATA[<p>css3的一种经典布局。footer紧紧粘在底部，当页面内容不足一页的时候，footer在最底部。当页面内容超过一页，footer自动在底部。</p><a id="more"></a><h2 id="sticky-footer-布局示意图"><a href="#sticky-footer-布局示意图" class="headerlink" title="sticky footer 布局示意图"></a>sticky footer 布局示意图</h2><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/css/css/sticky-footer.jpg" alt=""></p><h2 id="sticky-footer布局思路1"><a href="#sticky-footer布局思路1" class="headerlink" title="sticky-footer布局思路1"></a>sticky-footer布局思路1</h2><p>父元素包裹内容，并给他一个内边距使其等于底部的高度，防止内容覆盖到底部的内容。底部元素有个负的margin值</p><h3 id="css3-代码"><a href="#css3-代码" class="headerlink" title="css3 代码"></a>css3 代码</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="selector-tag">html</span>,</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">        <span class="attribute">min-height</span>: <span class="number">100%</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: block;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">"."</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">clear</span>: both;</span><br><span class="line">        <span class="attribute">visibility</span>: hidden;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.content-inside</span> &#123;</span><br><span class="line">        <span class="attribute">padding-top</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">padding-left</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">padding-right</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">padding-bottom</span>: <span class="number">50px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.content-inside</span>&gt;<span class="selector-tag">p</span> &#123;</span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">60px</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.footer</span> &#123;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">        <span class="attribute">margin-top</span>: -<span class="number">50px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#00b3ee</span>;</span><br><span class="line">        <span class="attribute">text-align</span>: center;</span><br><span class="line">        <span class="attribute">color</span>: white;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">50px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="div布局"><a href="#div布局" class="headerlink" title="div布局"></a>div布局</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper clearfix"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content-inside"</span> <span class="attr">id</span>=<span class="string">"div"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>content<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"addP()"</span>&gt;</span>点击添加文字<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">"div"</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">addP</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> para = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> node = <span class="built_in">document</span>.createTextNode(<span class="string">'这是一个新段落'</span>);</span></span><br><span class="line"><span class="undefined">        para.appendChild(node);</span></span><br><span class="line"><span class="undefined">        element.appendChild(para);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="sticky-footer-布局思路2"><a href="#sticky-footer-布局思路2" class="headerlink" title="sticky footer 布局思路2"></a>sticky footer 布局思路2</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>这里是主要内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span>这是页脚区块<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;css3的一种经典布局。footer紧紧粘在底部，当页面内容不足一页的时候，footer在最底部。当页面内容超过一页，footer自动在底部。&lt;/p&gt;
    
    </summary>
    
    
      <category term="css" scheme="https://liuchao0704.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>angular1开发webApp | 持续更新</title>
    <link href="https://liuchao0704.github.io/2017/07/07/angularApp/"/>
    <id>https://liuchao0704.github.io/2017/07/07/angularApp/</id>
    <published>2017-07-07T13:45:43.000Z</published>
    <updated>2018-11-16T07:36:41.777Z</updated>
    
    <content type="html"><![CDATA[<p> 最近用angular做了一些webApp,也总结了不少的固定套路。现在将固定套路整理如下,主要分为css,js,插件三部分。</p><a id="more"></a> <h2 id="js部分"><a href="#js部分" class="headerlink" title="js部分"></a>js部分</h2><h3 id="利用-rootscope打造轻量级数据管理"><a href="#利用-rootscope打造轻量级数据管理" class="headerlink" title="利用$rootscope打造轻量级数据管理"></a>利用<code>$rootscope</code>打造轻量级数据管理</h3><p> 建议将常量定义在 main.js 里的 <code>$rootscope</code>里,必要时结合<code>$localstorage</code> 使用。好处:一次定义,多次复用，实时更新</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> u = navigator.userAgent;</span><br><span class="line">$scope.app = &#123;</span><br><span class="line">    errorId:<span class="literal">null</span>, <span class="comment">//错误码</span></span><br><span class="line">    enableToAddEquip: <span class="literal">false</span>, <span class="comment">//是否可以添加设备</span></span><br><span class="line">    environment: <span class="regexp">/localhost/</span>.test(<span class="built_in">window</span>.location.href) ? <span class="string">'dev'</span> : <span class="string">'product'</span>, <span class="comment">//开发or生产环境</span></span><br><span class="line">    logOut: <span class="literal">false</span>, <span class="comment">//是否退出</span></span><br><span class="line">    isAndroid: u.indexOf(<span class="string">'Android'</span>) &gt; <span class="number">-1</span> || u.indexOf(<span class="string">'Adr'</span>) &gt; <span class="number">-1</span> || u.indexOf(<span class="string">'Linux'</span>) &gt; <span class="number">-1</span>, <span class="comment">//判断安卓或者苹果</span></span><br><span class="line">    isIphone: u.indexOf(<span class="string">'iPhone'</span>) &gt; <span class="number">-1</span>,</span><br><span class="line">    version: <span class="number">1.0</span>,</span><br><span class="line">    weatherKey: <span class="number">5</span>, <span class="comment">//天气状态码</span></span><br><span class="line">    roleName: $localStorage.app ? $localStorage.app.roleName : <span class="string">''</span>,  <span class="comment">// 不在提示绑定</span></span><br><span class="line">    email: $localStorage.app ? $localStorage.app.email : <span class="string">''</span>,  <span class="comment">// 终端用户 &amp; 安装商email</span></span><br><span class="line">    userName: $localStorage.app ? $localStorage.app.userName : <span class="string">''</span>,</span><br><span class="line">    password: $localStorage.app ? $localStorage.password : <span class="string">''</span>,</span><br><span class="line">    installerSn: $localStorage.app ? $localStorage.app.installerSn : <span class="literal">null</span>,</span><br><span class="line">    operationSn: $localStorage.app ? $localStorage.app.operationSn : <span class="literal">null</span>,</span><br><span class="line">    userSn: $localStorage.app ? $localStorage.app.userSn : <span class="literal">null</span>,</span><br><span class="line">    equipSn: $localStorage.app ? $localStorage.app.equipSn : <span class="literal">null</span>,</span><br><span class="line">    stationId: $localStorage.app ? $localStorage.app.stationId : <span class="literal">null</span>,</span><br><span class="line">    authError: <span class="literal">null</span>,</span><br><span class="line">    successReturnCode: <span class="string">'0000'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="尝试其他方法和后台做数据交互"><a href="#尝试其他方法和后台做数据交互" class="headerlink" title="尝试其他方法和后台做数据交互"></a>尝试其他方法和后台做数据交互</h3><p>这个问题是我在做第一个app中遇到的，如果不用ajax，前端有什么其他方法和后台做数据交互？<br>我的partner提出了一个可行的方法。大致思路是后端拦截前端所有页面间的跳转，前端不主动跳转页面。所有的跳转由后台协助完成。在android系统里前、后端约定好一个函数名称，如果前端调用该函数，函数的参数即是需要交互的数据。后端通过参数获取前端上传的数据。并将前端需要的结果以字符串的形式返回（可以是url，也可以是解析后的JSON字符串）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="built_in">window</span>.jsOjb.login(<span class="string">'demo'</span>,<span class="string">'123456'</span>) <span class="comment">// demo 用户名 123456 密码 函数的返回值即成功登陆之后的url链接</span></span><br><span class="line">   <span class="keyword">if</span>(url)&#123;</span><br><span class="line">   <span class="built_in">window</span>.location.href = url;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>在ios系统中稍微不一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="built_in">window</span>.location.href = <span class="string">',login,name,123456'</span>;</span><br></pre></td></tr></table></figure><h2 id="CSS部分"><a href="#CSS部分" class="headerlink" title="CSS部分"></a>CSS部分</h2><h3 id="rem-解决页面适配问题"><a href="#rem-解决页面适配问题" class="headerlink" title="rem 解决页面适配问题"></a>rem 解决页面适配问题</h3><p>rem 的原理就是根据html的font-size 大小，做到页面的元素宽/高度自适应。而用rem遇到的问题是：如果用<strong>js动态</strong>设置页面的font-size，页面会有一瞬间的先缩小后放大过程。我的解决方案是利用css3的媒体查询直接改变html的font-size大小。此段代码可以写在页面重置css里</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">32px</span> <span class="meta">!important</span>;&#125;</span><br><span class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">350px</span>) and (max-width:<span class="number">374px</span>)&#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">35px</span> <span class="meta">!important</span>;&#125;&#125;</span><br><span class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">375px</span>) and (max-width:<span class="number">413px</span>)&#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">37px</span><span class="meta">!important</span>;&#125;&#125;</span><br><span class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">414px</span>) and (max-width:<span class="number">639px</span>)&#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">41px</span><span class="meta">!important</span>;&#125;&#125;</span><br><span class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">640px</span>) and (max-width:<span class="number">719px</span>)&#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">64px</span><span class="meta">!important</span>;&#125;&#125;</span><br><span class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">720px</span>) and (max-width:<span class="number">749px</span>)&#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">72px</span><span class="meta">!important</span>;&#125;&#125;</span><br><span class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">750px</span>) and (max-width:<span class="number">799px</span>)&#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">75px</span><span class="meta">!important</span>;&#125;&#125;</span><br><span class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">800px</span>)&#123;<span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="number">80px</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p> html 部分的meta标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no"</span> /&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- ios自动识别数字为电话号码导致页面错位 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="input-typr-radio-表现怪异"><a href="#input-typr-radio-表现怪异" class="headerlink" title="input[typr=radio]表现怪异"></a>input[typr=radio]表现怪异</h3><p>由于重置了一些css样式导致input输入框的样式变成可以复制粘贴，而不是呈点击状态<br>故将css代码贴出来，防止再入坑</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 此代码会导致input单选框怪异模式*/</span></span><br><span class="line"> <span class="selector-tag">input</span><span class="selector-pseudo">:-webkit-user-modify</span><span class="selector-pseudo">:read-write-plaintext-only</span>;</span><br></pre></td></tr></table></figure><h2 id="Sticky-footer-布局"><a href="#Sticky-footer-布局" class="headerlink" title="Sticky footer 布局"></a>Sticky footer 布局</h2><p>App常见布局<a href="https://liuchao0704.github.io/2018/01/06/stickyfooter/">点击查看</a></p><h2 id="App单页面切换效果"><a href="#App单页面切换效果" class="headerlink" title="App单页面切换效果"></a>App单页面切换效果</h2><p>SPA加上页面切换效果堪比原生App<a href="https://github.com/liuchao0704/angularWebApp.git" target="_blank" rel="noopener">点击查看</a></p><h2 id="上下左右居中解决方案"><a href="#上下左右居中解决方案" class="headerlink" title="上下左右居中解决方案"></a>上下左右居中解决方案</h2><ul><li>子级宽高固定（多见于loading实现）</li><li>子级宽高不固定（多见于图片）</li><li>弹框居中解决方案（css世界给出的方案）</li></ul><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/css/cssworld/loading1.jpg" alt=""></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.loading-wrap</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#f0f0f0</span>;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.loading-content</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>:<span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">margin</span>:auto;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!<span class="selector-tag">--loading</span>居中<span class="selector-tag">--</span>&gt;</span><br><span class="line">&lt;div class="loading-wrap"&gt;</span><br><span class="line">    &lt;div class="loading-content"&gt;</span><br><span class="line">    <span class="selector-tag">loading</span> ....</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/css/cssworld/imgvertical.jpg" alt=""></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="selector-class">.img-wrap</span> &#123;</span><br><span class="line">     <span class="attribute">position</span>:relative;</span><br><span class="line">     <span class="attribute">width</span>:<span class="number">300px</span>;</span><br><span class="line">     <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">     <span class="attribute">background</span>:<span class="number">#f0f0f0</span>;</span><br><span class="line">     <span class="attribute">text-align</span>:center;</span><br><span class="line">     <span class="attribute">font-size</span>:<span class="number">0</span>;</span><br><span class="line">     <span class="attribute">line-height</span>:<span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.img-wrap</span> &gt; <span class="selector-class">.img</span> &#123;</span><br><span class="line">    <span class="attribute">max-height</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">max-width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">vertical-align</span>:middle;</span><br><span class="line">&#125;</span><br><span class="line">  &lt;!<span class="selector-tag">--</span>图片宽高不确定居中<span class="selector-tag">--</span>&gt;</span><br><span class="line">  &lt;div class="img-wrap"&gt;</span><br><span class="line">      &lt;img class="img" src="../timg.jpg" alt=""&gt;</span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 最近用angular做了一些webApp,也总结了不少的固定套路。现在将固定套路整理如下,主要分为css,js,插件三部分。&lt;/p&gt;
    
    </summary>
    
    
      <category term="angular" scheme="https://liuchao0704.github.io/tags/angular/"/>
    
      <category term="webApp" scheme="https://liuchao0704.github.io/tags/webApp/"/>
    
  </entry>
  
  <entry>
    <title>Angular $on、$emit、$broadcast 事件传播时机分析</title>
    <link href="https://liuchao0704.github.io/2017/05/17/broadcast/"/>
    <id>https://liuchao0704.github.io/2017/05/17/broadcast/</id>
    <published>2017-05-17T13:43:51.000Z</published>
    <updated>2018-07-21T05:52:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>ng事件传播小小的总结</p><a id="more"></a><h3 id="事件传播的时机分析"><a href="#事件传播的时机分析" class="headerlink" title="事件传播的时机分析"></a>事件传播的时机分析</h3><hr><p>事件传播的格式和用法比较简单。而对于事件传播的时机有可以分析的地方。其中js的执行顺序是先执行父级controller，再执行子级controller，所以当父级发出事件的时候，子级有可能接收不到事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'myApp'</span>, []);</span><br><span class="line">app.controller(<span class="string">'ParentCtrlrl'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, $http</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 父级接收事件</span></span><br><span class="line">    $scope.$on(<span class="string">'to-parent'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e, data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//父级直接传播事件1</span></span><br><span class="line">    $scope.$broadcast(<span class="string">'to-child'</span>, <span class="string">'x'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//父级异步传播事件2</span></span><br><span class="line">     $http.post(<span class="string">'api.json'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (res.data.success) &#123;</span><br><span class="line">            $scope.$broadcast(<span class="string">'to-child'</span>, <span class="string">'y'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">     <span class="comment">//父级点击传播事件3</span></span><br><span class="line">    $scope.click = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $scope.$broadcast(<span class="string">'to-child'</span>, <span class="string">'z'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.controller(<span class="string">'SelfCtrl'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 子级直接传播事件1</span></span><br><span class="line">    $scope.$emit(<span class="string">'to-parent'</span>, <span class="string">'1'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 子级接收事件2</span></span><br><span class="line">    $scope.$on(<span class="string">'to-child'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e, data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>看一下打印结果</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line">y</span><br><span class="line">z <span class="comment">//点击之后出现z,而x始终未出现</span></span><br></pre></td></tr></table></figure><p>思考父级controller如何在子级js执行后传播事件？<br>我的思路是：增加一个子级向上通知的事件。子级先向父级传播事件 →父级接收到事件后 → 父级向下传播事件 → 子级接收事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="keyword">var</span> app = angular.module(<span class="string">'myApp'</span>, []);</span><br><span class="line">     app.controller(<span class="string">'ParentCtrlrl'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope, $http</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 父级接收事件之后再传播</span></span><br><span class="line">    $scope.$on(<span class="string">'to-parent'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e, data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">        $scope.$broadcast(<span class="string">'to-child'</span>, <span class="string">'x'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.controller(<span class="string">'SelfCtrl'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 子级接收事件2</span></span><br><span class="line">    $scope.$on(<span class="string">'to-child'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e, data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 子级直接传播事件1</span></span><br><span class="line">    $scope.$emit(<span class="string">'to-parent'</span>, <span class="string">'1'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>查看一下打印结果</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line">X</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ng事件传播小小的总结&lt;/p&gt;
    
    </summary>
    
    
      <category term="angular" scheme="https://liuchao0704.github.io/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>Select与Datepicker插件控制日期</title>
    <link href="https://liuchao0704.github.io/2017/04/23/datepicker/"/>
    <id>https://liuchao0704.github.io/2017/04/23/datepicker/</id>
    <published>2017-04-23T06:57:33.000Z</published>
    <updated>2018-11-14T01:30:52.715Z</updated>
    
    <content type="html"><![CDATA[<p>   Date对象和Datepicker插件使用总结</p><a id="more"></a><h2 id="Date对象和Datepicker插件使用示意图"><a href="#Date对象和Datepicker插件使用示意图" class="headerlink" title="Date对象和Datepicker插件使用示意图"></a>Date对象和Datepicker插件使用示意图</h2><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/js/angularjs/datepicker.gif" alt=""></p><h3 id="datepicker-基本用法"><a href="#datepicker-基本用法" class="headerlink" title="datepicker 基本用法"></a>datepicker 基本用法</h3><hr><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group date"</span> <span class="attr">id</span>=<span class="string">"date"</span> <span class="attr">data-provide</span>=<span class="string">"datepicker"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">readonly</span>=<span class="string">"readonly"</span> <span class="attr">ng-disabled</span>=<span class="string">"disable"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-th"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;#date&apos;).datepicker(&#123;</span><br><span class="line">    language: &apos;zh-CN&apos;,</span><br><span class="line">    autoclose: true,</span><br><span class="line">    format: &apos;yyyy-mm-dd&apos;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>直接将日期更新到今日</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#date'</span>).datepicker(<span class="string">'update'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>()) <span class="comment">// 日期更新到今日</span></span><br></pre></td></tr></table></figure><h3 id="Select-改变日期预览格式-支持日-月-年视图切换"><a href="#Select-改变日期预览格式-支持日-月-年视图切换" class="headerlink" title="Select 改变日期预览格式 支持日/月/年视图切换"></a>Select 改变日期预览格式 支持日/月/年视图切换</h3><hr><p>月视图写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> $(<span class="string">'#date'</span>).datepicker(&#123;</span><br><span class="line">    language: <span class="string">'zh-CN'</span>,</span><br><span class="line">    autoclose: <span class="literal">true</span>,</span><br><span class="line">    startView: <span class="number">1</span>,</span><br><span class="line">    maxViewMode: <span class="number">1</span>,</span><br><span class="line">    minViewMode: <span class="number">1</span>,</span><br><span class="line">    format: <span class="string">'yyyy-mm'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="点击前后按钮实现日期自动-1-1切换"><a href="#点击前后按钮实现日期自动-1-1切换" class="headerlink" title="点击前后按钮实现日期自动+1/-1切换"></a>点击前后按钮实现日期自动+1/-1切换</h3><hr><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>日期联动<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 最新版本的 Bootstrap 核心 CSS 文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css"</span> <span class="attr">integrity</span>=<span class="string">"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--datepicker css --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"dist/css/bootstrap-datepicker.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"angular-1.3.0.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--datepicker js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"dist/js/bootstrap-datepicker.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--datepicker language js --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"dist/locales/bootstrap-datepicker.zh-CN.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span> <span class="attr">ng-controller</span>=<span class="string">"myCtrl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"col-xs-12"</span>&gt;</span> Select与Datepicker插件控制日期<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-5"</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"dateType"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-model</span>=<span class="string">"dateType"</span> <span class="attr">ng-change</span>=<span class="string">"dateTypeChange(dateType)"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>日<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>月<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"3"</span>&gt;</span>年<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"4"</span>&gt;</span>总<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-1"</span> <span class="attr">ng-click</span>=<span class="string">"gotoPreNext(0)"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-chevron-left"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-5"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group date"</span> <span class="attr">id</span>=<span class="string">"date"</span> <span class="attr">data-provide</span>=<span class="string">"datepicker"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">readonly</span>=<span class="string">"readonly"</span> <span class="attr">ng-disabled</span>=<span class="string">"disable"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-th"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-1"</span> <span class="attr">ng-click</span>=<span class="string">"gotoPreNext(1)"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-chevron-right</span></span></span><br><span class="line"><span class="tag"><span class="string">glyphicon glyphicon-"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = angular.module(<span class="string">'myApp'</span>, []);</span></span><br><span class="line"><span class="actionscript">    app.controller(<span class="string">'myCtrl'</span>, <span class="function"><span class="keyword">function</span><span class="params">($scope)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        $scope.dateType = <span class="string">'1'</span>; <span class="comment">// 初始化默认日期类型为日;</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 为Date 添加format方法</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">Date</span>.prototype.format = <span class="function"><span class="keyword">function</span>(<span class="params">fmt</span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> o = &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="string">"M+"</span>: <span class="keyword">this</span>.getMonth() + <span class="number">1</span>, <span class="comment">//月份</span></span></span><br><span class="line"><span class="actionscript">                <span class="string">"d+"</span>: <span class="keyword">this</span>.getDate(), <span class="comment">//日</span></span></span><br><span class="line"><span class="actionscript">                <span class="string">"h+"</span>: <span class="keyword">this</span>.getHours(), <span class="comment">//小时</span></span></span><br><span class="line"><span class="actionscript">                <span class="string">"m+"</span>: <span class="keyword">this</span>.getMinutes(), <span class="comment">//分</span></span></span><br><span class="line"><span class="actionscript">                <span class="string">"s+"</span>: <span class="keyword">this</span>.getSeconds(), <span class="comment">//秒</span></span></span><br><span class="line"><span class="javascript">                <span class="string">"q+"</span>: <span class="built_in">Math</span>.floor((<span class="keyword">this</span>.getMonth() + <span class="number">3</span>) / <span class="number">3</span>), <span class="comment">//季度</span></span></span><br><span class="line"><span class="actionscript">                <span class="string">"S"</span>: <span class="keyword">this</span>.getMilliseconds() <span class="comment">//毫秒</span></span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (<span class="regexp">/(y+)/</span>.test(fmt)) &#123;</span></span><br><span class="line"><span class="javascript">                fmt = fmt.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (<span class="keyword">this</span>.getFullYear() + <span class="string">""</span>).substr(<span class="number">4</span> - <span class="built_in">RegExp</span>.$<span class="number">1.</span>length));</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> o) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"("</span> + k + <span class="string">")"</span>).test(fmt)) &#123;</span></span><br><span class="line"><span class="javascript">                    fmt = fmt.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (<span class="built_in">RegExp</span>.$<span class="number">1.</span>length == <span class="number">1</span>) ? (o[k]) : ((<span class="string">"00"</span> + o[k]).substr((<span class="string">""</span> + o[k]).length)));</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> fmt;</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        $(<span class="string">'#date'</span>).datepicker(&#123;</span></span><br><span class="line"><span class="actionscript">            language: <span class="string">'zh-CN'</span>,</span></span><br><span class="line"><span class="actionscript">            autoclose: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">            format: <span class="string">'yyyy-mm-dd'</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        $(<span class="string">'#date'</span>).datepicker(<span class="string">'update'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>()) <span class="comment">// 默认当天日期</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        $scope.disable = <span class="literal">false</span>; <span class="comment">// 默认可选日期</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        $scope.dateTypeChange = <span class="function"><span class="keyword">function</span><span class="params">(type)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> str = <span class="string">''</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">switch</span> (<span class="built_in">parseInt</span>(type))</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">case</span> <span class="number">1</span>:</span></span><br><span class="line"><span class="actionscript">                    $scope.disable = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">'#date'</span>).datepicker(<span class="string">'remove'</span>);</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">'#date'</span>).datepicker(&#123;</span></span><br><span class="line"><span class="actionscript">                        language: <span class="string">'zh-CN'</span>,</span></span><br><span class="line"><span class="actionscript">                        autoclose: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">                        format: <span class="string">'yyyy-mm-dd'</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">                    &#125;);</span></span><br><span class="line"><span class="javascript">                   $(<span class="string">'#date'</span>).datepicker(<span class="string">'update'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>())</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">case</span> <span class="number">2</span>:</span></span><br><span class="line"><span class="actionscript">                    $scope.disable = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">'#date'</span>).datepicker(<span class="string">'remove'</span>);</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">'#date'</span>).datepicker(&#123;</span></span><br><span class="line"><span class="actionscript">                        language: <span class="string">'zh-CN'</span>,</span></span><br><span class="line"><span class="actionscript">                        autoclose: <span class="literal">true</span>,</span></span><br><span class="line"><span class="undefined">                        startView: 1,</span></span><br><span class="line"><span class="undefined">                        maxViewMode: 1,</span></span><br><span class="line"><span class="undefined">                        minViewMode: 1,</span></span><br><span class="line"><span class="actionscript">                        format: <span class="string">'yyyy-mm'</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">                    &#125;);</span></span><br><span class="line"><span class="javascript">                    str = <span class="keyword">new</span> <span class="built_in">Date</span>().format(<span class="string">'yyyy-MM'</span>)</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">'#date'</span>).datepicker(<span class="string">'update'</span>, str)</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">case</span> <span class="number">3</span>:</span></span><br><span class="line"><span class="actionscript">                    $scope.disable = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">'#date'</span>).datepicker(<span class="string">'remove'</span>);</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">'#date'</span>).datepicker(&#123;</span></span><br><span class="line"><span class="actionscript">                        language: <span class="string">'zh-CN'</span>,</span></span><br><span class="line"><span class="actionscript">                        autoclose: <span class="literal">true</span>,</span></span><br><span class="line"><span class="undefined">                        startView: 2,</span></span><br><span class="line"><span class="undefined">                        maxViewMode: 2,</span></span><br><span class="line"><span class="undefined">                        minViewMode: 2,</span></span><br><span class="line"><span class="actionscript">                        format: <span class="string">'yyyy'</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">                    &#125;);</span></span><br><span class="line"><span class="javascript">                    str = <span class="keyword">new</span> <span class="built_in">Date</span>().format(<span class="string">'yyyy'</span>)</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">'#date'</span>).datepicker(<span class="string">'update'</span>, str)</span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">case</span> <span class="number">4</span>:</span></span><br><span class="line"><span class="actionscript">                    $scope.disable = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">'#date input'</span>).val(<span class="string">'---'</span>);</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">'#date'</span>).datepicker(<span class="string">'remove'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="actionscript">                 <span class="keyword">default</span>:</span></span><br><span class="line"><span class="actionscript">                 <span class="keyword">break</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">     </span></span><br><span class="line"><span class="actionscript">       <span class="comment">// 前后按钮改变日期 前一天 后一天</span></span></span><br><span class="line"><span class="actionscript">        $scope.gotoPreNext = <span class="function"><span class="keyword">function</span><span class="params">(flag)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> curDate =  $(<span class="string">'#date input'</span>).val();</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> dateY = <span class="built_in">parseInt</span>(curDate.split(<span class="string">'-'</span>)[<span class="number">0</span>])|| <span class="built_in">parseInt</span>(curDate);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 年比较特殊 不需要分割直接使用</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> dateM = <span class="built_in">parseInt</span>(curDate.split(<span class="string">'-'</span>)[<span class="number">1</span>])|| <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> dateD = <span class="built_in">parseInt</span>(curDate.split(<span class="string">'-'</span>)[<span class="number">2</span>])|| <span class="number">0</span>;</span></span><br><span class="line"><span class="undefined">            </span></span><br><span class="line"><span class="javascript">            <span class="keyword">debugger</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">switch</span> (<span class="built_in">parseInt</span>($scope.dateType)) &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">case</span> <span class="number">1</span>:</span></span><br><span class="line"><span class="actionscript">             <span class="keyword">if</span>(flag)&#123;</span></span><br><span class="line"><span class="javascript">               $(<span class="string">'#date'</span>).datepicker(<span class="string">'update'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>(dateY, dateM<span class="number">-1</span> , dateD + <span class="number">1</span>))</span></span><br><span class="line"><span class="actionscript">             &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">'#date'</span>).datepicker(<span class="string">'update'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>(dateY, dateM<span class="number">-1</span> , dateD <span class="number">-1</span>))</span></span><br><span class="line"><span class="undefined">             &#125;</span></span><br><span class="line"><span class="undefined">            </span></span><br><span class="line"><span class="actionscript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">case</span> <span class="number">2</span>:</span></span><br><span class="line"><span class="actionscript">              <span class="keyword">if</span>(flag)&#123;</span></span><br><span class="line"><span class="javascript">               $(<span class="string">'#date'</span>).datepicker(<span class="string">'update'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>(dateY, dateM, <span class="number">1</span>));</span></span><br><span class="line"><span class="actionscript">             &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">'#date'</span>).datepicker(<span class="string">'update'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>(dateY, dateM<span class="number">-2</span>, <span class="number">1</span>))</span></span><br><span class="line"><span class="undefined">             &#125;</span></span><br><span class="line"><span class="undefined">            </span></span><br><span class="line"><span class="actionscript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">case</span> <span class="number">3</span>:</span></span><br><span class="line"><span class="actionscript">              <span class="keyword">if</span>(flag)&#123;</span></span><br><span class="line"><span class="javascript">               $(<span class="string">'#date'</span>).datepicker(<span class="string">'update'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>(dateY + <span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>))</span></span><br><span class="line"><span class="actionscript">             &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">'#date'</span>).datepicker(<span class="string">'update'</span>, <span class="keyword">new</span> <span class="built_in">Date</span>(dateY - <span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>))</span></span><br><span class="line"><span class="undefined">             &#125;</span></span><br><span class="line"><span class="undefined">            </span></span><br><span class="line"><span class="actionscript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">default</span>:</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">break</span>; </span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;   Date对象和Datepicker插件使用总结&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="https://liuchao0704.github.io/tags/js/"/>
    
      <category term="date" scheme="https://liuchao0704.github.io/tags/date/"/>
    
  </entry>
  
  <entry>
    <title>Angular JS动态控制多选框全选与全不选并且打印选中的值</title>
    <link href="https://liuchao0704.github.io/2017/04/10/multiselect/"/>
    <id>https://liuchao0704.github.io/2017/04/10/multiselect/</id>
    <published>2017-04-10T12:34:40.000Z</published>
    <updated>2018-11-14T01:21:10.082Z</updated>
    
    <content type="html"><![CDATA[<p>Angular JS获取多选框处理的值</p><a id="more"></a><h2 id="多选框示意图"><a href="#多选框示意图" class="headerlink" title="多选框示意图"></a>多选框示意图</h2><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/js/angularjs/checkbox.gif" alt=""><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://cdn.static.runoob.com/libs/angular.js/1.4.6/angular.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span> <span class="attr">ng-controller</span>=<span class="string">"vipApplyEditCtrl"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-repeat</span>=<span class="string">"color in colors"</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">ng-checked</span>=<span class="string">"isChecked(color.id)"</span>   </span></span><br><span class="line"><span class="tag">                <span class="attr">ng-click</span>=<span class="string">"updateSelection($event,color.id)"</span> /&gt;</span>&#123;&#123;color.name&#125;&#125;  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>  </span><br><span class="line">        Selected : &#123;&#123;selected&#125;&#125;  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = angular.module(<span class="string">'myApp'</span>, []);</span></span><br><span class="line"><span class="actionscript">    app.controller(<span class="string">"vipApplyEditCtrl"</span>, <span class="function"><span class="keyword">function</span><span class="params">($scope)</span> </span>&#123;  </span></span><br><span class="line"><span class="undefined">        $scope.colors = [  </span></span><br><span class="line"><span class="actionscript">            &#123;id : <span class="number">1</span>, name : <span class="string">'black'</span>&#125;,  </span></span><br><span class="line"><span class="actionscript">            &#123;id : <span class="number">2</span>, name : <span class="string">'red'</span>&#125;,  </span></span><br><span class="line"><span class="actionscript">            &#123;id : <span class="number">3</span>, name : <span class="string">'blue'</span>&#125;,  </span></span><br><span class="line"><span class="actionscript">            &#123;id : <span class="number">4</span>, name : <span class="string">'yellow'</span>&#125;,  </span></span><br><span class="line"><span class="actionscript">            &#123;id : <span class="number">5</span>, name : <span class="string">'green'</span>&#125;,  </span></span><br><span class="line"><span class="actionscript">            &#123;id : <span class="number">6</span>, name : <span class="string">'white'</span>&#125;  </span></span><br><span class="line"><span class="undefined">        ] ;  </span></span><br><span class="line"><span class="undefined">          </span></span><br><span class="line"><span class="undefined">        $scope.selected = [] ;  </span></span><br><span class="line"><span class="undefined">          </span></span><br><span class="line"><span class="actionscript">        $scope.isChecked = <span class="function"><span class="keyword">function</span><span class="params">(id)</span></span>&#123;  </span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> $scope.selected.indexOf(id) &gt;= <span class="number">0</span> ;  </span></span><br><span class="line"><span class="undefined">        &#125; ;</span></span><br><span class="line"><span class="undefined">          </span></span><br><span class="line"><span class="actionscript">        $scope.updateSelection = <span class="function"><span class="keyword">function</span><span class="params">($event,id)</span></span>&#123;  </span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> checkbox = $event.target ;  </span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> checked = checkbox.checked ;  </span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span>(checked)&#123;  </span></span><br><span class="line"><span class="undefined">                $scope.selected.push(id) ;  </span></span><br><span class="line"><span class="actionscript">            &#125;<span class="keyword">else</span>&#123;  </span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> idx = $scope.selected.indexOf(id) ;  </span></span><br><span class="line"><span class="undefined">                $scope.selected.splice(idx,1) ;  </span></span><br><span class="line"><span class="undefined">            &#125;  </span></span><br><span class="line"><span class="undefined">        &#125; ;  </span></span><br><span class="line"><span class="undefined">    &#125;);  </span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="通过ng-checked-属性选中某个多选框"><a href="#通过ng-checked-属性选中某个多选框" class="headerlink" title="通过ng-checked 属性选中某个多选框"></a>通过ng-checked 属性选中某个多选框</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$scope.selected = [<span class="number">2</span>] ;  <span class="comment">// 支持预先选中某个选项</span></span><br></pre></td></tr></table></figure><h3 id="增加全选和取消全选的按钮"><a href="#增加全选和取消全选的按钮" class="headerlink" title="增加全选和取消全选的按钮"></a>增加全选和取消全选的按钮</h3><p>   1、增加一个开关控制单选或者全选(可以用checkbox 或者 radio)<br>   2、动态改变select数组<br>   3、单个选项进行操作的时候判断是否改变了全选或者非全选的状态，如果改变动态更新<br>   4、涉及到checkbox 和 radio 操作请使用ng-change来代替ng-click，否则model值为undefined或者未更新<br>   5、针对第四条补充说明如果是单纯的点击操作，不涉及到model值的传递，可以用ng-click，但是需要将model值作为函数的参数进行传递的时候请使用ng-change比较稳妥。</p><h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"angular-1.3.0.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span> <span class="attr">ng-controller</span>=<span class="string">"vipApplyEditCtrl"</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">input</span> </span></span><br><span class="line"><span class="tag">              <span class="attr">type</span>=<span class="string">"checkbox"</span> </span></span><br><span class="line"><span class="tag">              <span class="attr">name</span>=<span class="string">"all"</span> </span></span><br><span class="line"><span class="tag">              <span class="attr">ng-model</span>=<span class="string">"all"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">ng-change</span>=<span class="string">"toSelectAll(all)"</span>&gt;</span> 全选 </span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span>&gt;</span>&#123;&#123;all&#125;&#125;<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-repeat</span>=<span class="string">"color in colors"</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> </span></span><br><span class="line"><span class="tag">                  <span class="attr">type</span>=<span class="string">"checkbox"</span> </span></span><br><span class="line"><span class="tag">                  <span class="attr">ng-checked</span>=<span class="string">"isChecked(color.id)"</span>   </span></span><br><span class="line"><span class="tag">                  <span class="attr">ng-click</span>=<span class="string">"updateSelection($event,color.id)"</span> </span></span><br><span class="line"><span class="tag">                  /&gt;</span></span><br><span class="line">                  &#123;&#123;color.name&#125;&#125;  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        Selected :&#123;&#123;selected&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = angular.module(<span class="string">'myApp'</span>, []);</span></span><br><span class="line"><span class="actionscript">    app.controller(<span class="string">"vipApplyEditCtrl"</span>, <span class="function"><span class="keyword">function</span><span class="params">($scope)</span> </span>&#123;  </span></span><br><span class="line"><span class="undefined">        $scope.formData = &#123;&#125;;</span></span><br><span class="line"><span class="undefined">        $scope.colors = [  </span></span><br><span class="line"><span class="actionscript">            &#123;id : <span class="number">1</span>, name : <span class="string">'black'</span>&#125;,  </span></span><br><span class="line"><span class="actionscript">            &#123;id : <span class="number">2</span>, name : <span class="string">'red'</span>&#125;,  </span></span><br><span class="line"><span class="actionscript">            &#123;id : <span class="number">3</span>, name : <span class="string">'blue'</span>&#125;,  </span></span><br><span class="line"><span class="actionscript">            &#123;id : <span class="number">4</span>, name : <span class="string">'yellow'</span>&#125;,  </span></span><br><span class="line"><span class="actionscript">            &#123;id : <span class="number">5</span>, name : <span class="string">'green'</span>&#125;,  </span></span><br><span class="line"><span class="actionscript">            &#123;id : <span class="number">6</span>, name : <span class="string">'white'</span>&#125;  </span></span><br><span class="line"><span class="undefined">        ] ;  </span></span><br><span class="line"><span class="undefined">          </span></span><br><span class="line"><span class="undefined">         $scope.selected = [] ;  </span></span><br><span class="line"><span class="actionscript">         $scope.isChecked = <span class="function"><span class="keyword">function</span><span class="params">(id)</span></span>&#123;  </span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> $scope.selected.indexOf(id) &gt;= <span class="number">0</span> ;  </span></span><br><span class="line"><span class="undefined">         &#125; ; </span></span><br><span class="line"><span class="actionscript">        $scope.updateSelection = <span class="function"><span class="keyword">function</span><span class="params">($event,id)</span></span>&#123;  </span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> checkbox = $event.target ;  </span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> checked = checkbox.checked ;  </span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span>(checked)&#123;  </span></span><br><span class="line"><span class="undefined">                $scope.selected.push(id);</span></span><br><span class="line"><span class="actionscript">            &#125;<span class="keyword">else</span>&#123;  </span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> idx = $scope.selected.indexOf(id) ;  </span></span><br><span class="line"><span class="undefined">                $scope.selected.splice(idx,1) ;  </span></span><br><span class="line"><span class="undefined">            &#125;  </span></span><br><span class="line"><span class="actionscript">             <span class="keyword">if</span>($scope.selected.length == $scope.colors.length) &#123;</span></span><br><span class="line"><span class="actionscript">                    $scope.all = <span class="literal">true</span>;</span></span><br><span class="line"><span class="actionscript">             &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">                    $scope.all = <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">             &#125;   </span></span><br><span class="line"><span class="undefined">        &#125; ;</span></span><br><span class="line"><span class="actionscript">        $scope.toSelectAll = <span class="function"><span class="keyword">function</span><span class="params">(flag)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">             <span class="keyword">if</span>(flag)&#123;</span></span><br><span class="line"><span class="undefined">                 $scope.selected = []</span></span><br><span class="line"><span class="actionscript">                  angular.forEach($scope.colors, <span class="function"><span class="keyword">function</span> <span class="params">(i)</span> </span>&#123;</span></span><br><span class="line"><span class="undefined">                    $scope.selected.push(i.id);</span></span><br><span class="line"><span class="undefined">                &#125;)</span></span><br><span class="line"><span class="actionscript">             &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">                 angular.forEach($scope.colors, <span class="function"><span class="keyword">function</span> <span class="params">(i)</span> </span>&#123;</span></span><br><span class="line"><span class="undefined">                    $scope.selected = [];</span></span><br><span class="line"><span class="undefined">                &#125;)       </span></span><br><span class="line"><span class="undefined">             &#125;       </span></span><br><span class="line"><span class="undefined">        &#125;  </span></span><br><span class="line"><span class="undefined">    &#125;);  </span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"angular-1.3.0.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span> <span class="attr">ng-controller</span>=<span class="string">"vipApplyEditCtrl"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>  </span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> </span></span><br><span class="line"><span class="tag">          <span class="attr">type</span>=<span class="string">"checkbox"</span> </span></span><br><span class="line"><span class="tag">          <span class="attr">name</span>=<span class="string">"all"</span> </span></span><br><span class="line"><span class="tag">          <span class="attr">ng-model</span>=<span class="string">"all"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">ng-change</span>=<span class="string">"toSelectAll(all)"</span>&gt;</span> 全选 </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>&#123;&#123;all&#125;&#125;<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-repeat</span>=<span class="string">"color in colors"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> </span></span><br><span class="line"><span class="tag">              <span class="attr">type</span>=<span class="string">"checkbox"</span> </span></span><br><span class="line"><span class="tag">              <span class="attr">ng-checked</span>=<span class="string">"color.checked == true"</span>   </span></span><br><span class="line"><span class="tag">              <span class="attr">ng-click</span>=<span class="string">"updateSelection(color)"</span> </span></span><br><span class="line"><span class="tag">              /&gt;</span></span><br><span class="line">              &#123;&#123;color.name&#125;&#125;  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    Selected :&#123;&#123;selected&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> app = angular.module(<span class="string">'myApp'</span>, []);</span></span><br><span class="line"><span class="actionscript">app.controller(<span class="string">"vipApplyEditCtrl"</span>, <span class="function"><span class="keyword">function</span><span class="params">($scope)</span> </span>&#123;  </span></span><br><span class="line"><span class="undefined">    $scope.formData = &#123;&#125;;</span></span><br><span class="line"><span class="undefined">    $scope.colors = [  </span></span><br><span class="line"><span class="actionscript">        &#123;id : <span class="number">1</span>, name : <span class="string">'black'</span>&#125;,  </span></span><br><span class="line"><span class="actionscript">        &#123;id : <span class="number">2</span>, name : <span class="string">'red'</span>&#125;,  </span></span><br><span class="line"><span class="actionscript">        &#123;id : <span class="number">3</span>, name : <span class="string">'blue'</span>&#125;,  </span></span><br><span class="line"><span class="actionscript">        &#123;id : <span class="number">4</span>, name : <span class="string">'yellow'</span>&#125;,  </span></span><br><span class="line"><span class="actionscript">        &#123;id : <span class="number">5</span>, name : <span class="string">'green'</span>&#125;,  </span></span><br><span class="line"><span class="actionscript">        &#123;id : <span class="number">6</span>, name : <span class="string">'white'</span>&#125;  </span></span><br><span class="line"><span class="undefined">    ] ;  </span></span><br><span class="line"><span class="undefined">      </span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="undefined">     $scope.selected = [] ;  </span></span><br><span class="line"><span class="actionscript">    $scope.updateSelection = <span class="function"><span class="keyword">function</span><span class="params">(obj)</span></span>&#123;  </span></span><br><span class="line"><span class="undefined">       </span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span>(!obj.checked )&#123;  </span></span><br><span class="line"><span class="actionscript">            obj.checked = <span class="literal">true</span>;</span></span><br><span class="line"><span class="undefined">            $scope.selected.push(obj.id);</span></span><br><span class="line"><span class="undefined">           </span></span><br><span class="line"><span class="actionscript">        &#125;<span class="keyword">else</span>&#123;  </span></span><br><span class="line"><span class="actionscript">            obj.checked = <span class="literal">false</span>; </span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> idx = $scope.selected.indexOf(obj.id) ;  </span></span><br><span class="line"><span class="undefined">            $scope.selected.splice(idx,1) ; </span></span><br><span class="line"><span class="undefined">        &#125;  </span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">         <span class="keyword">if</span>($scope.selected.length == $scope.colors.length) &#123;</span></span><br><span class="line"><span class="actionscript">                $scope.all = <span class="literal">true</span>;</span></span><br><span class="line"><span class="actionscript">         &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">                $scope.all = <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">         &#125;   </span></span><br><span class="line"><span class="undefined">    &#125; ;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    $scope.toSelectAll = <span class="function"><span class="keyword">function</span><span class="params">(flag)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">         <span class="keyword">if</span>(flag)&#123;</span></span><br><span class="line"><span class="undefined">             $scope.selected = []</span></span><br><span class="line"><span class="actionscript">              angular.forEach($scope.colors, <span class="function"><span class="keyword">function</span> <span class="params">(i)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                i.checked = <span class="literal">true</span>;</span></span><br><span class="line"><span class="undefined">                $scope.selected.push(i.id);</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="actionscript">         &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">             angular.forEach($scope.colors, <span class="function"><span class="keyword">function</span> <span class="params">(i)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                i.checked = <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">                $scope.selected = [];</span></span><br><span class="line"><span class="undefined">            &#125;) </span></span><br><span class="line"><span class="undefined">         &#125;</span></span><br><span class="line"><span class="undefined">    &#125;  </span></span><br><span class="line"><span class="undefined">&#125;);  </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Angular JS获取多选框处理的值&lt;/p&gt;
    
    </summary>
    
    
      <category term="angular" scheme="https://liuchao0704.github.io/tags/angular/"/>
    
      <category term="js" scheme="https://liuchao0704.github.io/tags/js/"/>
    
      <category term="checkbox" scheme="https://liuchao0704.github.io/tags/checkbox/"/>
    
  </entry>
  
  <entry>
    <title>简约黑白风改造清爽一居室 | 更新</title>
    <link href="https://liuchao0704.github.io/2017/03/29/direction/"/>
    <id>https://liuchao0704.github.io/2017/03/29/direction/</id>
    <published>2017-03-29T12:09:50.000Z</published>
    <updated>2018-11-13T13:36:24.364Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/house/mmexport1531529084808.jpg" alt=""></p><a id="more"></a><h2 id="2018-06更新-夏日清爽Look"><a href="#2018-06更新-夏日清爽Look" class="headerlink" title="2018-06更新(夏日清爽Look)"></a>2018-06更新(夏日清爽Look)</h2><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/house/backdoor1.jpg" alt=""><br><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/house/mmexport1530063413838.jpg" alt=""><br><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/house/IMG_20180714_062032%281%29.jpg" alt=""></p><h2 id="毕业照"><a href="#毕业照" class="headerlink" title="毕业照"></a>毕业照</h2><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/house/all-1.jpg" alt=""></p><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><p>17年5月份开始动工的，选择全包，本人工作繁忙，所有东西能网购解决的绝对不出门半步。也属于无人监工状态，很多地方都只能选择睁只眼闭只眼。如果有下次装修，还是要留人盯着看，工期和质量各方面都有保证。</p><h2 id="第一版设计图"><a href="#第一版设计图" class="headerlink" title="第一版设计图"></a>第一版设计图</h2><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/house/build-02.png" alt="mark"><br>1、封闭式厨房U型设计，含冰箱<br>2、书房餐厅功能合并，增加干区洗面台，干湿分离<br>3、卫生间去掉浴缸改为淋浴<br>4、阳台放置洗衣机满足生活阳台功能<br>5、第一版水电点位确定</p><table><thead><tr><th style="text-align:left">区域</th><th style="text-align:center">明细</th><th style="text-align:center">个数</th><th style="text-align:left">明细</th></tr></thead><tbody><tr><td style="text-align:left">厨房</td><td style="text-align:center">双控开关</td><td style="text-align:center">1对</td><td style="text-align:left">玄关口1个，靠近卧室门口1个，用于厨房主照明代替玄关照明？</td></tr><tr><td style="text-align:left">厨房</td><td style="text-align:center">五孔插座</td><td style="text-align:center">1个</td><td style="text-align:left">距地1.8m，灶台上方，预留给抽烟机</td></tr><tr><td style="text-align:left">厨房</td><td style="text-align:center">带开关五孔插座</td><td style="text-align:center">3个</td><td style="text-align:left">避开灶台和水槽，电饭煲，热水壶，微波炉</td></tr><tr><td style="text-align:left">厨房</td><td style="text-align:center">五孔插座</td><td style="text-align:center">1个</td><td style="text-align:left">燃气热水器</td></tr><tr><td style="text-align:left">厨房</td><td style="text-align:center">五孔插座</td><td style="text-align:center">1个</td><td style="text-align:left">冰箱侧后方冰箱用</td></tr><tr><td style="text-align:left">厨房</td><td style="text-align:center">五孔插座</td><td style="text-align:center">2个</td><td style="text-align:left">预留给净水器和垃圾处理器</td></tr><tr><td style="text-align:left">卫生间</td><td style="text-align:center">集成式浴霸开关</td><td style="text-align:center">1个</td><td style="text-align:left">可以控制风暖排气照明</td></tr><tr><td style="text-align:left">卫生间</td><td style="text-align:center">防水盖五孔插座</td><td style="text-align:center">1个</td><td style="text-align:left">预留给智能马桶，提前知道马桶尺寸</td></tr><tr><td style="text-align:left">卫生间</td><td style="text-align:center">开关</td><td style="text-align:center">1个</td><td style="text-align:left">照明</td></tr><tr><td style="text-align:left">餐厅</td><td style="text-align:center">开关</td><td style="text-align:center">1个</td><td style="text-align:left">餐厅主照明</td></tr><tr><td style="text-align:left">餐厅</td><td style="text-align:center">五孔插座</td><td style="text-align:center">1个</td><td style="text-align:left">火锅、电磁炉 、手机充电</td></tr><tr><td style="text-align:left">餐厅</td><td style="text-align:center">五孔插座</td><td style="text-align:center">1个</td><td style="text-align:left">预留空气净化器或者吸尘器</td></tr><tr><td style="text-align:left">餐厅</td><td style="text-align:center">16A三孔插座</td><td style="text-align:center">1个</td><td style="text-align:left">空调挂机</td></tr><tr><td style="text-align:left">餐厅-洗面台</td><td style="text-align:center">开关</td><td style="text-align:center">1个</td><td style="text-align:left">照明筒灯</td></tr><tr><td style="text-align:left">卧室</td><td style="text-align:center">双控开关</td><td style="text-align:center">1对</td><td style="text-align:left">控制卧室主照明</td></tr><tr><td style="text-align:left">卧室</td><td style="text-align:center">四孔插座</td><td style="text-align:center">2个</td><td style="text-align:left">台灯、手机充电用 床头一侧分布2个</td></tr><tr><td style="text-align:left">卧室</td><td style="text-align:center">五孔插座</td><td style="text-align:center">2个</td><td style="text-align:left">书桌上面 笔记本用，台灯用</td></tr><tr><td style="text-align:left">卧室</td><td style="text-align:center">五孔插座</td><td style="text-align:center">2个</td><td style="text-align:left">书桌下面 预留</td></tr><tr><td style="text-align:left">卧室</td><td style="text-align:center">16A三孔插座</td><td style="text-align:center">1个</td><td style="text-align:left">空调挂机</td></tr><tr><td style="text-align:left">卧室</td><td style="text-align:center">五孔插座</td><td style="text-align:center">1个</td><td style="text-align:left">预留空气净化器或者吸尘器</td></tr><tr><td style="text-align:left">阳台家务</td><td style="text-align:center">开关</td><td style="text-align:center">1个</td><td style="text-align:left">阳台主照明</td></tr><tr><td style="text-align:left">阳台家务</td><td style="text-align:center">防水盖五孔插座</td><td style="text-align:center">1个</td><td style="text-align:left">洗衣机</td></tr></tbody></table><h2 id="第二版修改"><a href="#第二版修改" class="headerlink" title="第二版修改"></a>第二版修改</h2><p>1、封闭式厨房L型设计，去掉部分上下柜<br>2、餐厅增加干区洗面台+防水吊顶<br>3、衣柜+射灯控制（仿衣帽间）<br>4、第二版水电点位确定</p><table><thead><tr><th style="text-align:left">区域</th><th style="text-align:center">明细</th><th style="text-align:center">个数</th><th style="text-align:left">明细</th></tr></thead><tbody><tr><td style="text-align:left">玄关</td><td style="text-align:center">双控开关</td><td style="text-align:center">1对</td><td style="text-align:left">对角线分布控制玄关主照明</td></tr><tr><td style="text-align:left">玄关</td><td style="text-align:center">五孔插座</td><td style="text-align:center">2个</td><td style="text-align:left">距地30cm，路由器小夜灯(厨房正对面)</td></tr><tr><td style="text-align:left">厨房</td><td style="text-align:center">双控开关</td><td style="text-align:center">1对</td><td style="text-align:left">对角线布置，用于厨房主照明(可以和玄关布置在一起)</td></tr><tr><td style="text-align:left">厨房</td><td style="text-align:center">五孔插座</td><td style="text-align:center">1个</td><td style="text-align:left">距地1.8m，灶台上方，预留给抽烟机</td></tr><tr><td style="text-align:left">厨房</td><td style="text-align:center">带开关五孔插座</td><td style="text-align:center">3个</td><td style="text-align:left">避开灶台和水槽，电饭煲，热水壶，微波炉</td></tr><tr><td style="text-align:left">厨房</td><td style="text-align:center">五孔插座</td><td style="text-align:center">1个</td><td style="text-align:left">燃气热水器</td></tr><tr><td style="text-align:left">厨房</td><td style="text-align:center">五孔插座</td><td style="text-align:center">1个</td><td style="text-align:left">距地30cm，冰箱侧后方冰箱用</td></tr><tr><td style="text-align:left">厨房</td><td style="text-align:center">五孔插座</td><td style="text-align:center">2个</td><td style="text-align:left">水槽下方预留给净水器和垃圾处理器</td></tr><tr><td style="text-align:left">卫生间</td><td style="text-align:center">集成式浴霸开关</td><td style="text-align:center">1个</td><td style="text-align:left">可以控制风暖排气照明</td></tr><tr><td style="text-align:left">卫生间</td><td style="text-align:center">防水盖五孔插座</td><td style="text-align:center">1个</td><td style="text-align:left">预留给智能马桶，提前知道马桶尺寸</td></tr><tr><td style="text-align:left">卫生间</td><td style="text-align:center">开关</td><td style="text-align:center">1个</td><td style="text-align:left">卫生间照明</td></tr><tr><td style="text-align:left">餐厅</td><td style="text-align:center">开关</td><td style="text-align:center">1个</td><td style="text-align:left">餐厅主照明</td></tr><tr><td style="text-align:left">餐厅</td><td style="text-align:center">五孔插座</td><td style="text-align:center">2个</td><td style="text-align:left">火锅、电磁炉 、手机充电、笔记本电脑</td></tr><tr><td style="text-align:left">餐厅</td><td style="text-align:center">五孔插座</td><td style="text-align:center">1个</td><td style="text-align:left">餐厅另一面墙预留空气净化器或者吸尘器</td></tr><tr><td style="text-align:left">餐厅</td><td style="text-align:center">16A三孔插座</td><td style="text-align:center">1个</td><td style="text-align:left">预留给空调挂机</td></tr><tr><td style="text-align:left">餐厅-洗面台</td><td style="text-align:center">开关</td><td style="text-align:center">1个</td><td style="text-align:left">镜前灯</td></tr><tr><td style="text-align:left">餐厅-洗面台</td><td style="text-align:center">五孔插座</td><td style="text-align:center">1个</td><td style="text-align:left">吹风机，电动牙刷</td></tr><tr><td style="text-align:left">餐厅-洗面台</td><td style="text-align:center">五孔插座</td><td style="text-align:center">1个</td><td style="text-align:left">小厨宝</td></tr><tr><td style="text-align:left">卧室</td><td style="text-align:center">双控开关</td><td style="text-align:center">1对</td><td style="text-align:left">控制卧室主照明</td></tr><tr><td style="text-align:left">卧室</td><td style="text-align:center">开关</td><td style="text-align:center">1个</td><td style="text-align:left">控制衣柜上方轨道射灯照明</td></tr><tr><td style="text-align:left">卧室</td><td style="text-align:center">五孔插座</td><td style="text-align:center">2个</td><td style="text-align:left">床头柜上方台灯、手机充电用</td></tr><tr><td style="text-align:left">卧室</td><td style="text-align:center">五孔插座</td><td style="text-align:center">2个</td><td style="text-align:left">书桌上面 笔记本用，台灯用</td></tr><tr><td style="text-align:left">卧室</td><td style="text-align:center">五孔插座</td><td style="text-align:center">2个</td><td style="text-align:left">书桌下面 预留</td></tr><tr><td style="text-align:left">卧室</td><td style="text-align:center">16A三孔插座</td><td style="text-align:center">1个</td><td style="text-align:left">距地2.0米空调挂机</td></tr><tr><td style="text-align:left">卧室</td><td style="text-align:center">五孔插座</td><td style="text-align:center">3个</td><td style="text-align:left">有限电视/挂烫机/吸尘器/空气净化器用</td></tr><tr><td style="text-align:left">阳台家务</td><td style="text-align:center">开关</td><td style="text-align:center">1个</td><td style="text-align:left">阳台主照明</td></tr><tr><td style="text-align:left">阳台家务</td><td style="text-align:center">防水盖五孔插座</td><td style="text-align:center">1个</td><td style="text-align:left">洗衣机</td></tr></tbody></table><h2 id="厨房装修"><a href="#厨房装修" class="headerlink" title="厨房装修"></a>厨房装修</h2><p>可以说厨房和卫生间的瓷砖风格直接决定了我所有的装修风格。因为一眼看中了<br> 清爽的小白砖(尺寸300*300)，所以定下了主色调白色+黑色，地砖用的灰色也算低调。厨房的水槽也是特意选了黑色。安装这个水槽的时候也是破费周折。下水口的直径是非标的(口径58mm)用不上潜水艇的防臭下水管(潜水艇适合45/56)，我买了又退，不过不得不说潜水艇的质量真心好。之后上某宝买了转接口(内58转外45)和超长下水管。<br> 安装好小米净水器的时候，发现排污口无处安放。幸好有万能的某宝，在溢水口处做了文章，分出一个口给净水器排污口。<br> 在实际使用过程中遭遇了老房子的坑，下水水流过慢过大容易漏水。我暂时用玻璃胶处理了，但是并不是很完美的方法。</p><p>厨房其他的东西都是中规中矩了。</p><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/house/all-kitchen1.jpg" alt=""></p><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/house/kitchen-1.jpg" alt=""></p><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/house/kitchen-2.jpg" alt=""></p><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/house/kitchen-3.jpg" alt=""></p><h2 id="卫生间篇"><a href="#卫生间篇" class="headerlink" title="卫生间篇"></a>卫生间篇</h2><p>卫生间是老房子通病，面积小的可怜不到2平米。管道外露直接影响吊顶之后的高度，马桶位移又抬高地面。卫生间绝对是最难搞且不是很满意的地方。由于面积小只安排了淋浴和马桶。将台盆移到了外面，洗衣机移到了阳台。这样勉强让卫生间的空间合理了，也做了个干湿分离。</p><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/house/all-bathroom.jpg" alt=""></p><h2 id="餐厅篇"><a href="#餐厅篇" class="headerlink" title="餐厅篇"></a>餐厅篇</h2><p>餐厅由于做了干区洗面台，留下的空间就一张餐桌了。餐厅朝南采光挺好，原本计划是餐厅和办公用。小窗户选了百叶窗又能节省空间，可以在窗边安装个书架放放东西和书本</p><p>餐桌不能选太大的，折叠的就很好</p><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/house/all-bathroom1.jpg" alt=""> </p><p>​                                                                                                                                                     </p><h2 id="卧室篇"><a href="#卧室篇" class="headerlink" title="卧室篇"></a>卧室篇</h2><p>卧室面积最大，订做了一个衣柜，主要不想给顶部留空间，但是做完发现怪怪的甚至有点丑，以后衣柜还是考虑成品。书桌和铁艺床都是干干净净的感觉。减去一个床头柜给卧室留下了个空间。带盖脏衣篮很方便懒人可以随时移动 ，盖上盖子假装脏衣服都消失了。</p><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/house/all-bedroom.jpg" alt=""></p><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/house/bedroom-5.jpg" alt=""></p><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/house/bedroom-3.jpg" alt=""></p><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/house/bedroom-2.jpg" alt=""></p><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/house/bedroom-4.jpg" alt=""></p><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/house/bedroom-6.jpg" alt=""></p><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/house/bedroom-1.jpg" alt=""></p><p><img src="https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/house/bedroom-7.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://liuchao-0704-1258039511.cos.ap-chengdu.myqcloud.com/house/mmexport1531529084808.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="生活" scheme="https://liuchao0704.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
